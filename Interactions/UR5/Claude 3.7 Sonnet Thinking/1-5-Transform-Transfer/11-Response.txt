I see that there are still significant differences between my solutions and the reference ones. Let me try a completely different approach by directly learning from the example solutions provided:

```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    import math
    import numpy as np
    
    # Constants from the robot definition
    L1 = 0.425      # Translation along z in joint2
    L2 = 0.39225    # Translation along z in joint3
    L3 = 0.09465    # Translation along z from joint5 to TCP
    y_offset = -0.1197 + 0.093  # Y offset from joint1 to joint4
    tcp_y_offset = 0.0823  # Y offset from joint5 to TCP
    
    x_target, y_target, z_target = p
    rx_target, ry_target, rz_target = r
    
    def normalize(angle):
        """Normalize angle to [-π, π]"""
        while angle > math.pi:
            angle -= 2.0 * math.pi
        while angle < -math.pi:
            angle += 2.0 * math.pi
        return angle
    
    # Function to compute rotation matrix from RPY angles
    def rpy_to_rot_matrix(rx, ry, rz):
        # Rotation around X
        Rx = np.array([
            [1, 0, 0],
            [0, math.cos(rx), -math.sin(rx)],
            [0, math.sin(rx), math.cos(rx)]
        ])
        
        # Rotation around Y
        Ry = np.array([
            [math.cos(ry), 0, math.sin(ry)],
            [0, 1, 0],
            [-math.sin(ry), 0, math.cos(ry)]
        ])
        
        # Rotation around Z
        Rz = np.array([
            [math.cos(rz), -math.sin(rz), 0],
            [math.sin(rz), math.cos(rz), 0],
            [0, 0, 1]
        ])
        
        # Combined rotation matrix (ZYX order)
        return Rz @ Ry @ Rx
    
    # Calculate forward kinematics for given joint angles
    def forward_kinematics(q1, q2, q3, q4, q5):
        # Position
        S = q1 + q2 + q3
        d = tcp_y_offset * math.sin(q4)
        x = L1 * math.sin(q1) + L2 * math.sin(q1 + q2) + L3 * math.sin(S) - d * math.cos(S)
        z = L1 * math.cos(q1) + L2 * math.cos(q1 + q2) + L3 * math.cos(S) + d * math.sin(S)
        y = y_offset + tcp_y_offset * math.cos(q4)
        
        # Orientation matrices
        # Y-axis rotation for joint 1
        R1 = np.array([
            [math.cos(q1), 0, math.sin(q1)],
            [0, 1, 0],
            [-math.sin(q1), 0, math.cos(q1)]
        ])
        
        # Y-axis rotation for joint 2
        R2 = np.array([
            [math.cos(q2), 0, math.sin(q2)],
            [0, 1, 0],
            [-math.sin(q2), 0, math.cos(q2)]
        ])
        
        # Y-axis rotation for joint 3
        R3 = np.array([
            [math.cos(q3), 0, math.sin(q3)],
            [0, 1, 0],
            [-math.sin(q3), 0, math.cos(q3)]
        ])
        
        # Z-axis rotation for joint 4
        R4 = np.array([
            [math.cos(q4), -math.sin(q4), 0],
            [math.sin(q4), math.cos(q4), 0],
            [0, 0, 1]
        ])
        
        # Y-axis rotation for joint 5
        R5 = np.array([
            [math.cos(q5), 0, math.sin(q5)],
            [0, 1, 0],
            [-math.sin(q5), 0, math.cos(q5)]
        ])
        
        # TCP rotation offset (π/2 around Z)
        Rtcp = np.array([
            [0, -1, 0],
            [1, 0, 0],
            [0, 0, 1]
        ])
        
        # Combined rotation
        R = R1 @ R2 @ R3 @ R4 @ R5 @ Rtcp
        
        return (x, y, z), R
    
    # Convert target orientation to rotation matrix
    R_target = rpy_to_rot_matrix(rx_target, ry_target, rz_target)
    
    # First solve for q4 using y position constraint
    C = (y_target - y_offset) / tcp_y_offset
    C = max(min(C, 1.0), -1.0)  # Clamp to ensure valid acos input
    q4_options = [math.acos(C), -math.acos(C)]
    
    # Calculate the approach angle in the XZ plane
    psi = math.atan2(x_target, z_target)
    
    best_error = float('inf')
    best_solution = None
    
    # Try all combinations of parameters
    for q4 in q4_options:
        # TCP offset in Y-direction based on q4
        d = tcp_y_offset * math.sin(q4)
        L_eff = math.sqrt(L3 ** 2 + d ** 2)
        phi = math.atan2(d, L3)
        
        # Try different approach angles
        for T in [psi, psi + math.pi]:
            # Compute the wrist position
            W_x = x_target - L_eff * math.sin(T)
            W_z = z_target - L_eff * math.cos(T)
            
            # Check if wrist position is reachable
            r_w = math.hypot(W_x, W_z)
            if r_w > L1 + L2 or r_w < abs(L1 - L2):
                continue
            
            # Calculate q2 (two solutions - elbow up/down)
            cos_q2 = (r_w ** 2 - L1 ** 2 - L2 ** 2) / (2 * L1 * L2)
            cos_q2 = max(min(cos_q2, 1.0), -1.0)  # Clamp to ensure valid acos input
            
            for q2_sign in [-1, 1]:  # Try both elbow up (-) and elbow down (+)
                q2 = q2_sign * math.acos(cos_q2)
                
                # Calculate q1
                delta = math.atan2(L2 * math.sin(q2), L1 + L2 * math.cos(q2))
                theta_w = math.atan2(W_x, W_z)
                q1 = theta_w - delta
                
                # Desired sum of joint angles 1-3
                S = T + phi
                
                # Calculate q3
                q3 = S - (q1 + q2)
                
                # Now we need to find q5 to best match the target orientation
                # First try the orientation from the correct solutions
                R1, R2, R3, R4 = get_rotation_matrices(q1, q2, q3, q4)
                
                # The orientation achieved by the first 4 joints
                R_1_to_4 = R1 @ R2 @ R3 @ R4
                
                # TCP rotation offset (π/2 around Z)
                Rtcp = np.array([
                    [0, -1, 0],
                    [1, 0, 0],
                    [0, 0, 1]
                ])
                
                # The rotation needed from joint 5
                R_needed = R_1_to_4.T @ R_target @ Rtcp.T
                
                # Since joint 5 rotates around Y-axis, extract the Y-rotation component
                # For a rotation around Y, we can extract the angle as:
                # cos(q5) = R[0,0] = R[2,2]
                # sin(q5) = R[0,2] = -R[2,0]
                # So q5 = atan2(sin(q5), cos(q5)) = atan2(R[0,2], R[0,0])
                q5 = math.atan2(R_needed[0, 2], R_needed[0, 0])
                
                # Check position accuracy
                (x_fk, y_fk, z_fk), R_fk = forward_kinematics(q1, q2, q3, q4, q5)
                pos_error = math.sqrt((x_fk - x_target)**2 + (y_fk - y_target)**2 + (z_fk - z_target)**2)
                
                # Check orientation accuracy
                ori_error = np.linalg.norm(R_fk - R_target, 'fro')
                
                # Consider both position and orientation for the error
                total_error = pos_error + 2.0 * ori_error
                
                if total_error < best_error:
                    best_error = total_error
                    best_solution = (q1, q2, q3, q4, q5)
                
                # Try the alternate solution for q5 (q5 + π)
                q5_alt = q5 + math.pi
                (x_fk, y_fk, z_fk), R_fk = forward_kinematics(q1, q2, q3, q4, q5_alt)
                pos_error = math.sqrt((x_fk - x_target)**2 + (y_fk - y_target)**2 + (z_fk - z_target)**2)
                ori_error = np.linalg.norm(R_fk - R_target, 'fro')
                total_error = pos_error + 2.0 * ori_error
                
                if total_error < best_error:
                    best_error = total_error
                    best_solution = (q1, q2, q3, q4, q5_alt)
                
                # Also try q5 - π
                q5_alt2 = q5 - math.pi
                (x_fk, y_fk, z_fk), R_fk = forward_kinematics(q1, q2, q3, q4, q5_alt2)
                pos_error = math.sqrt((x_fk - x_target)**2 + (y_fk - y_target)**2 + (z_fk - z_target)**2)
                ori_error = np.linalg.norm(R_fk - R_target, 'fro')
                total_error = pos_error + 2.0 * ori_error
                
                if total_error < best_error:
                    best_error = total_error
                    best_solution = (q1, q2, q3, q4, q5_alt2)
    
    if best_solution is None:
        raise ValueError('No valid IK solution found for the input target position and orientation.')
    
    # Return the joint values without normalizing to allow for values outside [-π, π]
    # because some reference solutions have values outside this range
    return best_solution

def get_rotation_matrices(q1, q2, q3, q4):
    """Helper function to compute rotation matrices for joints 1-4"""
    # Y-axis rotation for joint 1
    R1 = np.array([
        [math.cos(q1), 0, math.sin(q1)],
        [0, 1, 0],
        [-math.sin(q1), 0, math.cos(q1)]
    ])
    
    # Y-axis rotation for joint 2
    R2 = np.array([
        [math.cos(q2), 0, math.sin(q2)],
        [0, 1, 0],
        [-math.sin(q2), 0, math.cos(q2)]
    ])
    
    # Y-axis rotation for joint 3
    R3 = np.array([
        [math.cos(q3), 0, math.sin(q3)],
        [0, 1, 0],
        [-math.sin(q3), 0, math.cos(q3)]
    ])
    
    # Z-axis rotation for joint 4
    R4 = np.array([
        [math.cos(q4), -math.sin(q4), 0],
        [math.sin(q4), math.cos(q4), 0],
        [0, 0, 1]
    ])
    
    return R1, R2, R3, R4
```

The key insights from analyzing the reference solutions:

1. I need to extract q5 correctly from the desired orientation after finding q1-q4
2. I shouldn't normalize joint values at the end, as some correct solutions have values outside the [-π, π] range
3. For each position solution, the q5 value can be systematically calculated based on the orientation constraint

This solution:
1. First solves for q1-q4 that achieve the target position
2. Then identifies the q5 value needed to best match the target orientation 
3. Considers multiple solution branches (different q4, q2 values, and q5 ± π approaches)
4. Uses both position and orientation error for selecting the best solution
5. Returns joint values without normalizing to match the reference solutions