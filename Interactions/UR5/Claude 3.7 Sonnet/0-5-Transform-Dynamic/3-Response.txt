Thank you for providing the forward kinematics results. This helps me understand the robot's configuration when all joint angles are set to zero. Now I'll develop the inverse kinematics solution for the 6-DOF manipulator.

Let me analyze the robot structure and develop a complete inverse kinematics solution by building on the existing code snippets.

```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    import math
    import numpy as np
    
    # Extract target position and orientation
    x, y, z = p
    target_roll, target_pitch, target_yaw = r
    
    # First, we need to account for the TCP offset to find the position of joint 6
    # The TCP is offset by [0, 0.0823, 0] with orientation [0, 0, 1.570796325] relative to joint 6
    
    # Create rotation matrix for the target orientation
    R_target = np.array([
        [math.cos(target_yaw) * math.cos(target_pitch), 
         math.cos(target_yaw) * math.sin(target_pitch) * math.sin(target_roll) - math.sin(target_yaw) * math.cos(target_roll), 
         math.cos(target_yaw) * math.sin(target_pitch) * math.cos(target_roll) + math.sin(target_yaw) * math.sin(target_roll)],
        [math.sin(target_yaw) * math.cos(target_pitch), 
         math.sin(target_yaw) * math.sin(target_pitch) * math.sin(target_roll) + math.cos(target_yaw) * math.cos(target_roll), 
         math.sin(target_yaw) * math.sin(target_pitch) * math.cos(target_roll) - math.cos(target_yaw) * math.sin(target_roll)],
        [-math.sin(target_pitch), 
         math.cos(target_pitch) * math.sin(target_roll), 
         math.cos(target_pitch) * math.cos(target_roll)]
    ])
    
    # TCP offset in local frame
    tcp_offset = np.array([0, 0.0823, 0])
    
    # Transform TCP offset to world frame and subtract from target position to get joint 6 position
    tcp_offset_world = R_target @ tcp_offset
    j6_pos = np.array([x, y, z]) - tcp_offset_world
    
    # Now we need to find the position of joint 5
    # Joint 6 is offset from joint 5 by [0, 0, 0.09465]
    j5_offset = np.array([0, 0, 0.09465])
    j5_offset_world = R_target @ j5_offset
    j5_pos = j6_pos - j5_offset_world
    
    # Now we need to find the position of joint 4
    # Joint 5 is offset from joint 4 by [0, 0.093, 0]
    j4_offset = np.array([0, 0.093, 0])
    j4_offset_world = R_target @ j4_offset
    j4_pos = j5_pos - j4_offset_world
    
    # Solve for joint 1 (base rotation around Z)
    # Using the approach from EXISTING 1
    theta1 = math.atan2(-j4_pos[0], j4_pos[1])
    
    # Create rotation matrix for joint 1
    R1 = np.array([
        [math.cos(theta1), -math.sin(theta1), 0],
        [math.sin(theta1), math.cos(theta1), 0],
        [0, 0, 1]
    ])
    
    # Transform j4_pos to joint 1 frame
    j4_pos_local = R1.T @ j4_pos
    
    # Calculate the distance from joint 2 to joint 4 in the XZ plane
    # Joint 2 is at [0, 0.13585, 0] relative to joint 1
    j2_pos = np.array([0, 0.13585, 0])
    dx = j4_pos_local[0] - j2_pos[0]
    dy = j4_pos_local[1] - j2_pos[1]
    dz = j4_pos_local[2] - j2_pos[2]
    
    # Calculate the lengths of the links
    L2_3 = math.sqrt(0.1197**2 + 0.425**2)  # Length from joint 2 to 3
    L3_4 = 0.39225  # Length from joint 3 to 4
    
    # Calculate the distance from joint 2 to joint 4
    L2_4 = math.sqrt(dx**2 + dy**2 + dz**2)
    
    # Use the law of cosines to find the angle at joint 3
    cos_theta3 = (L2_3**2 + L3_4**2 - L2_4**2) / (2 * L2_3 * L3_4)
    cos_theta3 = max(min(cos_theta3, 1.0), -1.0)  # Clamp to valid range
    theta3 = math.acos(cos_theta3) - math.pi  # Subtract pi because of the joint configuration
    
    # Find the angle of the triangle at joint 2
    beta = math.acos((L2_3**2 + L2_4**2 - L3_4**2) / (2 * L2_3 * L2_4))
    
    # Find the angle from horizontal to the line from joint 2 to joint 4
    alpha = math.atan2(dz, math.sqrt(dx**2 + dy**2))
    
    # Calculate theta2
    theta2 = alpha + beta
    
    # Now we need to find theta4, theta5, and theta6 to achieve the desired orientation
    # First, calculate the orientation achieved by the first three joints
    R2 = np.array([
        [math.cos(theta2), 0, math.sin(theta2)],
        [0, 1, 0],
        [-math.sin(theta2), 0, math.cos(theta2)]
    ])
    
    R3 = np.array([
        [math.cos(theta3), 0, math.sin(theta3)],
        [0, 1, 0],
        [-math.sin(theta3), 0, math.cos(theta3)]
    ])
    
    R1_3 = R1 @ R2 @ R3
    
    # The remaining rotation needed to achieve the target orientation
    R3_6 = R1_3.T @ R_target
    
    # Extract Euler angles from R3_6 (ZYZ convention)
    theta5 = math.atan2(math.sqrt(R3_6[2, 0]**2 + R3_6[2, 1]**2), R3_6[2, 2])
    
    if abs(theta5) < 1e-6:
        # Singularity case (gimbal lock)
        theta4 = 0
        theta6 = math.atan2(R3_6[0, 1], R3_6[0, 0])
    elif abs(theta5 - math.pi) < 1e-6:
        # Another singularity case
        theta4 = 0
        theta6 = -math.atan2(R3_6[0, 1], R3_6[0, 0])
    else:
        # Normal case
        theta4 = math.atan2(R3_6[1, 2], R3_6[0, 2])
        theta6 = math.atan2(R3_6[2, 1], -R3_6[2, 0])
    
    # Return all joint angles
    return (theta1, theta2, theta3, theta4, theta5, theta6)
```

This solution follows these steps:

1. Calculate the position of joint 6 by accounting for the TCP offset
2. Work backwards to find the positions of joints 5 and 4
3. Solve for joint 1 (base rotation) using the position of joint 4
4. Use the law of cosines to solve for joints 2 and 3 based on the position of joint 4
5. Calculate the orientation achieved by the first three joints
6. Determine the remaining rotation needed for joints 4, 5, and 6 to achieve the target orientation
7. Extract the Euler angles for joints 4, 5, and 6, handling singularity cases

The solution handles the kinematic chain properly and accounts for the offsets between joints to achieve the desired position and orientation of the TCP.