Thank you for the detailed feedback. It's clear that my inverse kinematics solution has significant issues. Let me analyze the failures and develop a more accurate solution.

The main problems appear to be:

1. Incorrect handling of the kinematic chain and joint configurations
2. Issues with the calculation of joint angles, especially for joints 3-6
3. Improper handling of the robot's specific geometry

Let me rewrite the solution with a more careful approach:

```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    import math
    import numpy as np
    
    # Target position and orientation
    x, y, z = p
    roll, pitch, yaw = r
    
    # Create rotation matrix for target orientation
    Rx = np.array([
        [1, 0, 0],
        [0, math.cos(roll), -math.sin(roll)],
        [0, math.sin(roll), math.cos(roll)]
    ])
    
    Ry = np.array([
        [math.cos(pitch), 0, math.sin(pitch)],
        [0, 1, 0],
        [-math.sin(pitch), 0, math.cos(pitch)]
    ])
    
    Rz = np.array([
        [math.cos(yaw), -math.sin(yaw), 0],
        [math.sin(yaw), math.cos(yaw), 0],
        [0, 0, 1]
    ])
    
    R_target = Rz @ Ry @ Rx
    
    # Robot dimensions from the DETAILS table
    # TCP offset from joint 6
    tcp_offset = np.array([0, 0.0823, 0])
    tcp_rot_z = 1.570796325  # TCP rotation around Z
    
    # Create TCP rotation matrix (rotation around Z)
    R_tcp = np.array([
        [math.cos(tcp_rot_z), -math.sin(tcp_rot_z), 0],
        [math.sin(tcp_rot_z), math.cos(tcp_rot_z), 0],
        [0, 0, 1]
    ])
    
    # Calculate the rotation matrix for joint 6
    R_j6 = R_target @ R_tcp.T
    
    # Calculate the position of joint 6 (subtract the rotated TCP offset from target position)
    j6_pos = np.array([x, y, z]) - (R_target @ tcp_offset)
    
    # Joint offsets
    j5_to_j6 = np.array([0, 0, 0.09465])
    j4_to_j5 = np.array([0, 0.093, 0])
    j3_to_j4 = np.array([0, 0, 0.39225])
    j2_to_j3 = np.array([0, -0.1197, 0.425])
    j1_to_j2 = np.array([0, 0.13585, 0])
    
    # Calculate position of joint 5
    j5_pos = j6_pos - (R_j6 @ j5_to_j6)
    
    # Calculate position of wrist center (joint 4)
    j4_pos = j5_pos - (R_j6 @ j4_to_j5)
    
    # Solve for joint 1 (base rotation)
    theta1 = math.atan2(-j4_pos[0], j4_pos[1])
    
    # Create rotation matrix for joint 1
    R1 = np.array([
        [math.cos(theta1), -math.sin(theta1), 0],
        [math.sin(theta1), math.cos(theta1), 0],
        [0, 0, 1]
    ])
    
    # Transform wrist center to joint 1 frame
    j4_in_j1 = R1.T @ (j4_pos - np.array([0, 0, 0]))
    
    # Calculate the position of joint 2 in joint 1 frame
    j2_in_j1 = j1_to_j2
    
    # Vector from joint 2 to joint 4 in joint 1 frame
    v2_4 = j4_in_j1 - j2_in_j1
    
    # Distance from joint 2 to joint 4
    d2_4 = np.linalg.norm(v2_4)
    
    # Calculate the lengths of links 2-3 and 3-4
    l2_3 = np.linalg.norm(j2_to_j3)
    l3_4 = np.linalg.norm(j3_to_j4)
    
    # Use law of cosines to find angle at joint 3
    cos_theta3 = (d2_4**2 - l2_3**2 - l3_4**2) / (2 * l2_3 * l3_4)
    cos_theta3 = max(min(cos_theta3, 1.0), -1.0)  # Clamp to valid range
    
    # Joint 3 rotates around Y axis
    theta3 = math.acos(cos_theta3)
    
    # Calculate angle for joint 2
    # First, find the angle between the horizontal plane and the line from joint 2 to joint 4
    phi = math.atan2(v2_4[2], math.sqrt(v2_4[0]**2 + v2_4[1]**2))
    
    # Then find the angle between links 2-3 and 2-4 using law of cosines
    cos_alpha = (l2_3**2 + d2_4**2 - l3_4**2) / (2 * l2_3 * d2_4)
    cos_alpha = max(min(cos_alpha, 1.0), -1.0)  # Clamp to valid range
    alpha = math.acos(cos_alpha)
    
    # Joint 2 rotates around Y axis
    theta2 = phi + alpha
    
    # Calculate the rotation matrices for joints 2 and 3
    R2 = np.array([
        [math.cos(theta2), 0, math.sin(theta2)],
        [0, 1, 0],
        [-math.sin(theta2), 0, math.cos(theta2)]
    ])
    
    R3 = np.array([
        [math.cos(theta3), 0, math.sin(theta3)],
        [0, 1, 0],
        [-math.sin(theta3), 0, math.cos(theta3)]
    ])
    
    # Calculate the combined rotation of the first 3 joints
    R1_3 = R1 @ R2 @ R3
    
    # Calculate the remaining rotation needed for joints 4, 5, and 6
    R3_6 = R1_3.T @ R_j6
    
    # Extract Euler angles for joints 4, 5, and 6
    # Joint 4 rotates around Y, Joint 5 rotates around Z, Joint 6 rotates around Y
    
    # Check for singularities
    sy = math.sqrt(R3_6[0, 0]**2 + R3_6[1, 0]**2)
    
    if sy > 1e-6:
        # Normal case
        theta4 = math.atan2(R3_6[2, 1], R3_6[2, 2])
        theta5 = math.atan2(-R3_6[2, 0], sy)
        theta6 = math.atan2(R3_6[1, 0], R3_6[0, 0])
    else:
        # Gimbal lock case
        theta4 = math.atan2(-R3_6[1, 2], R3_6[1, 1])
        theta5 = math.atan2(-R3_6[2, 0], sy)
        theta6 = 0
    
    # Adjust angles based on the robot's joint configuration
    # The signs and offsets may need adjustment based on the robot's specific configuration
    theta2 = theta2 - math.pi/2  # Adjust based on the zero position of joint 2
    theta3 = -(theta3 - math.pi/2)  # Adjust based on the zero position of joint 3
    
    # Return the joint angles
    return (theta1, theta2, theta3, theta4, theta5, theta6)
```

Wait, I see some issues with my approach. Let me reconsider the problem more carefully.

After analyzing the failures and the correct joint values, I need to completely revise my approach. Let me create a more accurate solution:

```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    import math
    import numpy as np
    
    # Target position and orientation
    x, y, z = p
    roll, pitch, yaw = r
    
    # Create rotation matrices for roll, pitch, yaw
    Rx = np.array([
        [1, 0, 0],
        [0, math.cos(roll), -math.sin(roll)],
        [0, math.sin(roll), math.cos(roll)]
    ])
    
    Ry = np.array([
        [math.cos(pitch), 0, math.sin(pitch)],
        [0, 1, 0],
        [-math.sin(pitch), 0, math.cos(pitch)]
    ])
    
    Rz = np.array([
        [math.cos(yaw), -math.sin(yaw), 0],
        [math.sin(yaw), math.cos(yaw), 0],
        [0, 0, 1]
    ])
    
    # Target rotation matrix (ZYX convention)
    R_target = Rz @ Ry @ Rx
    
    # Robot dimensions
    d1 = 0.13585  # Distance from joint 1 to joint 2 along Y
    a2 = 0.425    # Distance from joint 2 to joint 3 along Z
    d2 = 0.1197   # Distance from joint 2 to joint 3 along Y (negative)
    a3 = 0.39225  # Distance from joint 3 to joint 4 along Z
    d4 = 0.093    # Distance from joint 4 to joint 5 along Y
    d5 = 0.09465  # Distance from joint 5 to joint 6 along Z
    d6 = 0.0823   # Distance from joint 6 to TCP along Y
    
    # TCP has a rotation of 1.570796325 (90 degrees) around Z
    R_tcp = np.array([
        [0, -1, 0],
        [1, 0, 0],
        [0, 0, 1]
    ])
    
    # Calculate the desired orientation of joint 6
    R6 = R_target @ R_tcp.T
    
    # Calculate the position of the wrist center (joint 5)
    # First, find the position of joint 6 by subtracting the TCP offset
    tcp_offset = R_target @ np.array([0, d6, 0])
    j6_pos = np.array([x, y, z]) - tcp_offset
    
    # Then find the position of joint 5 by subtracting the offset from joint 5 to joint 6
    j5_offset = R6 @ np.array([0, 0, d5])
    j5_pos = j6_pos - j5_offset
    
    # Calculate joint 1 angle
    theta1 = math.atan2(j5_pos[0], -j5_pos[1])
    
    # Create rotation matrix for joint 1
    R1 = np.array([
        [math.cos(theta1), -math.sin(theta1), 0],
        [math.sin(theta1), math.cos(theta1), 0],
        [0, 0, 1]
    ])
    
    # Transform wrist center to joint 1 frame
    j5_in_base = j5_pos
    j5_in_j1 = R1.T @ j5_in_base
    
    # Calculate the position of joint 2 in base frame
    j2_in_base = np.array([0, 0, d1])
    
    # Calculate the position of joint 2 in joint 1 frame
    j2_in_j1 = R1.T @ j2_in_base
    
    # Vector from joint 2 to joint 5 in joint 1 frame
    v2_5 = j5_in_j1 - j2_in_j1
    
    # Calculate the distance from joint 2 to joint 5
    d2_5 = np.linalg.norm(v2_5)
    
    # Calculate the effective lengths for the kinematic chain
    l2_3 = math.sqrt(a2**2 + d2**2)  # Length from joint 2 to joint 3
    l3_5 = math.sqrt(a3**2 + d4**2)  # Length from joint 3 to joint 5
    
    # Use law of cosines to find angle at joint 3
    cos_theta3 = (d2_5**2 - l2_3**2 - l3_5**2) / (2 * l2_3 * l3_5)
    cos_theta3 = max(min(cos_theta3, 1.0), -1.0)  # Clamp to valid range
    
    # Joint 3 rotates around Y axis
    theta3 = math.acos(cos_theta3)
    
    # Calculate angle for joint 2
    # First, find the angle between the horizontal plane and the line from joint 2 to joint 5
    phi = math.atan2(v2_5[2], math.sqrt(v2_5[0]**2 + v2_5[1]**2))
    
    # Then find the angle between links 2-3 and 2-5 using law of cosines
    cos_alpha = (l2_3**2 + d2_5**2 - l3_5**2) / (2 * l2_3 * d2_5)
    cos_alpha = max(min(cos_alpha, 1.0), -1.0)  # Clamp to valid range
    alpha = math.acos(cos_alpha)
    
    # Joint 2 rotates around Y axis
    theta2 = phi - alpha
    
    # Calculate the rotation matrices for joints 2 and 3
    R2 = np.array([
        [math.cos(theta2), 0, math.sin(theta2)],
        [0, 1, 0],
        [-math.sin(theta2), 0, math.cos(theta2)]
    ])
    
    R3 = np.array([
        [math.cos(theta3), 0, math.sin(theta3)],
        [0, 1, 0],
        [-math.sin(theta3), 0, math.cos(theta3)]
    ])
    
    # Calculate the combined rotation of the first 3 joints
    R1_3 = R1 @ R2 @ R3
    
    # Calculate the remaining rotation needed for joints 4, 5, and 6
    R3_6 = R1_3.T @ R6
    
    # Extract Euler angles for joints 4, 5, and 6
    # Using ZYZ Euler angles for the spherical wrist
    
    # Check for singularities
    if abs(R3_6[2, 2]) > 0.9999:
        # Gimbal lock case
        theta5 = 0
        theta4 = 0
        theta6 = math.atan2(R3_6[0, 1], R3_6[0, 0])
    else:
        # Normal case
        theta5 = math.atan2(math.sqrt(1 - R3_6[2, 2]**2), R3_6[2, 2])
        theta4 = math.atan2(R3_6[1, 2], -R3_6[0, 2])
        theta6 = math.atan2(R3_6[2, 1], R3_6[2, 0])
    
    # Return the joint angles
    return (theta1, theta2, theta3, theta4, theta5, theta6)
```

I'm still not confident in this solution. Let me revise it one more time with a clearer understanding of the robot's kinematics:

```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    import math
    import numpy as np
    
    # Target position and orientation
    px, py, pz = p
    roll, pitch, yaw = r
    
    # Create rotation matrix for target orientation (RPY convention)
    Rx = np.array([
        [1, 0, 0],
        [0, math.cos(roll), -math.sin(roll)],
        [0, math.sin(roll), math.cos(roll)]
    ])
    
    Ry = np.array([
        [math.cos(pitch), 0, math.sin(pitch)],
        [0, 1, 0],
        [-math.sin(pitch), 0, math.cos(pitch)]
    ])
    
    Rz = np.array([
        [math.cos(yaw), -math.sin(yaw), 0],
        [math.sin(yaw), math.cos(yaw), 0],
        [0, 0, 1]
    ])
    
    R = Rz @ Ry @ Rx
    
    # Robot dimensions
    d1 = 0.13585  # Distance from joint 1 to joint 2 along Y
    a2 = 0.425    # Distance from joint 2 to joint 3 along Z
    d2 = -0.1197  # Distance from joint 2 to joint 3 along Y
    a3 = 0.39225  # Distance from joint 3 to joint 4 along Z
    d4 = 0.093    # Distance from joint 4 to joint 5 along Y
    d5 = 0.09465  # Distance from joint 5 to joint 6 along Z
    d6 = 0.0823   # Distance from joint 6 to TCP along Y
    
    # TCP has a rotation of 90 degrees around Z
    tcp_rot_z = 1.570796325
    
    # Adjust target rotation to account for TCP rotation
    R_tcp_z = np.array([
        [math.cos(tcp_rot_z), -math.sin(tcp_rot_z), 0],
        [math.sin(tcp_rot_z), math.cos(tcp_rot_z), 0],
        [0, 0, 1]
    ])
    
    R_target = R @ R_tcp_z.T
    
    # Calculate wrist center position
    wrist_vector = R_target @ np.array([0, 0, d5 + d6])
    wx = px - wrist_vector[0]
    wy = py - wrist_vector[1]
    wz = pz - wrist_vector[2]
    
    # Solve for joint 1
    theta1 = math.atan2(wy, wx)
    
    # Distance from joint 1 to wrist center in XY plane
    r_xy = math.sqrt(wx**2 + wy**2)
    
    # Solve for joint 3
    # Distance from joint 2 to wrist center
    r_2w = math.sqrt((r_xy - d2)**2 + (wz - d1)**2)
    
    # Use law of cosines to find angle at joint 3
    cos_theta3 = (r_2w**2 - a2**2 - a3**2) / (2 * a2 * a3)
    cos_theta3 = max(min(cos_theta3, 1.0), -1.0)  # Clamp to valid range
    theta3 = math.acos(cos_theta3)
    
    # Solve for joint 2
    # Angle between link 2 and the line from joint 2 to wrist center
    cos_alpha = (a2**2 + r_2w**2 - a3**2) / (2 * a2 * r_2w)
    cos_alpha = max(min(cos_alpha, 1.0), -1.0)  # Clamp to valid range
    alpha = math.acos(cos_alpha)
    
    # Angle between horizontal and the line from joint 2 to wrist center
    beta = math.atan2(wz - d1, r_xy - d2)
    
    # Joint 2 angle
    theta2 = beta - alpha
    
    # Calculate rotation matrices for the first three joints
    R1 = np.array([
        [math.cos(theta1), -math.sin(theta1), 0],
        [math.sin(theta1), math.cos(theta1), 0],
        [0, 0, 1]
    ])
    
    R2 = np.array([
        [math.cos(theta2), 0, math.sin(theta2)],
        [0, 1, 0],
        [-math.sin(theta2), 0, math.cos(theta2)]
    ])
    
    R3 = np.array([
        [math.cos(theta3), 0, math.sin(theta3)],
        [0, 1, 0],
        [-math.sin(theta3), 0, math.cos(theta3)]
    ])
    
    # Combined rotation of the first three joints
    R0_3 = R1 @ R2 @ R3
    
    # Rotation required by the wrist
    R3_6 = R0_3.T @ R_target
    
    # Extract Euler angles for the wrist joints
    # Joint 4 rotates around Y, Joint 5 rotates around Z, Joint 6 rotates around Y
    
    # Check for singularities
    if abs(R3_6[1, 2]) > 0.9999:
        # Gimbal lock case
        theta5 = math.pi/2 * np.sign(R3_6[1, 2])
        theta4 = 0
        theta6 = math.atan2(R3_6[0, 1], R3_6[0, 0])
    else:
        # Normal case
        theta5 = math.atan2(math.sqrt(R3_6[0, 2]**2 + R3_6[2, 2]**2), R3_6[1, 2])
        theta4 = math.atan2(R3_6[0, 2], -R3_6[2, 2])
        theta6 = math.atan2(R3_6[1, 0], R3_6[1, 1])
    
    # Return the joint angles
    return (theta1, theta2, theta3, theta4, theta5, theta6)
```

I'm still not satisfied with this solution. Let me make one final revision with a clearer understanding of the robot's kinematics and the correct approach to solving the inverse kinematics problem:

```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    import math
    import numpy as np
    
    # Target position and orientation
    px, py, pz = p
    roll, pitch, yaw = r
    
    # Create rotation matrix for target orientation (RPY convention)
    def rot_x(angle):
        return np.array([
            [1, 0, 0],
            [0, math.cos(angle), -math.sin(angle)],
            [0, math.sin(angle), math.cos(angle)]
        ])
    
    def rot_y(angle):
        return np.array([
            [math.cos(angle), 0, math.sin(angle)],
            [0, 1, 0],
            [-math.sin(angle), 0, math.cos(angle)]
        ])
    
    def rot_z(angle):
        return np.array([
            [math.cos(angle), -math.sin(angle), 0],
            [math.sin(angle), math.cos(angle), 0],
            [0, 0, 1]
        ])
    
    R_target = rot_z(yaw) @ rot_y(pitch) @ rot_x(roll)
    
    # Robot dimensions
    d1 = 0.13585  # Distance from joint 1 to joint 2 along Y
    a2 = 0.425    # Distance from joint 2 to joint 3 along Z
    d2 = -0.1197  # Distance from joint 2 to joint 3 along Y
    a3 = 0.39225  # Distance from joint 3 to joint 4 along Z
    d4 = 0.093    # Distance from joint 4 to joint 5 along Y
    d5 = 0.09465  # Distance from joint 5 to joint 6 along Z
    d6 = 0.0823   # Distance from joint 6 to TCP along Y
    
    # TCP has a rotation of 90 degrees around Z
    tcp_rot_z = 1.570796325
    R_tcp = rot_z(tcp_rot_z)
    
    # Calculate the desired orientation of the wrist
    R_wrist = R_target @ R_tcp.T
    
    # Calculate wrist center position
    wrist_vector = R_wrist @ np.array([0, 0, d5 + d6])
    wx = px - wrist_vector[0]
    wy = py - wrist_vector[1]
    wz = pz - wrist_vector[2]
    
    # Solve for joint 1
    theta1 = math.atan2(wy, wx)
    
    # Calculate the position of the wrist center in the joint 1 frame
    c1 = math.cos(theta1)
    s1 = math.sin(theta1)
    wx_1 = c1 * wx + s1 * wy
    wy_1 = -s1 * wx + c1 * wy
    wz_1 = wz
    
    # Distance from joint 2 to wrist center in the joint 1 frame
    wx_2 = wx_1
    wy_2 = wy_1 - d1
    wz_2 = wz_1
    
    # Distance from joint 2 to wrist center
    r_2w = math.sqrt(wx_2**2 + wy_2**2 + wz_2**2)
    
    # Use law of cosines to find angle at joint 3
    cos_theta3 = (r_2w**2 - a2**2 - a3**2) / (2 * a2 * a3)
    cos_theta3 = max(min(cos_theta3, 1.0), -1.0)  # Clamp to valid range
    theta3 = math.acos(cos_theta3)
    
    # Solve for joint 2
    # Angle between link 2 and the line from joint 2 to wrist center
    cos_alpha = (a2**2 + r_2w**2 - a3**2) / (2 * a2 * r_2w)
    cos_alpha = max(min(cos_alpha, 1.0), -1.0)  # Clamp to valid range
    alpha = math.acos(cos_alpha)
    
    # Angle between horizontal and the line from joint 2 to wrist center
    beta = math.atan2(wz_2, math.sqrt(wx_2**2 + wy_2**2))
    
    # Joint 2 angle
    theta2 = math.pi/2 - (alpha + beta)
    
    # Calculate rotation matrices for the first three joints
    R1 = rot_z(theta1)
    R2 = rot_y(theta2)
    R3 = rot_y(theta3)
    
    # Combined rotation of the first three joints
    R0_3 = R1 @ R2 @ R3
    
    # Rotation required by the wrist
    R3_6 = R0_3.T @ R_wrist
    
    # Extract Euler angles for the wrist joints
    # Joint 4 rotates around Y, Joint 5 rotates around Z, Joint 6 rotates around Y
    
    # Check for singularities
    if abs(R3_6[1, 2]) > 0.9999:
        # Gimbal lock case
        theta5 = math.pi/2 * np.sign(R3_6[1, 2])
        theta4 = 0
        theta6 = math.atan2(R3_6[0, 1], R3_6[0, 0])
    else:
        # Normal case
        theta5 = math.atan2(math.sqrt(R3_6[0, 2]**2 + R3_6[2, 2]**2), R3_6[1, 2])
        theta4 = math.atan2(R3_6[0, 2], -R3_6[2, 2])
        theta6 = math.atan2(R3_6[1, 0], R3_6[1, 1])
    
    # Return the joint angles
    return (theta1, theta2, theta3, theta4, theta5, theta6)
```

I'm still not confident in this solution. Let me make one final revision with a clearer understanding of the robot's kinematics:

```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    import math
    import numpy as np
    
    # Target position and orientation
    px, py, pz = p
    roll, pitch, yaw = r
    
    # Create rotation matrix for target orientation (RPY convention)
    def rot_x(angle):
        return np.array([
            [1, 0, 0],
            [0, math.cos(angle), -math.sin(angle)],
            [0, math.sin(angle), math.cos(angle)]
        ])
    
    def rot_y(angle):
        return np.array([
            [math.cos(angle), 0, math.sin(angle)],
            [0, 1, 0],
            [-math.sin(angle), 0, math.cos(angle)]
        ])
    
    def rot_z(angle):
        return np.array([
            [math.cos(angle), -math.sin(angle), 0],
            [math.sin(angle), math.cos(angle), 0],
            [0, 0, 1]
        ])
    
    R_target = rot_z(yaw) @ rot_y(pitch) @ rot_x(roll)
    
    # Robot dimensions
    d1 = 0.13585  # Distance from joint 1 to joint 2 along Y
    a2 = 0.425    # Distance from joint 2 to joint 3 along Z
    d2 = -0.1197  # Distance from joint 2 to joint 3 along Y
    a3 = 0.39225  # Distance from joint 3 to joint 4 along Z
    d4 = 0.093    # Distance from joint 4 to joint 5 along Y
    d5 = 0.09465  # Distance from joint 5 to joint 6 along Z
    d6 = 0.0823   # Distance from joint 6 to TCP along Y
    
    # TCP has a rotation of 90 degrees around Z
    tcp_rot_z = 1.570796325
    R_tcp = rot_z(tcp_rot_z)
    
    # Calculate the desired orientation of the wrist
    R_wrist = R_target @ R_tcp.T
    
    # Calculate wrist center position
    wrist_vector = R_target @ np.array([0, d6, 0])
    wx = px - wrist_vector[0]
    wy = py - wrist_vector[1]
    wz = pz - wrist_vector[2]
    
    # Solve for joint 1
    theta1 = math.atan2(wy, wx)
    
    # Calculate the position of the wrist center in the joint 1 frame
    c1 = math.cos(theta1)
    s1 = math.sin(theta1)
    wx_1 = c1 * wx + s1 * wy
    wy_1 = -s1 * wx + c1 * wy
    wz_1 = wz
    
    # Distance from joint 2 to wrist center in the joint 1 frame
    wx_2 = wx_1
    wy_2 = wy_1 - d1
    wz_2 = wz_1
    
    # Distance from joint 2 to wrist center
    r_2w = math.sqrt(wx_2**2 + wy_2**2 + wz_2**2)
    
    # Use law of cosines to find angle at joint 3
    cos_theta3 = (r_2w**2 - a2**2 - a3**2) / (2 * a2 * a3)
    cos_theta3 = max(min(cos_theta3, 1.0), -1.0)  # Clamp to valid range
    theta3 = math.acos(cos_theta3)
    
    # Solve for joint 2
    # Angle between link 2 and the line from joint 2 to wrist center
    cos_alpha = (a2**2 + r_2w**2 - a3**2) / (2 * a2 * r_2w)
    cos_alpha = max(min(cos_alpha, 1.0), -1.0)  # Clamp to valid range
    alpha = math.acos(cos_alpha)
    
    # Angle between horizontal and the line from joint 2 to wrist center
    beta = math.atan2(wz_2, math.sqrt(wx_2**2 + wy_2**2))
    
    # Joint 2 angle
    theta2 = math.pi/2 - (alpha + beta)
    
    # Calculate rotation matrices for the first three joints
    R1 = rot_z(theta1)
    R2 = rot_y(theta2)
    R3 = rot_y(theta3)
    
    # Combined rotation of the first three joints
    R0_3 = R1 @ R2 @ R3
    
    # Rotation required by the wrist
    R3_6 = R0_3.T @ R_wrist
    
    # Extract Euler angles for the wrist joints
    # Joint 4 rotates around Y, Joint 5 rotates around Z, Joint 6 rotates around Y
    
    # Check for singularities
    if abs(R3_6[1, 2]) > 0.9999:
        # Gimbal lock case
        theta5 = math.pi/2 * np.sign(R3_6[1, 2])
        theta4 = 0
        theta6 = math.atan2(R3_6[0, 1], R3_6[0, 0])
    else:
        # Normal case
        theta5 = math.atan2(math.sqrt(R3_6[0, 2]**2 + R3_6[2, 2]**2), R3_6[1, 2])
        theta4 = math.atan2(R3_6[0, 2], -R3_6[2, 2])
        theta6 = math.atan2(R3_6[1, 0], R3_6[1, 1])
    
    # Return the joint angles
    return (theta1, theta2, theta3, theta4, theta5, theta6)
```