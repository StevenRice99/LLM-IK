To solve the inverse kinematicsproblem for the given 1-DOF serial manipulator, we need to determine the joint angle θ that positions the TCP at the target coordinates (x, y, 0). The manipulator's TCP moves in a circular path in the XY-plane with a radius equal to the length of the link (L = 0.13585 meters). The joint rotates around the Z-axis, and the angle θ is measured from the positive Y-axis, increasing clockwise.

### Approach
1. **Understanding the Kinematics**: The TCP's position is determined by the joint angle θ. The coordinates of the TCP can be expressed as:
   - \( x = L \cdot \sin(\theta) \)
   - \( y = L \cdot \cos(\theta) \)
   
2. **Formulating the Solution**: Given a target position (x, y, 0), we need to find θ such that the TCP reaches this point. Using trigonometric identities:
   - \( \tan(\theta) = \frac{x}{y} \)
   - θ can be found using the arctangent function, considering the correct quadrant, which is achieved using `math.atan2(x, y)`. Since the joint rotates clockwise, the angle θ should be negated.

3. **Implementation**: The function `inverse_kinematics` takes the target position as input and returns the required joint angle θ.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    theta = -math.atan2(x, y)
    return theta
```

### Explanation
- **Function Parameters**: The function takes a tuple `p` representing the target position in 3D space. However, since the manipulator operates in the XY-plane, the z-coordinate is ignored.
- **Calculation**: Using `math.atan2(x, y)`, the function computes the angle in the correct quadrant. Since the joint rotates clockwise, the angle is negated to get the correct joint value θ.
- **Return Value**: The computed angle θ is returned, which is the joint value needed to position the TCP at the target coordinates.

This approach efficiently solves the inverse kinematics problem by leveraging basic trigonometric principles and ensures the solution is both accurate and efficient.