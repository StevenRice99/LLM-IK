To solve the inverse kinematicsproblem for the given 2-DOF serial manipulator, we follow these steps:

1. **Understand the Robot Structure**: The robot has two revolute joints. The first joint (θ1) rotates around the Z-axis, and the second joint (θ2) rotates around the Y-axis. The TCP is attached to the second joint with a fixed offset.

2. **Forward Kinematics Equations**:
   - **x**: \( x = 0.13585 \cosθ1 - 0.425 \sinθ2 \)
   - **y**: \( y = 0.13585 \sinθ1 - 0.1197 \)
   - **z**: \( z = 0.425 \cosθ2 \)

3. **Inverse Kinematics Solution**:
   - From the z-coordinate: \( \cosθ2 = \frac{z_{des}}{0.425} \) → \( θ2 = \arccos\left(\frac{z_{des}}{0.425}\right) \)
   - Consider both \( θ2 \) and \( -θ2 \) to account for all possible solutions.
   - For each \( θ2 \), compute \( \sinθ2 \).
   - Use the x and y equations to solve for \( \cosθ1 \) and \( \sinθ1 \).
   - Ensure \( \sin^2θ1 + \cos^2θ1 ≈ 1 \) to validate the solution.
   - Compute \( θ1 \) using \( \arctan2(\sinθ1, \cosθ1) \).

Here is the Python function implementing this solution:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    x_des, y_des, z_des = p

    # Calculate theta2 candidates
    z_scale = z_des / 0.425
    if abs(z_scale) > 1.0:
        return (0.0, 0.0)  # Not reachable, but problem states all are reachable

    theta2_candidates = [math.acos(z_scale), -math.acos(z_scale)]

    solutions = []

    for theta2 in theta2_candidates:
        sin_theta2 = math.sin(theta2)
        cos_theta2 = math.cos(theta2)

        # Calculate cos and sin for theta1
        cos_theta1 = (x_des + 0.425 * sin_theta2) / 0.13585
        sin_theta1 = (y_des + 0.1197) / 0.13585

        # Check if the values are within valid range
        if abs(cos_theta1) > 1.0 or abs(sin_theta1) > 1.0:
            continue

        # Normalize to handle floating point errors
        norm = math.sqrt(sin_theta1**2 + cos_theta1**2)
        if norm > 1e-6:
            sin_theta1 /= norm
            cos_theta1 /= norm

        # Calculate theta1
        theta1 = math.atan2(sin_theta1, cos_theta1)

        # Verify the solution by forward kinematics
        x_fk = 0.13585 * math.cos(theta1) - 0.425 * math.sin(theta2)
        y_fk = 0.13585 * math.sin(theta1) - 0.1197
        z_fk = 0.425 * math.cos(theta2)

        if (math.isclose(x_fk, x_des, rel_tol=1e-9) and
            math.isclose(y_fk, y_des, rel_tol=1e-9) and
            math.isclose(z_fk, z_des, rel_tol=1e-9)):
            solutions.append((theta1, theta2))

    if solutions:
        return (solutions[0][0], solutions[0][1])
    else:
        return (0.0, 0.0)
```

This function computes the necessary joint angles θ1 and θ2 to reach the desired TCP position, considering both possible solutions for θ2 and validating each through forward kinematics.