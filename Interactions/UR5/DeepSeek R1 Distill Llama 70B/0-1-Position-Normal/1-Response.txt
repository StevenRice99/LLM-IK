To solve the inverse kinematicsproblem for the given 2-DOF serial manipulator, we need to determine the joint angles θ1 and θ2 that position the TCP at the desired coordinates p = (p_x, p_y, p_z). The solution involves the following steps:

### Approach
1. **Solve for θ2 using the z-coordinate:**
   - The z-coordinate of the TCP is given by z = 0.425 cosθ2. Therefore, θ2 can be found using the arccosine function.
   - Adjust θ2 to the correct quadrant based on the sign of p_z.

2. **Compute sinθ2:**
   - Use the value of θ2 obtained to find sinθ2.

3. **Set up the equations for θ1:**
   - Using the x and y coordinates, set up a system of linear equations to solve for cosθ1 and sinθ1.
   - The equations are derived from the forward kinematics of the robot, considering the rotations and translations.

4. **Solve for cosθ1 and sinθ1:**
   - Use matrix inversion to solve the system of equations for cosθ1 and sinθ1.
   - Ensure the solution is valid by checking that cos²θ1 + sin²θ1 = 1.

5. **Determine θ1:**
   - Use the atan2 function to find θ1 from cosθ1 and sinθ1.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    p_x, p_y, p_z = p

    # Solve for θ2
    if abs(p_z) > 0.425:
        raise ValueError("Target z-coordinate out of reach")

    θ2 = math.acos(p_z / 0.425)
    if p_z < 0:
        θ2 = -θ2

    sinθ2 = math.sin(θ2)

    A = 0.425 * sinθ2
    B = -0.01615

    Δ = A**2 + B**2

    cosθ1 = (A * p_x - B * p_y) / Δ
    sinθ1 = (B * p_x + A * p_y) / Δ

    θ1 = math.atan2(sinθ1, cosθ1)

    return (θ1, θ2)
```

### Explanation
1. **Solving for θ2:**
   - The z-coordinate equation z = 0.425 cosθ2 is used to find θ2. The arccos function provides the principal value, and we adjust θ2 to the correct quadrant based on the sign of p_z.

2. **Computing sinθ2:**
   - The sine of θ2 is computed to use in the subsequent equations for θ1.

3. **Setting up the system of equations:**
   - The x and y coordinates are expressed in terms of θ1 and θ2, leading to a system of linear equations. This system is solved using matrix inversion to find cosθ1 and sinθ1.

4. **Finding θ1:**
   - The atan2 function is used to determine θ1 from the computed values of sinθ1 and cosθ1, ensuring the correct quadrant is selected.

This approach efficiently solves the inverse kinematics problem, ensuring the TCP reaches the desired position by adjusting the joint angles θ1 and θ2 appropriately.