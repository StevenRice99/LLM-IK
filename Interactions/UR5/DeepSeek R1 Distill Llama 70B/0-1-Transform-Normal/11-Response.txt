To solve the inverse kinematicsproblem for the 2-DOF robot arm, we need to determine the joint angles \( q_1 \) and \( q_2 \) that position the TCP at the desired location \( p \) with the desired orientation \( r \). The solution involves the following steps:

### Approach
1. **Compute \( q_2 \) from the desired z-position \( p_z \):**
   - Using the z-component of the TCP position, compute \( q_2 \) using the arccosine function since the TCP's z-position is directly related to \( \cos(q_2) \).

2. **Handle the special case when \( \sin(q_2) = 0 \):**
   - When \( \sin(q_2) = 0 \), \( q_2 \) is either 0 or \( \pi \). For these cases, solve for \( q_1 \) using the simplified equations derived from the forward kinematics.

3. **Set up the system of equations for \( q_1 \):**
   - Using the desired x and y positions, set up a system of linear equations to solve for \( \cos(q_1) \) and \( \sin(q_1) \).

4. **Solve for \( q_1 \):**
   - Use Cramer's rule to solve the system of equations for \( \cos(q_1) \) and \( \sin(q_1) \), then compute \( q_1 \) using the arctangent function.

### Solution Code
```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    import math

    # Define the link lengths and offsets
    L1 = 0.13585  # Length of the first link
    L2 = 0.1197   # Length of the second link
    L3 = 0.425    # Offset of the TCP along the z-axis

    px, py, pz = p

    # Compute q2 from the z-position
    q2 = math.acos(pz / L3)
    s2 = math.sin(q2)

    if s2 == 0:
        # Handle the case when q2 is 0 or Ï€
        if pz == L3:
            q2 = 0.0
        else:
            q2 = math.pi
        # Solve for q1 using the x and y positions
        if py == 0 and px == 0:
            q1 = 0.0
        else:
            # Use the desired orientation to compute q1
            q1 = r[2] - q2
    else:
        # Set up the system of equations
        A = 0.425 * s2
        B = -0.01615
        C = 0.01615
        D = 0.425 * s2

        det = A * D - B * C

        if det == 0:
            # Handle division by zero
            q1 = 0.0
        else:
            cos_q1 = (D * px - B * py) / det
            sin_q1 = (A * py - C * px) / det

            # Compute q1 using atan2 to get the correct quadrant
            q1 = math.atan2(sin_q1, cos_q1)

    return (q1, q2)
```

### Explanation
- **Computing \( q_2 \):** The z-component of the TCP position is directly related to \( \cos(q_2) \), allowing us to compute \( q_2 \) using the arccosine function.
- **Special Case Handling:** When \( \sin(q_2) = 0 \), the robot is fully extended or fully retracted, simplifying the equations for \( q_1 \).
- **System of Equations:** Using the desired x and y positions, we set up a system of linear equations to solve for \( \cos(q_1) \) and \( \sin(q_1) \).
- **Solving for \( q_1 \):** Using Cramer's rule, we solve the system of equations and then compute \( q_1 \) using the arctangent function to ensure the correct quadrant.

This approach efficiently solves the inverse kinematics problem, ensuring the TCP reaches the desired position and orientation.