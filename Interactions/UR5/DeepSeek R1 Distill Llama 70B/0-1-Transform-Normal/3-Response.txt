To resolve the "math domainerror" in the inverse kinematics function, we need to ensure that the arguments passed to the `math.acos` function are within the valid range of [-1, 1]. This error occurs when the calculated value of `cosθ1` or `cosθ2` falls outside this range, which can happen due to numerical inaccuracies or when the target position is at the edge of the robot's reachable workspace.

### Approach
1. **Clamp Values:** Before passing `cosθ1` and `cosθ2` to `math.acos`, clamp their values to ensure they lie within the range [-1, 1]. This prevents the domain error and handles cases where minor calculation errors push the values slightly out of bounds.

2. **Apply to Both Joints:** Apply clamping to both `cosθ1` and `cosθ2` to ensure robustness against such errors for both joint calculations.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    x, y, z = p
    
    # Solve for θ2 using z, with clamping to avoid domain errors
    cosθ2 = z / 0.425
    cosθ2 = max(min(cosθ2, 1.0), -1.0)  # Clamp between -1 and 1
    θ2 = math.acos(cosθ2)
    
    # Solve for θ1 using y, with clamping
    cosθ1 = (y + 0.1197) / 0.13585
    cosθ1 = max(min(cosθ1, 1.0), -1.0)  # Clamp between -1 and 1
    θ1 = math.acos(cosθ1)
    
    # Since the problem states all targets are reachable, we assume x matches
    return (θ1, θ2)
```

### Explanation
- **Clamping Values:** By clamping `cosθ1` and `cosθ2` to the range [-1, 1], we ensure that the `math.acos` function receives valid inputs, preventing domain errors.
- **Robustness:** This approach makes the function more robust against numerical inaccuracies and edge cases where the calculated cosine values might slightly exceed the valid range due to floating-point precision issues.
- **Assumption on Reachability:** The problem states that all targets are reachable, so clamping is a safe and effective solution to handle minor calculation errors without affecting the overall functionality.

This modification ensures that the inverse kinematics function runs without errors for all valid input targets within the robot's reachable workspace.