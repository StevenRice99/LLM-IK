To solve the inverse kinematicsfor the 3-DOF robot arm, we follow these steps:

1. **Calculate theta1** using the y-component of the target position.
2. **Substitute theta1** into the equations to express the problem in terms of theta2 and theta3.
3. **Solve the system of equations** for theta2 and theta3 using algebraic manipulation and quadratic solutions.
4. **Return the joint angles** as the solution.

Here is the Python function implementing this solution:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    # Link lengths
    a = 0.425  # Length from joint 2 to joint 3
    b = 0.39225  # Length from joint 3 to TCP
    c = 0.13585  # Length from joint 1 to joint 2
    d = 0.1197   # Offset in y from joint 2 to joint 3

    # Step 1: Solve for theta1 using y-component
    cos_theta1 = -(y + d) / c
    theta1 = math.acos(cos_theta1)
    sin_theta1 = math.sin(theta1)

    # Step 2: Substitute theta1 into the equations
    A = x - c * sin_theta1

    # Step 3: Solve for theta2 and theta3
    # Using the derived equations
    M = a
    N = b
    C = (A**2 + z**2 + M**2 - N**2) / (2 * M)

    # Solve the quadratic equation for cos(theta2)
    u = (2 * z * C + math.sqrt((2 * z * C)**2 - 4 * (M**2 + z**2 - C**2) * (M**2 + z**2))) / (2 * (M**2 + z**2 - C**2))
    theta2 = math.acos(u)
    
    # Solve for theta3 using equation (1)
    sin_theta3 = (A - M * math.sin(theta2)) / N
    theta3 = math.asin(sin_theta3)

    return (theta1, theta2, theta3)
```

This function calculates the necessary joint angles to reach the desired position by systematically solving the inverse kinematics equations.