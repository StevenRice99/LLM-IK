To solve the inverse kinematicsproblem for the 3-DOF serial manipulator, we follow these steps:

1. **Calculate \( q_1 \)**:
   \[
   q_1 = \arctan\left(\frac{y}{x}\right)
   \]
   This determines the angle for the first joint based on the target x and y positions.

2. **Calculate \( \cos q_2 \)**:
   \[
   \cos q_2 = \frac{0.13585 - \sqrt{x^2 + y^2}}{0.1197}
   \]
   This gives the cosine of the angle for the second joint.

3. **Calculate \( \sin q_2 \)**:
   \[
   \sin q_2 = \sqrt{1 - \cos^2 q_2}
   \]
   Using the Pythagorean identity to find the sine of the second joint angle.

4. **Calculate \( q_3 \)**:
   \[
   q_3 = \arcsin\left(\frac{z - 0.13585 \cdot \sin q_2 - 0.425 \cdot \cos q_2}{0.39225 \cdot \sin q_2}\right)
   \]
   This determines the angle for the third joint based on the target z-position and the previously calculated angles.

By following these steps, we can compute the joint angles \( q_1, q_2, q_3 \) needed to position the TCP at the desired target position.

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Computes the joint angles needed to reach the given position p.
    
    Args:
        p: A tuple (x, y, z) representing the target position.
        
    Returns:
        A tuple (q1, q2, q3) of joint angles in radians.
    """
    x, y, z = p  # Unpack the target position
    
    # Calculate q1 using arctangent of y/x
    q1 = math.atan2(y, x)
    
    # Calculate the magnitude of the position in the x-y plane
    mag_xy = math.sqrt(x ** 2 + y ** 2)
    
    # Calculate cos(q2)
    cos_q2 = (0.13585 - mag_xy) / 0.1197
    
    # Ensure cos_q2 is within valid range [-1, 1]
    cos_q2 = max(min(cos_q2, 1.0), -1.0)
    
    # Calculate q2
    q2 = math.acos(cos_q2)
    
    # Calculate sin(q2)
    sin_q2 = math.sqrt(1 - cos_q2 ** 2)
    
    # Calculate q3 using the z-position equation
    numerator = z - 0.13585 * sin_q2 - 0.425 * cos_q2
    denominator = 0.39225 * sin_q2
    q3 = math.asin(numerator / denominator)
    
    return (q1, q2, q3)
```