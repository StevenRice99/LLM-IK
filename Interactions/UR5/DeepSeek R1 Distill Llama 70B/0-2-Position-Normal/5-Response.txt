To solve the inverse kinematicsproblem for the given 3-DOF serial manipulator, we can break down the problem into manageable steps. The robot's structure and the forward kinematics equations help us derive the necessary joint angles to reach a desired TCP position.

### Approach
1. **Understand the Robot Structure**: The robot has three revolute joints with known link lengths and offsets. The TCP's position is determined by the joint angles.
2. **Derive Forward Kinematics Equations**: Express the TCP's position in terms of the joint angles using homogeneous transformation matrices or simplified trigonometric equations.
3. **Set Up Inverse Kinematics Equations**: Using the derived forward kinematics, set up equations to solve for the joint angles given a desired TCP position.
4. **Solve the System of Equations**: Use trigonometric identities and algebraic manipulation to solve for the joint angles.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Computes the joint angles needed to reach the given position p.
    
    Args:
        p: A tuple (x, y, z) representing the target position.
        
    Returns:
        A tuple (q1, q2, q3) of joint angles in radians.
    """
    A = 0.13585  # Length of link 1
    B = -0.1197  # Length of link 2
    p_x, p_y, _ = p  # z is fixed, so we ignore it
    
    # Calculate the magnitude squared of the target position in the x-y plane
    mag_sq = p_x ** 2 + p_y ** 2
    
    # Compute cos(q2) using the derived formula
    numerator = mag_sq - (A ** 2 + B ** 2)
    denominator = 2 * A * B
    cos_q2 = numerator / denominator
    
    # Ensure cos_q2 is within valid range [-1, 1]
    cos_q2 = max(min(cos_q2, 1.0), -1.0)
    
    q2 = math.acos(cos_q2)
    
    # Calculate q1 using the arctangent method
    target_angle = math.atan2(p_y, p_x)
    angle_offset = math.atan2(B, A)
    q1 = target_angle - angle_offset
    
    # Set q3 to zero as per the problem's constraints
    q3 = 0.0
    
    return (q1, q2, q3)
```

### Explanation
1. **Problem Setup**: The function `inverse_kinematics` takes a target position `p` and returns the joint angles `(q1, q2, q3)` needed to reach that position.
2. **Constants**: The lengths of the links `A` and `B` are defined based on the robot's structure.
3. **Magnitude Calculation**: The squared magnitude of the target position in the x-y plane is computed to simplify the equations.
4. **Cosine of q2**: Using the derived formula, `cos_q2` is calculated to determine the angle `q2`.
5. **Arctangent for q1**: The angle `q1` is found using the arctangent of the target position, adjusted by an offset based on the link lengths.
6. **q3**: Since the TCP's z-position is fixed, `q3` is set to zero.

This approach efficiently solves the inverse kinematics problem using analytical methods, ensuring the TCP reaches the desired position in the x-y plane while maintaining the fixed z-position.