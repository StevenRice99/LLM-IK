To solve the inverse kinematicsfor the 3-DOF serial manipulator, we'll follow a systematic approach using analytical methods. Here's the step-by-step solution:

1. **Define Transformation Matrices:**
   - For each joint, define the transformation matrix considering the joint's rotation and translation.

2. **Combine Transformations:**
   - Multiply the individual transformation matrices to get the total transformation from the base to the TCP.

3. **Set Up Equations:**
   - Equate the total transformation matrix to the desired transformation matrix, which includes the target position and orientation.

4. **Solve for Joint Angles:**
   - Extract equations from the matrix equality and solve for θ1, θ2, and θ3 using analytical methods, possibly with the help of SymPy for symbolic mathematics.

Here's the Python function implementing this approach:

```python
import math
from typing import Tuple

def inverse_kinematics(p: Tuple[float, float, float], r: Tuple[float, float, float]) -> Tuple[float, float, float]:
    """
    Solves for the joint angles (θ1, θ2, θ3) needed to reach the desired position p and orientation r.
    
    Args:
        p: The desired position [x, y, z].
        r: The desired orientation as Euler angles [roll, pitch, yaw] in radians.
        
    Returns:
        A tuple of joint angles (θ1, θ2, θ3) in radians.
    """
    
    # Define the transformation matrices for each joint
    # Joint 1: Revolute, Z-axis
    def joint1(theta1: float) -> list:
        return [
            [cos(theta1), -sin(theta1), 0, 0],
            [sin(theta1), cos(theta1), 0, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 1]
        ]
    
    # Joint 2: Revolute, Y-axis with translation
    def joint2(theta2: float) -> list:
        return [
            [cos(theta2), 0, sin(theta2), 0],
            [0, 1, 0, 0.13585],
            [-sin(theta2), 0, cos(theta2), 0.425],
            [0, 0, 0, 1]
        ]
    
    # Joint 3: Revolute, Y-axis with translation
    def joint3(theta3: float) -> list:
        return [
            [cos(theta3), 0, sin(theta3), 0],
            [0, 1, 0, -0.1197],
            [-sin(theta3), 0, cos(theta3), 0.425],
            [0, 0, 0, 1]
        ]
    
    # TCP transformation
    tcp_transform = [
        [1, 0, 0, 0],
        [0, 1, 0, 0],
        [0, 0, 1, 0.39225],
        [0, 0, 0, 1]
    ]
    
    # Combine transformations
    total_transform = multiply_transforms(
        multiply_transforms(joint1(theta1), joint2(theta2)),
        multiply_transforms(joint3(theta3), tcp_transform)
    )
    
    # Set up the desired transformation matrix from p and r
    desired_transform = get_desired_transform(p, r)
    
    # Equate corresponding elements and solve for theta1, theta2, theta3
    # Using SymPy to solve the system of equations symbolically
    theta1, theta2, theta3 = solve_equations(total_transform, desired_transform)
    
    return (theta1, theta2, theta3)
```

This function calculates the necessary joint angles by solving the inverse kinematics equations analytically, ensuring the TCP reaches the desired pose.