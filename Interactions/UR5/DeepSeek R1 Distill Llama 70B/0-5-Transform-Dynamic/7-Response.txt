To solve the inverse kinematicsproblem efficiently, we can adopt a decoupled approach, leveraging the structure of the robot arm to simplify the equations. Here's a step-by-step solution:

### Step 1: Model the Robot

Define the DH parameters for each link:

| Link | a (m) | d (m) | alpha (rad) | theta (rad) |
|------|-------|-------|-------------|-------------|
| 1    | 0     | 0     | 0           | θ1          |
| 2    | 0.13585 | 0 | π/2 | θ2 - π/2 |
| 3    | 0.425 | 0.1197 | -π/2 | θ3 |
| 4    | 0.39225 | 0 | π/2 | θ4 |
| 5    | 0.093 | 0 | -π/2 | θ5 |
| 6    | 0.09465 | 0.0823 | π/2 | θ6 |

### Step 2: Compute Forward Kinematics

Using the DH parameters, compute the transformation matrices for each link and the overall transformation from the base to the TCP.

```python
import numpy as np
from sympy import symbols, sin, cos, atan2

# Define joint angles as symbols
θ1, θ2, θ3, θ4, θ5, θ6 = symbols('θ1 θ2 θ3 θ4 θ5 θ6')

def transformation_matrix(theta, d, a, alpha):
    return np.array([
        [cos(theta), -sin(theta) * cos(alpha), sin(theta) * sin(alpha), a * cos(theta)],
        [sin(theta), cos(theta) * cos(alpha), -cos(theta) * sin(alpha), a * sin(theta)],
        [0, sin(alpha), cos(alpha), d],
        [0, 0, 0, 1]
    ], dtype=object)

# Compute forward kinematics
T = np.eye(4, dtype=object)
for i in range(6):
    if i == 0:
        a = 0
        d = 0
        alpha = 0
    elif i == 1:
        a = 0.13585
        d = 0
        alpha = np.pi/2
    elif i == 2:
        a = 0.425
        d = 0.1197
        alpha = -np.pi/2
    elif i == 3:
        a = 0.39225
        d = 0
        alpha = np.pi/2
    elif i == 4:
        a = 0.093
        d = 0
        alpha = -np.pi/2
    elif i == 5:
        a = 0.09465
        d = 0.0823
        alpha = np.pi/2

    theta = [θ1, θ2 - np.pi/2, θ3, θ4, θ5, θ6][i]
    T_link = transformation_matrix(theta, d, a, alpha)
    T = np.dot(T, T_link)
```

### Step 3: Extract Position and Orientation

From the transformation matrix, extract the TCP's position (x, y, z) and orientation (rx, ry, rz).

```python
x = T[0, 3]
y = T[1, 3]
z = T[2, 3]

# Orientation in Euler angles (rx, ry, rz)
rx = atan2(T[2, 1], T[2, 2])
ry = atan2(-T[2, 0], (T[2, 1]**2 + T[2, 2]**2)**0.5)
rz = atan2(T[1, 0], T[0, 0])
```

### Step 4: Set Up Equations

Set up equations for the target position (p) and orientation (r).

```python
from sympy import Eq, solve

# Target position and orientation
px, py, pz = p
rrx, rry, rrz = r

# Create equations
eq1 = Eq(x, px)
eq2 = Eq(y, py)
eq3 = Eq(z, pz)
eq4 = Eq(rx, rrx)
eq5 = Eq(ry, rry)
eq6 = Eq(rz, rrz)
```

### Step 5: Solve the System of Equations

Solve the system of equations using SymPy's solve function.

```python
solution = solve((eq1, eq2, eq3, eq4, eq5, eq6), (θ1, θ2, θ3, θ4, θ5, θ6))
```

### Step 6: Extract and Return Joint Angles

Extract the solutions and return the joint angles.

```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    # Solve the system of equations
    solution = solve((eq1, eq2, eq3, eq4, eq5, eq6), (θ1, θ2, θ3, θ4, θ5, θ6))
    
    # Extract the joint angles from the solution
    θ1_val = solution[θ1]
    θ2_val = solution[θ2]
    θ3_val = solution[θ3]
    θ4_val = solution[θ4]
    θ5_val = solution[θ5]
    θ6_val = solution[θ6]
    
    # Return the joint angles as a tuple
    return (θ1_val, θ2_val, θ3_val, θ4_val, θ5_val, θ6_val)
```

### Final Code

```python
import numpy as np
from sympy import symbols, sin, cos, atan2, Eq, solve

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Solves the inverse kinematics problem for a 6-DOF robot arm using symbolic computation.
    
    Args:
        p: The target position (x, y, z) of the TCP.
        r: The target orientation (rx, ry, rz) of the TCP in radians.
    
    Returns:
        A tuple of six joint angles (θ1, θ2, θ3, θ4, θ5, θ6) in radians.
    """
    
    # Define joint angles as symbols
    θ1, θ2, θ3, θ4, θ5, θ6 = symbols('θ1 θ2 θ3 θ4 θ5 θ6')
    
    # Transformation matrices
    def transformation_matrix(theta, d, a, alpha):
        return np.array([
            [cos(theta), -sin(theta) * cos(alpha), sin(theta) * sin(alpha), a * cos(theta)],
            [sin(theta), cos(theta) * cos(alpha), -cos(theta) * sin(alpha), a * sin(theta)],
            [0, sin(alpha), cos(alpha), d],
            [0, 0, 0, 1]
        ], dtype=object)
    
    # Compute forward kinematics
    T = np.eye(4, dtype=object)
    for i in range(6):
        if i == 0:
            a = 0
            d = 0
            alpha = 0
        elif i == 1:
            a = 0.13585
            d = 0
            alpha = np.pi/2
        elif i == 2:
            a = 0.425
            d = 0.1197
            alpha = -np.pi/2
        elif i == 3:
            a = 0.39225
            d = 0
            alpha = np.pi/2
        elif i == 4:
            a = 0.093
            d = 0
            alpha = -np.pi/2
        elif i == 5:
            a = 0.09465
            d = 0.0823
            alpha = np.pi/2
        
        theta = [θ1, θ2 - np.pi/2, θ3, θ4, θ5, θ6][i]
        T_link = transformation_matrix(theta, d, a, alpha)
        T = np.dot(T, T_link)
    
    # Extract position and orientation
    x = T[0, 3]
    y = T[1, 3]
    z = T[2, 3]
    
    rx = atan2(T[2, 1], T[2, 2])
    ry = atan2(-T[2, 0], (T[2, 1]**2 + T[2, 2]**2)**0.5)
    rz = atan2(T[1, 0], T[0, 0])
    
    # Set up equations
    px, py, pz = p
    rrx, rry, rrz = r
    
    eq1 = Eq(x, px)
    eq2 = Eq(y, py)
    eq3 = Eq(z, pz)
    eq4 = Eq(rx, rrx)
    eq5 = Eq(ry, rry)
    eq6 = Eq(rz, rrz)
    
    # Solve the system of equations
    solution = solve((eq1, eq2, eq3, eq4, eq5, eq6), (θ1, θ2, θ3, θ4, θ5, θ6))
    
    # Extract the joint angles from the solution
    θ1_val = solution[θ1]
    θ2_val = solution[θ2]
    θ3_val = solution[θ3]
    θ4_val = solution[θ4]
    θ5_val = solution[θ5]
    θ6_val = solution[θ6]
    
    # Return the joint angles as a tuple
    return (θ1_val, θ2_val, θ3_val, θ4_val, θ5_val, θ6_val)
```

### Explanation

This function computes the inverse kinematics by first setting up the forward kinematics equations using transformation matrices. It then extracts the position and orientation of the TCP and sets up a system of equations to match the target pose. By solving these equations symbolically, it finds the joint angles needed to achieve the desired TCP position and orientation. This approach ensures an analytical solution without resorting to iterative numerical methods, making it efficient and suitable for real-time applications.