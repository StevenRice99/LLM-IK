To solve the inverse kinematicsproblem for the given 1-DOF manipulator, we need to determine the joint angle θ that positions the TCP at the desired coordinates. The TCP moves in a circular path in the X-Z plane, and its position is determined by the joint's rotation around the Y-axis.

### Approach
1. **Understanding the Movement**: The TCP is offset from the joint by a fixed distance, moving in a circular path with radius equal to the distance from the joint to the TCP. This distance is calculated using the Pythagorean theorem.
2. **Rotation Transformation**: The joint rotates around the Y-axis, affecting the X and Z coordinates of the TCP while keeping the Y coordinate constant.
3. **Inverse Kinematics Formula**: Using the arctangent function with two arguments (atan2) to compute the joint angle θ based on the target's X and Z coordinates. This handles the correct quadrant for θ.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    # Calculate the joint angle using arctangent of x and z
    theta = math.atan2(x, z)
    return theta
```

This function calculates the required joint angle θ using the atan2 function, ensuring the correct quadrant is considered based on the target's X and Z coordinates.