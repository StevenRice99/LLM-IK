To correct the inverse kinematics solution, we need to properly account for the direction of rotation and the relationship between the TCP's position and the joint angle θ.

### Approach
1. **Understand the Kinematics**: The manipulator has a single revolute joint rotating around the Y-axis. The TCP's position relative to the joint is [0, -0.1197, 0.425].
2. **Rotation Matrix**: Using the rotation matrix for rotation around the Y-axis, we derive the global position of the TCP as functions of θ.
3. **Set Up Equations**: Equate the derived TCP position to the desired position [x, y, z] and solve for θ.
4. **Solve for θ**: Use the arctangent function to find θ based on the x and z components of the TCP's position, ensuring the correct sign is used.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    # Calculate theta using the correct signs for x and z
    theta = math.atan2(x, z)
    return theta
```

### Explanation
- **Rotation Matrix**: The TCP's position after rotation by θ is derived using the rotation matrix around the Y-axis, resulting in expressions for x, y, and z in terms of θ.
- **Equating Positions**: By setting the derived x and z equal to the target position's x and z, we form equations involving sine and cosine of θ.
- **Arctangent Solution**: Using the arctangent function (atan2) with the correct signs for x and z ensures that the angle θ is calculated accurately, considering the direction of rotation.

This revised approach should correctly compute the joint angle θ to reach the desired TCP position.