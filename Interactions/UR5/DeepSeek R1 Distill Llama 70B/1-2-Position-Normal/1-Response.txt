To solve the inverse kinematicsproblem for the 2-DOF serial manipulator, we need to determine the joint angles theta1 and theta2 that position the TCP at the desired coordinates p = (px, py, pz). 

### Approach
1. **Calculate the Length of the First Link (L1):** Compute the distance between the first and second joints using the given positions.
2. **Solve for theta1:** Using the z-coordinate of the desired position, compute theta1 using the arccosine function.
3. **Compute sin(theta1):** Determine the sine of theta1 to use in the equation for theta2.
4. **Solve for theta2:** Use the arctangent function with the computed values from the x and y components of the desired position.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the links to for reaching position "p".
    """
    # Calculate the length of the first link
    L1 = math.sqrt(0**2 + (-0.1197)**2 + 0.425**2)
    
    # Extract the desired position components
    px, py, pz = p
    
    # Calculate theta1 using the z-coordinate
    cos_theta1 = (pz - 0.425) / L1
    theta1 = math.acos(cos_theta1)
    
    # Calculate sin(theta1)
    sin_theta1 = math.sqrt(1 - cos_theta1 ** 2)
    
    # Calculate the components for theta2
    A = (py + 0.1197) / 0.39225
    B = (L1 * sin_theta1 - px) / 0.39225
    
    # Calculate theta2 using arctangent of B/A
    theta2 = math.atan2(B, A)
    
    return (theta1, theta2)
```

### Explanation
1. **Calculate L1:** The length of the first link is determined using the distance formula between the first and second joints.
2. **Compute theta1:** Using the z-coordinate of the desired position, we find theta1 by solving the cosine equation derived from the vertical component of the first link.
3. **Determine sin(theta1):** The sine of theta1 is calculated to use in the subsequent equations for theta2.
4. **Solve for theta2:** Using the x and y components of the desired position, we set up equations to solve for theta2 using the arctangent function, ensuring the correct quadrant is considered.

This approach efficiently solves the inverse kinematics problem by breaking it down into manageable steps, ensuring the TCP reaches the desired position accurately.