To solve the inverse kinematicsproblem for the 2-DOF robot, we need to determine the joint angles θ1 and θ2 that position the TCP at the desired coordinates p = [x, y, z]. Given the structure of the robot, the y-coordinate is fixed at -0.1197, so we only need to solve for x and z.

### Approach
1. **Understand the Robot Structure**: The robot has two revolute joints, both rotating around the Y-axis. The TCP's position is determined by the sum of the transformations from each joint.
2. **Forward Kinematics Insight**: The TCP's position in the world frame is derived from the rotations of the two joints. The x and z coordinates depend on θ1 and θ2.
3. **Inverse Kinematics Solution**: Given the target position p, solve for θ1 using the x component. Then, solve for θ2 using the z component and the previously found θ1.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    
    # Calculate theta1 using the x component
    theta1 = math.asin(-x / 0.1197)
    
    # Calculate theta2 using the z component and theta1
    cos_theta2 = (z - 0.425 * math.cos(theta1)) / 0.39225
    theta2 = math.acos(cos_theta2)
    
    return (theta1, theta2)
```

### Explanation
1. **Extract Coordinates**: The target position p is split into x, y, and z components.
2. **Calculate θ1**: Using the x component, θ1 is determined by solving the equation x = -0.1197 * sin(θ1).
3. **Calculate θ2**: Using the z component and the previously found θ1, θ2 is determined by solving the equation z = 0.425 * cos(θ1) + 0.39225 * cos(θ2).

This approach efficiently solves for the necessary joint angles to reach the desired TCP position, considering the robot's structural constraints.