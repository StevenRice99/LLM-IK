To solve the inverse kinematicsproblem for the 2-DOF robotic arm, we follow these steps:

### Step-by-Step Explanation

1. **Understand the Problem:**
   - We need to determine the joint angles θ1 and θ2 that position the TCP at a desired location (x_d, y_d, z_d).
   - The robot has two revolute joints rotating around the Y-axis, and the TCP's Y-coordinate is fixed at -0.1197.

2. **Forward Kinematics Equations:**
   - The position of the TCP relative to the base is given by:
     - \( x = L1 \sin\theta1 + L2 \sin(\theta1 + \theta2) \)
     - \( z = L1 \cos\theta1 - L2 \cos(\theta1 + \theta2) \)
   - Where:
     - \( L1 = 0.425 \) (length of the first link)
     - \( L2 = 0.39225 \) (length of the second link)

3. **Derive the Inverse Kinematics:**
   - Given \( x_d \) and \( z_d \), set up the equations:
     - \( x_d = L1 \sin\theta1 + L2 \sin(\theta1 + \theta2) \)
     - \( z_d = L1 \cos\theta1 - L2 \cos(\theta1 + \theta2) \)
   - Introduce \( \alpha = \theta1 + \theta2 \) to simplify:
     - \( x_d = L1 \sin\theta1 + L2 \sin\alpha \)
     - \( z_d = L1 \cos\theta1 - L2 \cos\alpha \)
   - Square and add both equations to eliminate \( \alpha \):
     - \( x_d^2 + z_d^2 = L1^2 + L2^2 + 2L1L2 \cos(\theta1 - \alpha) \)
   - Solve for \( \cos(\theta1 - \alpha) \) and use trigonometric identities to find \( \theta1 \).

4. **Solve for θ1:**
   - Using the combined equation, express \( \theta1 \) in terms of \( x_d \) and \( z_d \).
   - Apply the arctangent function to find the base angle and then use the arcsin method to account for multiple solutions.

5. **Calculate θ2:**
   - Once \( \theta1 \) is determined, substitute back into the original equations to solve for \( \theta2 \).

6. **Implement the Solution in Code:**
   - Use numerical methods to handle the nonlinear equations, ensuring the solutions are within the joint limits.

### Solution Code

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    x_d, y_d, z_d = p
    L1 = 0.425
    L2 = 0.39225

    # Calculate C
    C = (L1**2 + L2**2 - x_d**2 - z_d**2) / (2 * L1)

    # Compute A and B for the equation A * sin(theta1) + B * cos(theta1) = C
    A = x_d
    B = z_d

    # Compute the discriminant
    discriminant = A**2 + B**2 - C**2

    if discriminant < 0:
        raise ValueError("No real solution exists for the given target position.")

    sqrt_discriminant = np.sqrt(discriminant)

    # Calculate the two possible solutions for cos(theta1)
    cos_theta1_1 = (B * C + A * sqrt_discriminant) / (A**2 + B**2)
    cos_theta1_2 = (B * C - A * sqrt_discriminant) / (A**2 + B**2)

    # Determine the valid cos(theta1) values within the range [-1, 1]
    valid_cos_theta1 = []
    for cos_val in [cos_theta1_1, cos_theta1_2]:
        if -1 <= cos_val <= 1:
            valid_cos_theta1.append(cos_val)

    if not valid_cos_theta1:
        raise ValueError("No valid solution for cos(theta1) within [-1, 1].")

    # Choose the first valid solution for cos(theta1)
    cos_theta1 = valid_cos_theta1[0]

    # Calculate theta1
    theta1 = np.arccos(cos_theta1)

    # Determine sin(theta1)
    sin_theta1 = np.sqrt(1 - cos_theta1**2)

    # Substitute theta1 back to find alpha
    sin_alpha = (x_d - L1 * sin_theta1) / L2
    cos_alpha = (L1 * cos_theta1 - z_d) / L2

    # Calculate alpha using arctan2 to get the correct quadrant
    alpha = np.arctan2(sin_alpha, cos_alpha)

    # Calculate theta2
    theta2 = alpha - theta1

    return (theta1, theta2)
```

### Explanation of the Code

- **Calculate C:** This term combines the desired position and link lengths to form a constant used in solving for θ1.
- **Compute A and B:** These represent the x and z components of the target position, respectively.
- **Compute the Discriminant:** This determines the nature of the solutions for the quadratic equation in cos(θ1).
- **Calculate Possible cos(θ1) Values:** Two potential solutions are derived from the quadratic equation.
- **Determine Valid cos(θ1):** Ensure the solutions are within the valid range for cosine values.
- **Calculate theta1:** Using the valid cos(θ1) value, compute theta1 using arccos.
- **Determine sin(theta1):** Calculate sin(theta1) using the Pythagorean identity.
- **Substitute theta1 Back:** Use theta1 to find sin(alpha) and cos(alpha), then compute alpha using arctan2.
- **Calculate theta2:** Finally, determine theta2 by subtracting theta1 from alpha.

This approach ensures that the joint angles are calculated accurately, considering the geometric constraints and multiple possible solutions, leading to the correct positioning of the TCP.