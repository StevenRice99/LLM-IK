To solve the inverse kinematicsproblem for the 3-DOF serial manipulator, we need to determine the joint angles (q1, q2, q3) that position the TCP at the desired coordinates (x, y, z). Given that all joints rotate around the Y-axis, the problem can be simplified by focusing on the Y and Z components.

### Approach
1. **Model the Kinematics**: Each joint contributes to the TCP position through rotations and translations. The rotations are around the Y-axis, simplifying the transformation matrices.
2. **Existing Solutions**: Use the provided functions to solve for the first two joints, then adjust for the third joint.
3. **Geometric Adjustment**: After determining the first two joints, compute the necessary adjustment from the third joint to reach the exact target position.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    
    # Since the robot can't move in X, x must be zero
    assert x == 0, "x must be zero"
    
    # Using existing function 2's logic to get theta1 and theta2
    # Existing function 2:
    # theta1 = math.atan2(x, z)
    # adjusted_x = x - 0.39225 * math.sin(theta1)
    # adjusted_z = z - 0.39225 * math.cos(theta1)
    # theta_total = math.atan2(adjusted_x, adjusted_z)
    # theta2 = theta_total - theta1
    
    theta1 = math.atan2(x, z)
    adjusted_x = x - 0.39225 * math.sin(theta1)
    adjusted_z = z - 0.39225 * math.cos(theta1)
    theta_total = math.atan2(adjusted_x, adjusted_z)
    theta2 = theta_total - theta1
    
    # Compute y0 and z0 based on theta1 and theta2
    alpha = theta1 + theta2
    y0 = -0.1197 + 0.39225 * math.cos(alpha)
    z0 = 0.425 + 0.39225 * math.sin(alpha)
    
    # Compute delta_y and delta_z
    delta_y = y - y0
    delta_z = z - z0
    
    # Compute phi
    phi = math.atan2(delta_z, delta_y)
    
    # Compute theta3
    theta3 = phi - alpha
    
    return (theta1, theta2, theta3)
```

### Explanation
1. **Initial Setup**: The function starts by extracting the target position (x, y, z). Since the robot cannot move in the X direction, x is set to zero.
2. **Solve for First Two Joints**: Using the logic from the existing function, the first two joint angles (theta1 and theta2) are determined to position the TCP without considering the third joint.
3. **Compute Intermediate Position**: Calculate the intermediate TCP position (y0, z0) based on the first two joints.
4. **Adjustment with Third Joint**: Determine the necessary adjustment (delta_y, delta_z) needed to reach the target from the intermediate position. Compute the angle phi to achieve this adjustment.
5. **Final Joint Angle**: Calculate the third joint angle (theta3) as the difference between phi and the sum of the first two angles.

This approach efficiently combines the solutions for the first two joints and adjusts for the third, ensuring the TCP reaches the desired position.