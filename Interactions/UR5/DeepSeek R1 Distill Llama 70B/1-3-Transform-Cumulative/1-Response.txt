To solve the inverse kinematicsproblem for the 3-DOF serial manipulator, we'll follow a step-by-step approach to determine the joint angles θ1, θ2, and θ3 that achieve the desired TCP position and orientation.

### Approach
1. **Calculate θ1**: Use the existing function to determine θ1 based on the x and z coordinates of the target position. This is done using `atan2(x, z)` to find the angle in the x-z plane.

2. **Adjust Target for θ2**: With θ1 known, adjust the target position to account for the rotation caused by θ1. This involves rotating the target coordinates back by θ1 to find the effective target for the next joint.

3. **Calculate θ2**: Using the adjusted target, determine θ2 by considering the movement in the y-axis, which is affected by the second joint's rotation.

4. **Calculate θ3**: Finally, with θ1 and θ2 known, determine θ3 based on the remaining necessary rotation to achieve the desired orientation.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    
    # Calculate theta1 using the existing approach
    theta1 = math.atan2(p[0], p[2])
    
    # Adjust the target position for theta2
    # Project the target onto the plane affected by theta2
    adjusted_x = p[0] * math.cos(theta1) + p[2] * math.sin(theta1)
    adjusted_z = -p[0] * math.sin(theta1) + p[2] * math.cos(theta1)
    
    # Calculate theta2 based on the adjusted position
    theta2 = math.atan2(adjusted_x, adjusted_z)
    
    # Calculate theta3 based on the orientation requirements
    # This is a simplified approach and may need adjustment based on specific orientation needs
    theta3 = r[2]  # Assuming the third joint directly contributes to the orientation around the z-axis
    
    return (theta1, theta2, theta3)
```

### Explanation
- **θ1 Calculation**: The first joint's angle is determined by the position's projection onto the x-z plane, using `atan2` to find the angle from the z-axis to the target position.
- **Target Adjustment for θ2**: After determining θ1, the target position is rotated back by θ1 to find the effective position that the second joint needs to reach.
- **θ2 Calculation**: Using the adjusted position, θ2 is found by projecting onto the plane affected by the second joint.
- **θ3 Calculation**: The third joint's angle is set to match the desired orientation around the z-axis, assuming a direct contribution from the third joint.

This approach provides a basic analytical solution to the inverse kinematics problem, leveraging geometric insights and existing solutions for sub-chains to extend to the full 3-DOF manipulator.