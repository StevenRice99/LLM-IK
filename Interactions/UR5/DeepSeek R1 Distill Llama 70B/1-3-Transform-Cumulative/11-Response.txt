To solve the inverse kinematicsproblem for the 3-DOF serial manipulator accurately, we need to consider both the position and orientation of the TCP and correctly calculate each joint's contribution. Here's a structured approach:

### Approach
1. **Calculate θ1**: Determine θ1 using the x and z coordinates of the target position with `atan2(x, z)` to find the angle in the x-z plane.
2. **Adjust the target for θ2**: Rotate the target position back by θ1 to find the effective target for the second joint, considering the robot's link structure.
3. **Calculate θ2**: Use the adjusted target to find θ2, accounting for the movement in the plane affected by the second joint.
4. **Calculate θ3**: Determine θ3 based on the remaining necessary rotation to achieve the desired orientation, considering the contributions from all three joints.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    
    # Calculate theta1 using atan2 on x and z coordinates
    theta1 = math.atan2(p[0], p[2])
    
    # Adjust the target position for theta1
    # Apply rotation matrix to adjust x and z coordinates
    adjusted_x = p[0] * math.cos(theta1) + p[2] * math.sin(theta1)
    adjusted_z = -p[0] * math.sin(theta1) + p[2] * math.cos(theta1)
    
    # Calculate theta2 using the adjusted x and z
    theta2 = math.atan2(adjusted_x, adjusted_z)
    
    # Calculate theta3 based on the desired orientation around Y-axis
    # Here, we assume that theta3 directly contributes to the orientation
    theta3 = r[1]  # Assuming r[1] is the rotation around Y
    
    return (theta1, theta2, theta3)
```

### Explanation
- **θ1 Calculation**: The first joint's angle is determined by the position's projection onto the x-z plane, using `atan2` to find the angle from the z-axis to the target position.
- **Target Adjustment for θ2**: After determining θ1, the target position is rotated back by θ1 to find the effective position that the second joint needs to reach.
- **θ2 Calculation**: Using the adjusted position, θ2 is found by projecting onto the plane affected by the second joint.
- **θ3 Calculation**: The third joint's angle is set to match the desired orientation around the Y-axis, assuming a direct contribution from the third joint.

This approach provides a basic analytical solution to the inverse kinematics problem, leveraging geometric insights and existing solutions for sub-chains to extend to the full 3-DOF manipulator.