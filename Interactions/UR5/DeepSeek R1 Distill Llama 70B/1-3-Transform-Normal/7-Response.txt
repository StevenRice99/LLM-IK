To solve the inverse kinematicsproblem for the given 3-DOF robot arm, we need to determine the joint angles θ1, θ2, and θ3 that will move the TCP to the desired position and orientation. 

### Approach
1. **Model the Robot**: Represent each joint's transformation using rotation matrices and translation vectors. Since all joints are revolute and rotate about the Y-axis, the rotation matrices will be about the Y-axis.
2. **Express Position and Orientation**: Derive the equations for the TCP's position and orientation in terms of the joint angles. The position equations are derived from the cumulative transformations, while the orientation is determined by the sum of the joint angles.
3. **Solve for Joint Angles**: Set up the equations based on the target position and orientation, and solve for the joint angles. Use trigonometric identities and algebraic manipulation to isolate the joint angles.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    
    # Extract target position
    px, py, pz = p
    
    # The z position is fixed at 0.81725, so we can ignore pz
    # and assume it's correct as per the problem statement.
    
    # Calculate the angle phi which is the sum of the joint angles
    # We have two equations:
    # -0.1197 * sin(phi) = px
    # -0.1197 * cos(phi) + 0.093 = py
    
    # Solve for phi
    sin_phi = -px / 0.1197
    cos_phi = (py - 0.093) / 0.1197
    
    # Ensure sin^2 + cos^2 = 1 to avoid invalid values
    magnitude = math.sqrt(sin_phi**2 + cos_phi**2)
    if magnitude > 1:
        sin_phi /= magnitude
        cos_phi /= magnitude
    
    phi = math.atan2(sin_phi, cos_phi)
    
    # For a 3-DOF arm with all joints rotating about Y, we can arbitrarily set
    # θ1 + θ2 + θ3 = phi. Since we have infinite solutions, we can set θ1 = phi
    # and θ2 = θ3 = 0 for simplicity, but in a real scenario, we might need
    # to consider other constraints or use more sophisticated methods.
    
    theta1 = phi
    theta2 = 0.0
    theta3 = 0.0
    
    return (theta1, theta2, theta3)
```

### Explanation
1. **Position Equations**: The TCP's position is derived from the cumulative transformations of the joints. The x and y positions are functions of the sum of the joint angles, while the z position is fixed.
2. **Orientation Equation**: The orientation is determined by the sum of the joint angles, as all rotations are about the Y-axis.
3. **Solving for Joint Angles**: Using trigonometric identities, we solve for the sum of the joint angles (φ) and then arbitrarily set θ1 = φ, with θ2 and θ3 set to zero for simplicity. This provides a basic solution, though more complex scenarios may require additional constraints or methods.