To solve the inverse kinematicsproblem for the 5-DOF serial manipulator, we'll follow a structured approach using Denavit-Hartenberg parameters and transformation matrices. Here's the step-by-step solution:

### Step 1: Define DH Parameters
Define the DH parameters for each link based on the provided details.

| Link | α (rad) | a (m) | d (m) | θ (rad) |
|------|---------|-------|-------|---------|
| 1    | 0       | 0     | 0     | θ₁      |
| 2    | 0       | -0.1197 | 0.425 | θ₂      |
| 3    | 0       | 0     | 0.39225 | θ₃      |
| 4    | π/2     | 0.093 | 0     | θ₄      |
| 5    | -π/2    | 0     | 0.09465 | θ₅      |

### Step 2: Construct Transformation Matrices
Construct the transformation matrices from the base to each link using the DH parameters.

\[ T_i = \begin{bmatrix} \cos\theta_i & -\sin\theta_i \cos\alpha_i & \sin\theta_i \sin\alpha_i & a_i \cos\theta_i \\ \sin\theta_i & \cos\theta_i \cos\alpha_i & -\cos\theta_i \sin\alpha_i & a_i \sin\theta_i \\ 0 & \sin\alpha_i & \cos\alpha_i & d_i \\ 0 & 0 & 0 & 1 \end{bmatrix} \]

### Step 3: Compute TCP Transformation
Multiply the transformation matrices from the base to the TCP.

\[ T_{TCP} = T_1 T_2 T_3 T_4 T_5 \]

### Step 4: Set Up Equations
Equate the computed TCP pose to the desired pose.

\[ T_{TCP} = T_{desired} \]

This results in a system of equations relating the joint angles to the desired position and orientation.

### Step 5: Solve the System of Equations
Use SymPy to solve the system of equations for the joint angles θ₁ to θ₅.

### Step 6: Implement the Solution
Translate the derived equations into the provided Python function.

```python
import math
from typing import Tuple
import sympy as sp

def inverse_kinematics(p: Tuple[float, float, float], r: Tuple[float, float, float]) -> Tuple[float, float, float, float, float]:
    """
    Solves for the joint angles to reach the desired position and orientation using inverse kinematics.
    
    Args:
        p: The desired position (x, y, z).
        r: The desired orientation as Euler angles (rx, ry, rz).
    
    Returns:
        A tuple of five joint angles in radians.
    """
    
    # Define the joint angles as symbols
    theta1, theta2, theta3, theta4, theta5 = sp.symbols('theta1 theta2 theta3 theta4 theta5')
    
    # Define the DH parameters
    dh_params = [
        {'alpha': 0, 'a': 0, 'd': 0, 'theta': theta1},
        {'alpha': 0, 'a': -0.1197, 'd': 0.425, 'theta': theta2},
        {'alpha': 0, 'a': 0, 'd': 0.39225, 'theta': theta3},
        {'alpha': sp.pi/2, 'a': 0.093, 'd': 0, 'theta': theta4},
        {'alpha': -sp.pi/2, 'a': 0, 'd': 0.09465, 'theta': theta5}
    ]
    
    # Function to compute transformation matrix
    def transformation_matrix(params):
        alpha = params['alpha']
        a = params['a']
        d = params['d']
        theta = params['theta']
        
        return sp.Matrix([
            [sp.cos(theta), -sp.sin(theta)*sp.cos(alpha), sp.sin(theta)*sp.sin(alpha), a*sp.cos(theta)],
            [sp.sin(theta), sp.cos(theta)*sp.cos(alpha), -sp.cos(theta)*sp.sin(alpha), a*sp.sin(theta)],
            [0, sp.sin(alpha), sp.cos(alpha), d],
            [0, 0, 0, 1]
        ])
    
    # Compute transformation matrices for each link
    T1 = transformation_matrix(dh_params[0])
    T2 = transformation_matrix(dh_params[1])
    T3 = transformation_matrix(dh_params[2])
    T4 = transformation_matrix(dh_params[3])
    T5 = transformation_matrix(dh_params[4])
    
    # Compute transformation from base to TCP
    T_tcp = T1 * T2 * T3 * T4 * T5
    
    # Extract position and orientation from T_tcp
    x_tcp = T_tcp[0, 3]
    y_tcp = T_tcp[1, 3]
    z_tcp = T_tcp[2, 3]
    
    # Extract orientation as Euler angles
    rx = sp.atan2(T_tcp[1, 2], T_tcp[0, 2])
    ry = sp.atan2(T_tcp[2, 1], T_tcp[2, 2])
    rz = sp.atan2(T_tcp[1, 0], T_tcp[0, 0])
    
    # Set up equations
    equations = [
        sp.Eq(x_tcp, p[0]),
        sp.Eq(y_tcp, p[1]),
        sp.Eq(z_tcp, p[2]),
        sp.Eq(rx, r[0]),
        sp.Eq(ry, r[1]),
        sp.Eq(rz, r[2])
    ]
    
    # Solve the system of equations
    solution = sp.solve(equations, (theta1, theta2, theta3, theta4, theta5))
    
    # Return the joint angles as floats
    return tuple(float(angle) for angle in solution.values())
```

### Explanation
1. **DH Parameters**: The DH parameters are defined based on the robot's link dimensions and joint orientations.
2. **Transformation Matrices**: Each joint's transformation matrix is constructed using the DH parameters and joint angles.
3. **TCP Transformation**: The transformation from the base to the TCP is computed by multiplying the individual link transformations.
4. **Equations Setup**: The computed TCP position and orientation are set equal to the desired values, forming a system of equations.
5. **Solving the System**: SymPy is used to solve the system of nonlinear equations for the joint angles.
6. **Implementation**: The solution is implemented in a function that returns the joint angles needed to reach the desired TCP pose.

This approach ensures that the robot's TCP reaches the desired position and orientation accurately by solving the inverse kinematics problem analytically.