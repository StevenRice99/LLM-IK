To solve the inverse kinematicsproblem for the given 1 degree-of-freedom serial manipulator, we need to determine the joint angle θ that positions the TCP at the desired coordinates. The manipulator moves in the X-Z plane, and the TCP's position is determined by the joint angle θ around the Y-axis.

### Approach
1. **Understand the Kinematics**: The TCP moves in a circular path around the Y-axis. The position of the TCP in the global frame is given by:
   - \( x = 0.39225 \sin(\theta) \)
   - \( z = 0.39225 \cos(\theta) \)
   
2. **Formulate the Inverse Kinematics**: Given a target position \( p = [x, y, z] \), we need to find θ such that the TCP reaches this position. Since the manipulator operates in the X-Z plane, the Y-coordinate of the target is ignored (assumed to be 0).

3. **Solve for θ**: Using the equations above, we can express θ in terms of x and z:
   - \( \sin(\theta) = \frac{x}{0.39225} \)
   - \( \cos(\theta) = \frac{z}{0.39225} \)
   - \( \theta = \arctan2(x, z) \)

4. **Implementation**: Use the `math.atan2` function to compute θ, ensuring the correct quadrant is considered.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    # Calculate the joint angle using arctangent of x and z
    theta = math.atan2(x, z)
    return theta
```

This function computes the necessary joint angle θ to position the TCP at the desired coordinates, considering all possible quadrants using the `atan2` function.