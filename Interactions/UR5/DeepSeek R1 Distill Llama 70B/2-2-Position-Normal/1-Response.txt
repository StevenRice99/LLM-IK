To solve the inverse kinematicsproblem for the given 1 degree-of-freedom serial manipulator, we need to determine the joint angle θ that positions the TCP at the target position p = [x, y, z]. The TCP moves in the x-z plane, and its position is determined by the rotation of the revolute joint around the Y-axis.

### Approach
1. **Understanding the Kinematics**: The TCP's position in the global frame is determined by the rotation of the joint. The rotation matrix around the Y-axis is used to transform the local TCP position to the global frame.
2. **Geometric Relationship**: The TCP's local position is [0, 0, 0.39225]. When rotated by θ around the Y-axis, the global position becomes:
   - x = 0.39225 * sinθ
   - z = 0.39225 * cosθ
3. **Solving for θ**: Given the target position (x, z), we can solve for θ using the arctangent function. Specifically, θ is found using `atan2(x, z)` to handle all quadrants correctly.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    # Calculate the joint angle using arctangent of x and z
    theta = math.atan2(x, z)
    return theta
```

### Explanation
- **Function Definition**: The function `inverse_kinematics` takes a tuple `p` representing the target position [x, y, z].
- **Extract Coordinates**: The x, y, and z components of the target position are extracted.
- **Calculate Joint Angle**: Using `math.atan2(x, z)`, the function computes the joint angle θ that positions the TCP at the target. This handles all possible quadrants correctly, ensuring the correct angle is returned based on the signs of x and z.

This approach efficiently solves the inverse kinematics problem by leveraging geometric relationships and the properties of the arctangent function.