To solve the inverse kinematicsproblem for the 2-DOF robot arm, we need to determine the joint angles that will position the TCP at the desired location and orientation. 

### Approach
1. **Position Calculation**: 
   - The first joint angle `q1` is calculated using the arctangent of the x and z coordinates of the desired position. This is derived from the forward kinematics equations, considering the length of the first link.
   
2. **Orientation Calculation**: 
   - The second joint angle `q2` is determined by subtracting `q1` from the desired yaw angle `rz` provided in the orientation. This works under the assumption that the TCP's orientation is achieved by the sum of the rotations from both joints around the Y-axis.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [roll, pitch, yaw].
    :return: A tuple of the values to set the joints to for reaching position "p" and orientation "r".
    """
    x, y, z = p
    rx, ry, rz = r

    # Calculate q1 from the position using arctangent of x/z
    q1 = math.atan2(x, z)
    
    # Calculate q2 from the desired yaw angle
    q2 = rz - q1

    return (q1, q2)
```

### Explanation
- **Position Calculation**: The x and z coordinates of the desired position are used to compute the first joint angle `q1` using `math.atan2(x, z)`, which gives the angle whose tangent is x/z.
- **Orientation Calculation**: The desired yaw angle `rz` from the orientation tuple is used to compute the second joint angle `q2` by subtracting `q1` from `rz`, ensuring the TCP achieves the correct orientation.

This approach efficiently solves the inverse kinematics problem by breaking it down into manageable steps, leveraging basic trigonometric functions and the properties of revolute joints.