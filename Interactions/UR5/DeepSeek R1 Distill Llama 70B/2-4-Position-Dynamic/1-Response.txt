To solve the inverse kinematicsfor the given 3-joint serial manipulator, we can derive the joint angles θ1, θ2, and θ3 based on the desired TCP position. The solution involves determining the angles such that the TCP reaches the specified coordinates.

### Approach
1. **Understanding the Robot Structure**: The robot has three revolute joints. The first two joints rotate about the Y-axis, and the third rotates about the Z-axis. The TCP's position is determined by the cumulative transformations of these joints.

2. **Forward Kinematics**: Each joint's transformation includes a rotation followed by a translation. The total transformation matrix is the product of these individual transformations.

3. **Inverse Kinematics**: Given the desired TCP position, we derive the joint angles by solving the system of equations obtained from the forward kinematics. The z-coordinate is fixed, so we focus on the x and y components.

4. **Solving for Joint Angles**:
   - Compute the angle φ using the arctangent of the x and y components.
   - Set θ1 to zero for simplicity.
   - Determine θ2 as the sum of θ1 and φ.
   - Set θ3 to zero since it doesn't affect the position.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    # Calculate the angle phi from x and y
    phi = math.atan2(x, y)
    # Set theta1 to 0, theta2 to phi, and theta3 to 0
    theta1 = 0.0
    theta2 = phi
    theta3 = 0.0
    return (theta1, theta2, theta3)
```

### Explanation
- **phi Calculation**: The angle φ is calculated using `atan2(x, y)` to determine the direction from the origin to the point (x, y).
- **Joint Angles**: By setting θ1 to 0, we simplify the solution, making θ2 equal to φ. θ3 is set to 0 as it doesn't affect the TCP's position.
- **Assumptions**: The solution assumes the target position is reachable and lies on the circle defined by the robot's workspace in the XY plane at the fixed z-coordinate.

This approach efficiently solves the inverse kinematics problem by leveraging geometric relationships and simplifying the joint angle calculations.