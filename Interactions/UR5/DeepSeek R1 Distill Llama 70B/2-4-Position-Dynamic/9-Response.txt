To solve the inverse kinematicsproblem for the 3-DOF serial manipulator while handling singular Jacobian cases, we'll modify the approach to use the Moore-Penrose pseudoinverse with Tikhonov regularization. This method allows us to find a stable solution even when the Jacobian is singular.

### Step-by-Step Explanation:

1. **Define the Forward Kinematics Equations:**
   Express the TCP's position (x, y, z) in terms of the joint angles θ1, θ2, and θ3.

2. **Set Up the System of Equations:**
   Equate the desired position (px, py, pz) to the forward kinematics equations.

3. **Compute the Jacobian Matrix:**
   The Jacobian relates the joint rates to the TCP's velocity. It's a 3x3 matrix derived from the partial derivatives of the forward kinematics equations with respect to each joint angle.

4. **Singular Value Decomposition (SVD):**
   Decompose the Jacobian matrix to compute its singular values, which helps in constructing the pseudoinverse.

5. **Moore-Penrose Pseudoinverse with Tikhonov Regularization:**
   Use the SVD to form the pseudoinverse of the Jacobian, adding a small damping factor (Tikhonov regularization) to avoid division by zero and improve numerical stability.

6. **Update Joint Angles:**
   Use the pseudoinverse to update the joint angles iteratively, reducing the error between the current and desired TCP positions.

7. **Check for Convergence:**
   Continue iterating until the error is below a specified tolerance or until the maximum number of iterations is reached.

8. **Ensure Joint Limits:**
   After finding the solution, check that the joint angles are within their specified limits to ensure physical feasibility.

### Solution Code:

```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" using the Newton-Raphson method with pseudoinverse.
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    L2 = 0.093  # Length from Joint 2 to Joint 3
    L3 = 0.09465  # Length from Joint 3 to TCP

    # Initial guess for joint angles
    theta1 = 0.0
    theta2 = 0.0
    theta3 = 0.0

    # Tolerance for convergence
    tolerance = 1e-6
    max_iterations = 1000
    damping_factor = 0.01  # Tikhonov regularization parameter

    for _ in range(max_iterations):
        # Compute forward kinematics
        fk_x = L2 * math.sin(theta2) * math.cos(theta3) + L3 * math.sin(theta3) * math.cos(theta1)
        fk_y = L2 * math.cos(theta2) * math.cos(theta3) + L3 * math.sin(theta3) * math.sin(theta1)
        fk_z = L2 * math.sin(theta2) * math.sin(theta3) + L3 * math.cos(theta3)

        # Compute the error
        error_x = fk_x - x
        error_y = fk_y - y
        error_z = fk_z - z

        # Compute the Jacobian matrix
        J = np.array([
            [-L3 * math.sin(theta3) * math.sin(theta1),
             -L2 * math.cos(theta2) * math.cos(theta3) - L3 * math.sin(theta3) * math.cos(theta1),
             L2 * math.sin(theta2) * math.sin(theta3) + L3 * math.sin(theta3) * math.sin(theta1)],
            [L3 * math.sin(theta3) * math.cos(theta1),
             -L2 * math.sin(theta2) * math.cos(theta3) - L3 * math.cos(theta3) * math.sin(theta1),
             L2 * math.cos(theta2) * math.sin(theta3) + L3 * math.cos(theta3) * math.cos(theta1)],
            [0,
             L2 * math.cos(theta2) * math.sin(theta3) - L3 * math.sin(theta3),
             -L2 * math.sin(theta2) * math.cos(theta3) + L3 * math.sin(theta3)]
        ])

        # Compute the singular values of J
        U, S, Vh = np.linalg.svd(J)

        # Compute the pseudoinverse with Tikhonov regularization
        S_inv = np.diag([1/(s if s > damping_factor else damping_factor) for s in S])
        J_pinv = Vh.T @ S_inv @ U.T

        # Update the joint angles
        delta_theta = np.dot(J_pinv, np.array([error_x, error_y, error_z]))

        theta1 += delta_theta[0]
        theta2 += delta_theta[1]
        theta3 += delta_theta[2]

        # Check for convergence
        if all(abs(err) < tolerance for err in [error_x, error_y, error_z]):
            break

    # Ensure joint angles are within their limits
    # Assuming joint limits are known, add checks here if necessary

    return (theta1, theta2, theta3)
```

### Explanation:

1. **Forward Kinematics Equations:**
   These equations define how the joint angles θ1, θ2, and θ3 affect the TCP's position (x, y, z).

2. **Jacobian Matrix:**
   The Jacobian matrix is computed to understand the relationship between joint rates and the TCP's velocity. It's essential for updating the joint angles iteratively.

3. **Singular Value Decomposition (SVD):**
   SVD is used to decompose the Jacobian matrix into its singular values and singular vectors, which are then used to compute the pseudoinverse.

4. **Moore-Penrose Pseudoinverse with Tikhonov Regularization:**
   This method provides a stable way to invert the Jacobian matrix, even when it's singular or ill-conditioned. The damping factor (Tikhonov regularization) helps prevent division by zero and enhances numerical stability.

5. **Iterative Update:**
   The joint angles are updated iteratively using the pseudoinverse of the Jacobian matrix, reducing the error between the current and desired TCP positions.

6. **Convergence Check:**
   The loop continues until the error is below a specified tolerance, ensuring the solution is sufficiently accurate.

7. **Joint Limits:**
   After finding the solution, it's crucial to verify that the joint angles are within their physical limits to ensure the solution is feasible.

By implementing these changes, the algorithm can handle singular Jacobian cases gracefully and find a valid solution for the joint angles, ensuring the TCP reaches the desired position accurately and efficiently.