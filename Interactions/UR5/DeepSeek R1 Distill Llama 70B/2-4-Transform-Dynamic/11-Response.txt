To solve the inverse kinematicsproblem for the 3-DOF serial manipulator, we'll follow these steps:

1. **Model Each Joint's Transformation**: Represent each joint's rotation and translation using transformation matrices.
2. **Combine Transformations**: Multiply the individual transformation matrices to get the total transformation from the base to the TCP.
3. **Express TCP Position and Orientation**: Derive expressions for the TCP's position and orientation in terms of the joint angles θ1, θ2, and θ3.
4. **Set Up Equations**: Equate the derived position and orientation to the target values.
5. **Solve for Joint Angles**: Use SymPy to solve the system of equations for θ1, θ2, and θ3.

Here's the implementation:

```python
import math
import numpy as np
from sympy import symbols, Eq, solve, cos, sin

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Solves for the joint angles θ1, θ2, θ3 given the target position p and orientation r.
    :param p: Target position [x, y, z]
    :param r: Target orientation [roll, pitch, yaw] in radians
    :return: Joint angles (θ1, θ2, θ3) in radians
    """
    
    # Declare joint angles as symbols
    θ1, θ2, θ3 = symbols('θ1 θ2 θ3')
    
    # Define rotation matrices using numpy for correct matrix multiplication
    def rotation_matrix_y(theta):
        return np.array([
            [cos(theta), -sin(theta), 0],
            [sin(theta), cos(theta), 0],
            [0, 0, 1]
        ], dtype=float)
    
    def rotation_matrix_z(theta):
        return np.array([
            [cos(theta), -sin(theta), 0],
            [sin(theta), cos(theta), 0],
            [0, 0, 1]
        ], dtype=float)
    
    def translation_matrix(x, y, z):
        return np.array([
            [1, 0, 0, x],
            [0, 1, 0, y],
            [0, 0, 1, z],
            [0, 0, 0, 1]
        ], dtype=float)
    
    # Transformation from base to Joint 1 (rotation about Y-axis)
    T_base_to_joint1 = rotation_matrix_y(θ1)
    
    # Transformation from Joint 1 to Joint 2 (translation along Z)
    T_joint1_to_joint2 = np.dot(translation_matrix(0, 0, 0.39225), rotation_matrix_y(θ2))
    
    # Transformation from Joint 2 to Joint 3 (translation along Y)
    T_joint2_to_joint3 = np.dot(translation_matrix(0, 0.093, 0), rotation_matrix_y(θ2))
    
    # Transformation from Joint 3 to TCP (translation along Z)
    T_joint3_to_tcp = np.dot(translation_matrix(0, 0, 0.09465), rotation_matrix_z(θ3))
    
    # Total transformation from base to TCP
    T_total = np.dot(np.dot(np.dot(T_base_to_joint1, T_joint1_to_joint2), T_joint2_to_joint3), T_joint3_to_tcp)
    
    # Extract position and orientation from T_total
    x, y, z = T_total[:3, 3]
    rx, ry, rz = get_orientation(T_total)
    
    # Set up equations
    eq1 = Eq(x, p[0])
    eq2 = Eq(y, p[1])
    eq3 = Eq(z, p[2])
    eq4 = Eq(rx, r[0])
    eq5 = Eq(ry, r[1])
    eq6 = Eq(rz, r[2])
    
    # Solve the system of equations
    solution = solve((eq1, eq2, eq3, eq4, eq5, eq6), (θ1, θ2, θ3))
    
    return (solution[θ1], solution[θ2], solution[θ3])

def get_orientation(transformation_matrix):
    # Extract Euler angles (ZYX) from rotation matrix
    # Assuming the rotation matrix is ZYX
    sy = np.sqrt(transformation_matrix[0, 0]**2 + transformation_matrix[1, 0]**2)
    if sy < 1e-6:
        x = np.arctan2(transformation_matrix[1, 2], transformation_matrix[0, 2])
        y = np.arctan2(sy, transformation_matrix[2, 2])
        z = 0
    else:
        x = np.arctan2(transformation_matrix[2, 1], transformation_matrix[2, 2])
        y = np.arctan2(-transformation_matrix[2, 0], sy)
        z = np.arctan2(transformation_matrix[1, 0], transformation_matrix[0, 0])
    return (x, y, z)
```

**Explanation of Changes:**

1. **Matrix Multiplication**: I replaced the list-based matrix multiplication with NumPy arrays and used `np.dot()` for correct matrix multiplication. This resolves the `TypeError` encountered earlier.

2. **Rotation and Translation Matrices**: Redefined the rotation and translation matrices using NumPy arrays to ensure proper matrix operations.

3. **Euler Angle Extraction**: Updated the `get_orientation` function to use NumPy functions for trigonometric operations to maintain consistency with the rest of the code.

4. **System of Equations**: The equations are set up using SymPy's `Eq` to equate the derived position and orientation to the target values.

5. **Solving the System**: Used SymPy's `solve` function to find the joint angles that satisfy the system of equations.

This implementation should correctly compute the joint angles needed to reach the desired TCP position and orientation.