To solve the inverse kinematicsproblem for the 4-DOF serial manipulator, we need to determine the joint angles required to position the tool center point (TCP) at a specified location and orientation. Here's a step-by-step explanation of the solution:

### 1. Define the Joint Variables
We start by defining the joint angles as symbolic variables using SymPy:

```python
q1, q2, q3, q4 = symbols('q1 q2 q3 q4')
```

### 2. Define the Transformation Matrices
Using the Denavit-Hartenberg (DH) parameters, we define the transformation matrices for each joint. Each matrix represents the transformation from one link to the next, based on the joint angle and the axis of rotation.

```python
def rotation_matrix(angle, axis):
    if axis == 'X':
        return [
            [1, 0, 0],
            [0, cos(angle), -sin(angle)],
            [0, sin(angle), cos(angle)]
        ]
    elif axis == 'Y':
        return [
            [cos(angle), 0, sin(angle)],
            [0, 1, 0],
            [-sin(angle), 0, cos(angle)]
        ]
    elif axis == 'Z':
        return [
            [cos(angle), -sin(angle), 0],
            [sin(angle), cos(angle), 0],
            [0, 0, 1]
        ]
    else:
        raise ValueError("Invalid rotation axis")
```

### 3. Compute the Total Transformation
Multiply the individual transformation matrices to get the total transformation from the base to the TCP:

```python
T1 = rotation_matrix(q1, 'Y')
T2 = rotation_matrix(q2, 'Y')
T3 = rotation_matrix(q3, 'Z')
T4 = rotation_matrix(q4, 'Y')
T = T1 * T2 * T3 * T4
```

### 4. Extract Position and Orientation
From the total transformation matrix `T`, extract the position and orientation of the TCP:

- **Position**: The translation component of the transformation matrix.
- **Orientation**: Convert the rotation matrix part to Euler angles.

```python
x, y, z = T[0:3, 3]
rx, ry, rz = euler_from_rotation_matrix(T[0:3, 0:3])
```

### 5. Set Up the Equations
Equate the computed position and orientation to the target values:

```python
eqs = [
    Eq(x, p[0]),
    Eq(y, p[1]),
    Eq(z, p[2]),
    Eq(rx, r[0]),
    Eq(ry, r[1]),
    Eq(rz, r[2])
]
```

### 6. Solve the System of Equations
Use SymPy's `solve` function to find the joint angles that satisfy the equations:

```python
solution = solve(eqs, (q1, q2, q3, q4))
```

### 7. Return the Joint Angles
Extract the joint angles from the solution and return them as a tuple:

```python
return (solution[q1], solution[q2], solution[q3], solution[q4])
```

### Complete Code

```python
import math
from sympy import symbols, Eq, solve, cos, sin

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    
    # Define the joint variables
    q1, q2, q3, q4 = symbols('q1 q2 q3 q4')
    
    # Define the transformation matrices based on DH parameters
    # (simplified for illustration)
    T1 = rotation_matrix(q1, 'Y')
    T2 = rotation_matrix(q2, 'Y')
    T3 = rotation_matrix(q3, 'Z')
    T4 = rotation_matrix(q4, 'Y')
    
    # Compute the total transformation
    T = T1 * T2 * T3 * T4
    
    # Extract position and orientation from T
    x, y, z = T[0:3, 3]
    rx, ry, rz = euler_from_rotation_matrix(T[0:3, 0:3])
    
    # Set up the equations
    eqs = [
        Eq(x, p[0]),
        Eq(y, p[1]),
        Eq(z, p[2]),
        Eq(rx, r[0]),
        Eq(ry, r[1]),
        Eq(rz, r[2])
    ]
    
    # Solve the system of equations
    solution = solve(eqs, (q1, q2, q3, q4))
    
    # Return the joint angles as a tuple
    return (solution[q1], solution[q2], solution[q3], solution[q4])

def rotation_matrix(angle, axis):
    # Returns a rotation matrix for the given angle and axis
    if axis == 'X':
        return [
            [1, 0, 0],
            [0, cos(angle), -sin(angle)],
            [0, sin(angle), cos(angle)]
        ]
    elif axis == 'Y':
        return [
            [cos(angle), 0, sin(angle)],
            [0, 1, 0],
            [-sin(angle), 0, cos(angle)]
        ]
    elif axis == 'Z':
        return [
            [cos(angle), -sin(angle), 0],
            [sin(angle), cos(angle), 0],
            [0, 0, 1]
        ]
    else:
        raise ValueError("Invalid rotation axis")

def euler_from_rotation_matrix(R):
    # Converts a rotation matrix to Euler angles (ZYX convention)
    sy = (R[0, 0] ** 2 + R[1, 0] ** 2) ** 0.5
    singular = sy < 1e-6
    if not singular:
        x = atan2(R[2, 1], R[2, 2])
        y = atan2(R[1, 2], R[0, 2])
        z = atan2(R[2, 0], R[2, 1])
    else:
        x = atan2(-R[1, 2], R[1, 1])
        y = atan2(-R[2, 2], R[0, 2])
        z = 0
    return (x, y, z)
```

### Explanation
1. **Joint Variables**: The joint angles `q1`, `q2`, `q3`, and `q4` are defined as symbolic variables using SymPy.
2. **Transformation Matrices**: Each joint's transformation matrix is defined based on its rotation axis and angle. These matrices are multiplied to compute the total transformation from the base to the TCP.
3. **Position and Orientation Extraction**: The position is extracted from the translation part of the transformation matrix, and the orientation is derived using Euler angles from the rotation part.
4. **Equation Setup**: Equations are set up by equating the computed position and orientation to the target values.
5. **Solving the System**: SymPy's `solve` function is used to find the joint angles that satisfy the equations.
6. **Return Joint Angles**: The solution provides the joint angles required to reach the target pose.

This approach ensures that both the position and orientation of the TCP are accurately achieved by solving for all four joint angles simultaneously.