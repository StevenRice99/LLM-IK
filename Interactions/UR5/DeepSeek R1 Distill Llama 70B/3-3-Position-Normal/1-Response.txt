To solve the inverse kinematicsproblem for the given 1 degree-of-freedom serial manipulator, we need to determine the joint angle θ that positions the TCP at the target position p. The TCP's movement is constrained to the X-Z plane due to the revolute joint rotating around the Y-axis.

### Approach
1. **Understanding the Movement**: The TCP is positioned at [0, 0.093, 0] in its local frame. When the joint rotates by an angle θ around the Y-axis, the TCP's global position becomes (0.093 sinθ, 0.093, 0.093 cosθ).
2. **Formulating the Problem**: Given a target position p = [px, py, pz], we need to find θ such that:
   - 0.093 sinθ = px
   - 0.093 cosθ = pz
3. **Solving for θ**: Using the arctangent function, θ can be found as θ = arctan2(px, pz), which considers the correct quadrant based on the signs of px and pz.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    px, py, pz = p
    # Calculate the joint angle using arctangent of x and z components
    theta = math.atan2(px, pz)
    return theta
```

### Explanation
- **Extracting Components**: The target position p is split into its X, Y, and Z components.
- **Calculating θ**: Using `math.atan2(px, pz)`, we determine the joint angle θ in radians, ensuring the correct quadrant is selected based on the signs of px and pz.
- **Return θ**: The computed angle θ is returned, which is the value needed to set the joint to reach the target position.

This approach efficiently solves the inverse kinematics problem using basic trigonometric functions, ensuring accuracy and simplicity.