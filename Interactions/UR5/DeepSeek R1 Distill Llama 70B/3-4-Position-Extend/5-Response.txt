To solve the inverse kinematicsproblem for the 2-DOF serial manipulator, we follow these steps:

1. **Extract the Desired Position**: Obtain the desired TCP position (x, y, z).

2. **Calculate sinθ2 and cosθ2**: Using the y-component of the position and the link lengths, compute sinθ2 and cosθ2.

3. **Construct the Matrix M**: Form the matrix M using the known link lengths and sinθ2.

4. **Compute the Determinant and Inverse of M**: Calculate the determinant of M and its inverse to solve for cosθ1 and sinθ1.

5. **Solve for θ1**: Use the atan2 function to determine θ1 from cosθ1 and sinθ1.

6. **Return Joint Angles**: Output the computed joint angles θ1 and θ2.

Here is the Python code implementing this approach:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    A = 0.093  # Length of the first link
    B = 0.09465  # Length of the second link including TCP

    # Calculate sinθ2 and cosθ2 from the y-component
    cosθ2 = y / A
    sinθ2 = math.sqrt(1 - cosθ2 ** 2)

    # Construct matrix M
    M = [[-A * sinθ2, B],
         [B, A * sinθ2]]

    # Calculate determinant of M
    det_M = (-A * sinθ2) * (A * sinθ2) - B * B

    if det_M == 0:
        # Handle singular case, though problem states all targets are reachable
        raise ValueError("Matrix is singular; target position is not reachable.")

    # Compute inverse of M
    inv_det_M = 1.0 / det_M
    inv_M = [[inv_det_M * (A * sinθ2), -inv_det_M * B],
             [-inv_det_M * B, inv_det_M * (-A * sinθ2)]]

    # Solve for cosθ1 and sinθ1
    cosθ1 = inv_M[0][0] * x + inv_M[0][1] * z
    sinθ1 = inv_M[1][0] * x + inv_M[1][1] * z

    # Ensure cosθ1 and sinθ1 are within valid ranges
    cosθ1 = max(min(cosθ1, 1.0), -1.0)
    sinθ1 = max(min(sinθ1, 1.0), -1.0)

    # Calculate θ1 using atan2
    θ1 = math.atan2(sinθ1, cosθ1)

    # θ2 is obtained from the earlier calculation
    θ2 = math.acos(cosθ2)

    return (θ1, θ2)
```

### Explanation
1. **Extract Position**: The desired TCP position is split into x, y, and z components.

2. **Calculate Joint 2 Angles**: Using the y-component and the length of the first link, compute cosθ2 and sinθ2.

3. **Matrix Construction**: Construct the matrix M using the link lengths and sinθ2.

4. **Matrix Inversion**: Compute the determinant of M and its inverse to solve for cosθ1 and sinθ1.

5. **Solve for θ1**: Use the atan2 function to determine θ1 from the computed cosθ1 and sinθ1.

6. **Return Angles**: The function returns the joint angles θ1 and θ2 needed to position the TCP at the desired location.

This approach efficiently solves the inverse kinematics problem using analytical methods, ensuring the TCP reaches the desired position accurately.