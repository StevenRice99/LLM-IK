To solve the inverse kinematicsproblem for the given 2-DOF manipulator, we need to determine the joint angles θ1 and θ2 that position the TCP at the desired location p = [px, py, pz]. 

### Approach
1. **Understanding the Robot Structure**: 
   - The first joint (θ1) rotates around the Y-axis and affects the TCP's position in the X and Z directions.
   - The second joint (θ2) rotates around the Z-axis but does not affect the TCP's position since the TCP is aligned along the Z-axis of the second joint.

2. **Forward Kinematics**:
   - The TCP's position in the world frame is derived as:
     - x = 0.09465 * sin(θ1)
     - y = 0.093 (fixed)
     - z = 0.09465 * cos(θ1)

3. **Inverse Kinematics**:
   - From the desired position p, we solve for θ1 using the arctangent function considering the x and z components.
   - θ2 is set to 0 as it doesn't affect the TCP's position.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the links to for reaching position "p".
    """
    px, py, pz = p
    # Since the second joint does not affect the position, we set it to 0
    theta2 = 0.0
    # Calculate theta1 using the arctangent of x and z components
    theta1 = math.atan2(px, pz)
    return (theta1, theta2)
```

### Explanation
- **θ1 Calculation**: Using `atan2(px, pz)` ensures that θ1 is correctly determined based on the signs of px and pz, placing it in the correct quadrant.
- **θ2**: Set to 0 as it doesn't influence the TCP's position in this configuration.

This approach efficiently solves the inverse kinematics problem by focusing on the necessary joint movements to achieve the desired TCP position.