To solve the inverse kinematicsproblem for the 2-DOF serial manipulator, we need to determine the joint angles θ1 and θ2 that position the tool center point (TCP) at the desired position `p` and orientation `r`. The approach involves computing the rotation matrix from the given Euler angles and then solving for the joint angles using the rotation matrix elements.

### Approach
1. **Compute the Desired Rotation Matrix (R_desired):**
   - Convert the given Euler angles (r_x, r_y, r_z) into a rotation matrix using the XYZ convention. This involves computing the individual rotation matrices for each axis and multiplying them in the correct order.

2. **Extract Joint Angles from R_desired:**
   - From the rotation matrix, extract the necessary elements to compute θ1 and θ2.
   - θ2 is derived from the elements related to the second joint's rotation.
   - θ1 is derived from the elements related to the first joint's rotation.

3. **Verify Position Equations:**
   - Ensure that the computed joint angles satisfy the position equations, confirming that the TCP reaches the desired position.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Computes the joint angles needed to reach the desired position and orientation.
    
    Args:
        p: The desired position as a tuple (x, y, z).
        r: The desired orientation as a tuple of Euler angles (r_x, r_y, r_z) in radians.
    
    Returns:
        A tuple of joint angles (θ1, θ2) in radians.
    """
    # Extract Euler angles
    r_x, r_y, r_z = r
    
    # Compute individual rotation matrices
    R_x = np.array([
        [1, 0, 0],
        [0, np.cos(r_x), -np.sin(r_x)],
        [0, np.sin(r_x), np.cos(r_x)]
    ])
    
    R_y = np.array([
        [np.cos(r_y), 0, np.sin(r_y)],
        [0, 1, 0],
        [-np.sin(r_y), 0, np.cos(r_y)]
    ])
    
    R_z = np.array([
        [np.cos(r_z), -np.sin(r_z), 0],
        [np.sin(r_z), np.cos(r_z), 0],
        [0, 0, 1]
    ])
    
    # Compute the desired rotation matrix R_desired = R_z * R_y * R_x
    R_desired = np.dot(R_z, np.dot(R_y, R_x))
    
    # Calculate θ2 from the rotation matrix elements
    sinθ2 = -R_desired[0, 1]
    cosθ2 = R_desired[1, 1]
    θ2 = np.arctan2(sinθ2, cosθ2)
    
    # Calculate θ1 from the rotation matrix elements
    cosθ1 = R_desired[0, 0] / cosθ2
    sinθ1 = R_desired[0, 2] / cosθ2
    θ1 = np.arctan2(sinθ1, cosθ1)
    
    # Return the joint angles
    return (float(θ1), float(θ2))
```

### Explanation
1. **Rotation Matrix Calculation:**
   - The function begins by converting the given Euler angles into a rotation matrix `R_desired` using the XYZ convention. This matrix represents the desired orientation of the TCP.

2. **Extracting Joint Angles:**
   - The second joint angle θ2 is calculated using the elements of `R_desired` that correspond to the second joint's rotation. Specifically, θ2 is found using the arctangent of the ratio of the sine and cosine of θ2 extracted from the rotation matrix.
   - The first joint angle θ1 is then calculated using the remaining elements of `R_desired`, ensuring that the TCP's orientation matches the desired Euler angles.

3. **Returning Joint Angles:**
   - The computed joint angles θ1 and θ2 are returned as a tuple, which can be used to set the positions of the manipulator's joints to achieve the desired TCP pose.

This approach ensures that the manipulator's joints are adjusted to reach the specified position and orientation accurately.