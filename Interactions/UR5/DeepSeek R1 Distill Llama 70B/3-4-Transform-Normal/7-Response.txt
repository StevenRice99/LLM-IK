To solve the inverse kinematicsproblem for the 2-DOF serial manipulator, we need to determine the joint angles θ1 and θ2 that position the tool center point (TCP) at the desired position `p` and orientation `r`. The approach involves converting the Euler angles into a rotation matrix and then extracting the joint angles from this matrix.

### Approach
1. **Convert Euler Angles to Rotation Matrix:**
   - Use the given Euler angles (r_x, r_y, r_z) to compute the rotation matrices for each axis (R_x, R_y, R_z).
   - Multiply these matrices together in the XYZ order to obtain the overall rotation matrix R_desired.

2. **Extract Joint Angles from the Rotation Matrix:**
   - θ2 is calculated using the elements of R_desired that correspond to the Z-axis rotation.
   - θ1 is calculated using the elements of R_desired that correspond to the Y-axis rotation.

3. **Ensure Joint Angles are Within Limits:**
   - Verify that the computed joint angles θ1 and θ2 are within the specified limits of [-6.2831853, 6.2831853] radians.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Computes the joint angles needed to reach the desired position and orientation.
    
    Args:
        p: The desired position as a tuple (x, y, z).
        r: The desired orientation as a tuple of Euler angles (r_x, r_y, r_z) in radians.
    
    Returns:
        A tuple of joint angles (θ1, θ2) in radians.
    """
    # Extract Euler angles
    r_x, r_y, r_z = r
    
    # Compute individual rotation matrices
    R_x = np.array([
        [1, 0, 0],
        [0, np.cos(r_x), -np.sin(r_x)],
        [0, np.sin(r_x), np.cos(r_x)]
    ])
    
    R_y = np.array([
        [np.cos(r_y), 0, np.sin(r_y)],
        [0, 1, 0],
        [-np.sin(r_y), 0, np.cos(r_y)]
    ])
    
    R_z = np.array([
        [np.cos(r_z), -np.sin(r_z), 0],
        [np.sin(r_z), np.cos(r_z), 0],
        [0, 0, 1]
    ])
    
    # Compute the desired rotation matrix R_desired = R_z * R_y * R_x
    R_desired = np.dot(R_z, np.dot(R_y, R_x))
    
    # Calculate θ2 from the rotation matrix elements
    sinθ2 = -R_desired[0, 1]
    cosθ2 = R_desired[1, 1]
    θ2 = np.arctan2(sinθ2, cosθ2)
    
    # Calculate θ1 from the rotation matrix elements
    cosθ1 = R_desired[0, 0] / cosθ2
    sinθ1 = R_desired[0, 2] / cosθ2
    θ1 = np.arctan2(sinθ1, cosθ1)
    
    # Ensure θ1 and θ2 are within the joint limits
    θ1 = np.clip(θ1, -6.2831853, 6.2831853)
    θ2 = np.clip(θ2, -6.2831853, 6.2831853)
    
    # Return the joint angles
    return (float(θ1), float(θ2))
```

### Explanation
1. **Rotation Matrix Calculation:**
   - The function begins by converting the given Euler angles into a rotation matrix `R_desired` using the XYZ convention. This matrix represents the desired orientation of the TCP.

2. **Extracting Joint Angles:**
   - The second joint angle θ2 is calculated using the elements of `R_desired` that correspond to the Z-axis rotation. Specifically, θ2 is found using the arctangent of the ratio of the sine and cosine of θ2 extracted from the rotation matrix.
   - The first joint angle θ1 is then calculated using the remaining elements of `R_desired`, ensuring that the TCP's orientation matches the desired Euler angles.

3. **Clipping Joint Angles:**
   - After computing θ1 and θ2, the function ensures that these angles are within the specified joint limits of [-6.2831853, 6.2831853] radians. This is done using the `np.clip` function to clamp the values if necessary.

4. **Returning Joint Angles:**
   - The computed joint angles θ1 and θ2 are returned as a tuple, which can be used to set the positions of the manipulator's joints to achieve the desired TCP pose.

This approach ensures that the manipulator's joints are adjusted to reach the specified position and orientation accurately, taking into account the physical constraints of the joint limits.