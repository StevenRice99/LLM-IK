To solve the inverse kinematicsproblem for the 3-DOF serial manipulator, we can break down the problem into manageable steps, leveraging the existing solutions for sub-chains and extending them to the full chain.

### Approach
1. **Understand the Geometry**: Each joint contributes to the position of the TCP. The first joint (theta1) affects the X and Z coordinates, the second joint (theta2) affects the Y and Z coordinates, and the third joint (theta3) affects the X, Y, and Z coordinates.

2. **Use Existing Solutions**: Build upon the existing code snippets that solve for subsets of the joints. For example, use the solution for theta2 from the 2-DOF case and extend it to include theta3.

3. **Set Up Equations**: Express the TCP's position in terms of the joint angles using rotation matrices and the given link lengths and offsets.

4. **Solve Step by Step**: 
   - First, solve for theta2 using the difference between the Z and Y coordinates.
   - Next, solve for theta3 using the Y coordinate and the previously found theta2.
   - Finally, solve for theta1 using the X and Z coordinates, considering the contributions from theta2 and theta3.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    
    # Solve for theta2 using the difference between z and y
    cos_theta2 = (z - y) / 0.00165
    theta2 = math.acos(cos_theta2)
    
    # Solve for theta3 using y and theta2
    sin_theta3 = (y - 0.093 * math.cos(theta2)) / 0.0823
    theta3 = math.asin(sin_theta3)
    
    # Solve for theta1 using x and the contributions from theta2 and theta3
    theta1 = math.atan2(x, z)
    
    return (theta1, theta2, theta3)
```

### Explanation
1. **Theta2 Calculation**: By subtracting the Y coordinate from the Z coordinate, we isolate the effect of theta2. Using the small difference (0.00165), we find the cosine of theta2 and then compute theta2 using the arccosine function.

2. **Theta3 Calculation**: With theta2 known, we substitute back into the equation for the Y coordinate to solve for the sine of theta3, then use the arcsine function to find theta3.

3. **Theta1 Calculation**: Finally, using the X and Z coordinates, we compute theta1 as the arctangent of X over Z, which gives the necessary rotation around the Y-axis to align the TCP with the target position.

This approach systematically solves for each joint angle, building on the contributions of each joint to reach the desired TCP position.