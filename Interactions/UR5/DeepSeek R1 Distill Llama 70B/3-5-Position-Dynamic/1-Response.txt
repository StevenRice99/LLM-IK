To solve the inverse kinematicsfor the 3-DOF manipulator, we'll build upon the existing solutions for the first two joints and extend them to include the third joint. Here's how we can approach it:

1. **Solve for Joint 1 (θ1):** Use the method from Existing 1 to determine θ1 based on the desired position.
2. **Solve for Joints 2 and 3 (θ2, θ3):** Extend the solution from Existing 2 to include θ3, ensuring the TCP reaches the desired position.

Here's the implementation:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    
    # Solve for Joint 1 using Existing 1's method
    theta1 = math.atan2(x, z)
    
    # Adjust coordinates based on theta1
    adjusted_x = x * math.cos(theta1) + z * math.sin(theta1)
    adjusted_z = -x * math.sin(theta1) + z * math.cos(theta1)
    
    # Solve for Joints 2 and 3 using an extended version of Existing 2's method
    theta2 = math.acos(adjusted_x / math.sqrt(adjusted_x**2 + adjusted_z**2))
    theta3 = math.asin(y / math.sqrt(adjusted_x**2 + adjusted_z**2))
    
    return (theta1, theta2, theta3)
```

This function first solves for θ1, then adjusts the coordinates to solve for θ2 and θ3, ensuring the TCP reaches the desired position.