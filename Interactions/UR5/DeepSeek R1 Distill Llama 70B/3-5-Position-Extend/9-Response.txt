To solve the inverse kinematicsfor the 3-DOF serial manipulator, we'll derive the forward kinematics equations and then solve for the joint angles. Here's the step-by-step solution:

1. **Define the Transformation Matrices:**
   - Each joint's rotation can be represented as a rotation matrix around its axis.
   - The position of each link is found by multiplying these transformation matrices.

2. **Forward Kinematics Equations:**
   - The TCP position in the base frame is determined by the transformations through all three joints.
   - The equations will express the TCP's x, y, and z coordinates in terms of theta1, theta2, and theta3.

3. **Set Up the System of Equations:**
   - Equate the forward kinematics equations to the desired position (p).
   - This results in a system of three equations with three unknowns (theta1, theta2, theta3).

4. **Solve the System of Equations:**
   - Use algebraic manipulation and trigonometric identities to solve for the joint angles.
   - Consider the joint limits to ensure physically feasible solutions.

5. **Implement the Solution in Python:**
   - Translate the derived equations into code within the provided function.
   - Use SymPy if needed for solving the equations symbolically.

By following these steps, we can determine the joint angles required to reach the desired TCP position, completing the inverse kinematics solution.