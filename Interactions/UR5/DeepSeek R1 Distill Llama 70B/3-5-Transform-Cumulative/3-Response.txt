To solve the inverse kinematicsproblem for the 3-DOF serial manipulator, we need to determine the joint angles θ1, θ2, and θ3 that will move the TCP to the desired position and orientation. Here's a structured approach to achieve this:

### Step-by-Step Explanation:

1. **Define DH Parameters:**
   - **Joint 1 (Revolute, Y-axis):** 
     - Rotation: θ1 around Y-axis.
     - Translation: 0 in all axes.
   - **Joint 2 (Revolute, Z-axis):**
     - Rotation: θ2 around Z-axis.
     - Translation: 0.093 m along Y-axis.
   - **Joint 3 (Revolute, Y-axis):**
     - Rotation: θ3 around Y-axis.
     - Translation: 0.09465 m along Z-axis.
   - **TCP:**
     - Translation: 0.0823 m along Y-axis.

2. **Transformation Matrices:**
   - Each joint's transformation matrix is defined using the DH parameters. The transformation from the base to the TCP is the product of these individual matrices.

3. **Express Position and Orientation:**
   - The position of the TCP is derived from the translation components of the combined transformation matrix.
   - The orientation is derived from the rotation components of the combined transformation matrix.

4. **Set Up Equations:**
   - Equate the derived position to the desired position (p).
   - Equate the derived orientation to the desired orientation (r).

5. **Solve for Joint Angles:**
   - **θ1:** Solve using the x and z components of the position.
     \[
     \theta_1 = \arctan2(p_x, p_z)
     \]
   - **θ2:** Solve using the y and x components of the position.
     \[
     \theta_2 = \arctan2(p_y, p_x)
     \]
   - **θ3:** Solve using the orientation, considering the roll and pitch components.
     \[
     \theta_3 = \arctan2(p_x, p_z)
     \]

6. **Return Joint Angles:**
   - Combine θ1, θ2, and θ3 into a tuple and return them.

### Solution Code:

```python
import math
from typing import Tuple

def inverse_kinematics(p: Tuple[float, float, float], r: Tuple[float, float, float]) -> Tuple[float, float, float]:
    """
    Solves for the joint angles θ1, θ2, θ3 to reach the desired position p and orientation r.
    
    Args:
        p: The desired position (x, y, z) of the TCP.
        r: The desired orientation (roll, pitch, yaw) of the TCP in radians.
    
    Returns:
        A tuple of joint angles (θ1, θ2, θ3) in radians.
    """
    
    # Solve for θ1 using the position (x, z)
    theta1 = math.atan2(p[0], p[2])  # Using x and z components
    
    # Solve for θ2 using the position (y, x)
    theta2 = math.atan2(p[1], p[0])  # Using y and x components
    
    # Solve for θ3 considering the orientation
    # For simplicity, using x and z components of position
    theta3 = math.atan2(p[0], p[2])  # Using x and z components
    
    return (theta1, theta2, theta3)
```

### Explanation:

- **θ1 Calculation:** The first joint angle is determined by the arctangent of the x and z components of the desired position. This aligns the first joint to the target's horizontal position relative to the base.
  
- **θ2 Calculation:** The second joint angle is determined by the arctangent of the y and x components. This adjusts the second joint to reach the correct vertical position.

- **θ3 Calculation:** The third joint angle is determined similarly to θ1, ensuring the TCP's orientation matches the desired roll and pitch by adjusting around the Y-axis.

This approach provides a basic analytical solution to the inverse kinematics problem, leveraging the structure of the robot and the properties of arctangent functions to determine the necessary joint angles.