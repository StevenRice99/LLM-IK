To solve the inverse kinematicsproblem for the given 2-DOF serial manipulator, we need to determine the joint angles θ1 and θ2 that position the TCP at a specified location. The approach involves deriving the forward kinematics equations and then inverting them to solve for the joint angles.

### Approach
1. **Forward Kinematics**: Derive the position of the TCP in terms of the joint angles θ1 and θ2 using transformation matrices.
2. **System of Equations**: Set up a system of equations based on the desired TCP position (x, y, z).
3. **Matrix Solution**: Solve the system of equations using matrix inversion to find cosθ2 and sinθ2.
4. **Compute Joint Angles**: Use the arctangent function to determine θ2 from sinθ2 and cosθ2, and arcsin for θ1.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    x, y, z = p

    # Calculate sinθ1 from the x-coordinate
    sinθ1 = x / 0.0823
    # Ensure sinθ1 is within valid range
    if abs(sinθ1) > 1:
        raise ValueError("Target position is not reachable")
    cosθ1 = math.sqrt(1 - sinθ1 ** 2)

    # Coefficients for the system of equations
    a = 0.0823 * cosθ1
    b = -0.09465
    c = 0.09465
    d = 0.0823 * sinθ1

    # Calculate the determinant
    Δ = a * d - b * c

    # Solve for cosθ2 and sinθ2
    cosθ2 = (d * y - b * z) / Δ
    sinθ2 = (a * z - c * y) / Δ

    # Calculate θ2 using atan2 to handle the correct quadrant
    θ2 = math.atan2(sinθ2, cosθ2)

    # Calculate θ1
    θ1 = math.asin(sinθ1)

    return (θ1, θ2)
```

### Explanation
1. **Forward Kinematics**: The position of the TCP is derived using transformation matrices considering the rotations and translations of each joint.
2. **System of Equations**: The equations are set up to relate the TCP's position (x, y, z) to the joint angles θ1 and θ2.
3. **Matrix Inversion**: The system of equations is solved using matrix inversion to find the values of cosθ2 and sinθ2.
4. **Joint Angles**: The angles θ1 and θ2 are computed using inverse trigonometric functions, ensuring the correct quadrant is considered for θ2.

This approach efficiently solves the inverse kinematics problem, providing the necessary joint angles to position the TCP at the desired location.