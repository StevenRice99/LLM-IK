To solve the inverse kinematicsproblem for the 2-DOF serial manipulator, we'll derive the joint angles θ1 and θ2 that position the TCP at the desired location (x, y, z). The approach involves solving the system of equations based on the forward kinematics.

### Approach
1. **Solve for θ2 using the z-coordinate**:
   - Use the equation \( z = 0.0823 \cos\theta_2 + 0.09465 \sin\theta_2 \).
   - Express this as \( z = C \cos(\theta_2 - \phi) \) where \( C = \sqrt{0.0823^2 + 0.09465^2} \) and \( \phi = \arctan\left(\frac{0.09465}{0.0823}\right) \).
   - Solve for θ2 using the arccosine function.

2. **Solve for θ1 using the x and y coordinates**:
   - Substitute θ2 into the x and y equations to form a system of linear equations.
   - Solve for \( \cos\theta_1 \) and \( \sin\theta_1 \) using matrix inversion.
   - Compute θ1 using the arctangent function.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    x, y, z = p

    # Constants
    A = 0.0823
    B = 0.09465
    C = math.sqrt(A**2 + B**2)
    phi = math.atan(B / A)

    # Solve for theta2 using z-coordinate
    if abs(z) > C:
        raise ValueError("Target position is not reachable")
    theta2 = phi + math.acos(z / C)

    # Calculate D and E
    D = A * math.sin(theta2)
    E = B * math.cos(theta2)

    # Solve for cos(theta1) and sin(theta1)
    denominator = D**2 + E**2
    cos_theta1 = (D * x + E * y) / denominator
    sin_theta1 = (-E * x + D * y) / denominator

    # Ensure cos_theta1 is within valid range
    if abs(cos_theta1) > 1:
        raise ValueError("Target position is not reachable")

    # Calculate theta1
    theta1 = math.atan2(sin_theta1, cos_theta1)

    return (theta1, theta2)
```

### Explanation
1. **Solving for θ2**:
   - The z-coordinate equation is transformed into a form that allows solving for θ2 using the arccosine function after expressing it in terms of a single cosine function.

2. **Solving for θ1**:
   - Using the known θ2, the x and y equations are used to form a system of linear equations.
   - Matrix inversion is applied to solve for \( \cos\theta_1 \) and \( \sin\theta_1 \).
   - The arctangent function is used to determine θ1 from the sine and cosine values.

This method ensures that the joint angles are calculated accurately to position the TCP at the desired location.