To solve the inverse kinematicsfor the 2-DOF serial manipulator, we need to determine the joint angles θ1 and θ2 that position the TCP at the desired location [x, y, z]. Given the structure of the robot, the TCP's position is influenced by θ1, while θ2 does not affect the position but could influence orientation, which is not required for this problem.

### Approach
1. **Understand the Robot Structure**: 
   - Joint 1 rotates around the Z-axis.
   - Joint 2 rotates around the Y-axis.
   - The TCP is located at [0, 0.0823, 0] relative to Joint 2.

2. **Forward Kinematics**:
   - The position of the TCP in the world frame is derived using rotation matrices for both joints.
   - The TCP's position is found to be independent of θ2, simplifying the inverse kinematics problem.

3. **Inverse Kinematics**:
   - Given the desired position [x, y, z], solve for θ1 using the x and y components.
   - Set θ2 to 0 as it does not affect the TCP's position.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    # Calculate theta1 using the arctangent of the ratio of x to y
    theta1 = math.atan2(-x, y)
    # Theta2 can be set to 0 as it does not affect the position in this setup
    theta2 = 0.0
    return (theta1, theta2)
```

### Explanation
- **θ1 Calculation**: Using `math.atan2(-x, y)`, we determine the angle needed for Joint 1 to position the TCP correctly in the X-Y plane.
- **θ2 Value**: Since θ2 does not influence the TCP's position, it is set to 0 to minimize movement.

This approach efficiently solves the inverse kinematics problem by focusing on the necessary joint movements to achieve the desired TCP position.