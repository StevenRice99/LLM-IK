To solve the inverse kinematicsproblem for the 2-DOF robotic arm, we need to determine the joint angles θ1 and θ2 that will position the TCP at the desired location and orientation. Here's a step-by-step approach:

### Step 1: Define the Position and Orientation Equations
The position of the TCP is given by:
- \( x = -L1 \cdot \sin(θ1) \cdot \sin(θ2) \)
- \( y = L1 \cdot \cos(θ1) \cdot \sin(θ2) + L2 \cdot \cos(θ2) \)
- \( z = L1 \cdot \sin(θ1) \cdot \cos(θ2) + L2 \cdot \sin(θ2) \)

The orientation of the TCP is determined by the product of the rotation matrices of the two joints:
- \( R = Rz(θ1) \cdot Ry(θ2) \cdot Rz(π/2) \)

### Step 2: Set Up the System of Equations
Given a desired position \( p = (x, y, z) \) and orientation \( r = (rx, ry, rz) \), we set up the following system of equations:
1. \( -L1 \cdot \sin(θ1) \cdot \sin(θ2) = x \)
2. \( L1 \cdot \cos(θ1) \cdot \sin(θ2) + L2 \cdot \cos(θ2) = y \)
3. \( L1 \cdot \sin(θ1) \cdot \cos(θ2) + L2 \cdot \sin(θ2) = z \)
4. The orientation equation derived from the rotation matrices.

### Step 3: Solve the System of Equations
Using SymPy, we can solve this system of nonlinear equations for θ1 and θ2 symbolically.

### Step 4: Implement the Solution in Python
Here's the implementation of the inverse kinematics function:

```python
import math
from sympy import symbols, Eq, solve, sin, cos

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    x, y, z = p
    rx, ry, rz = r
    
    θ1, θ2 = symbols('θ1 θ2')
    
    # Define the position equations
    eq1 = Eq(-0.0823 * sin(θ1) * sin(θ2), x)
    eq2 = Eq(0.0823 * cos(θ1) * sin(θ2) + 0.09465 * cos(θ2), y)
    eq3 = Eq(0.0823 * sin(θ1) * cos(θ2) + 0.09465 * sin(θ2), z)
    
    # Solve the system of equations
    solution = solve((eq1, eq2, eq3), (θ1, θ2))
    
    return (float(solution[θ1]), float(solution[θ2]))
```

### Explanation
1. **Position Equations**: These equations relate the joint angles to the TCP's position in 3D space.
2. **Orientation Equation**: This equation ensures the TCP's orientation matches the desired orientation.
3. **Solving the System**: Using SymPy's `solve` function, we find the joint angles that satisfy all the equations simultaneously.

This approach ensures that both the position and orientation constraints are met, providing an accurate solution for the inverse kinematics problem.