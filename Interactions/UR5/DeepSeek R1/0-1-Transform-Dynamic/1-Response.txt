To solve this problem, we need to determine the joint angles (theta1 and theta2) for a 2-DOF serial manipulator such that the end-effector (TCP) reaches a specified position and orientation. The solution involves converting the target orientation into a rotation matrix and using elements of this matrix to compute the joint angles. The position is assumed to be reachable given the problem constraints.

### Approach
1. **Convert Orientation to Rotation Matrix**: The target orientation given as roll, pitch, and yaw angles is converted into a rotation matrix using the fixed-axis rotation order (X, Y, Z).
2. **Extract Joint Angles from Rotation Matrix**:
   - **theta2** is derived from the elements of the rotation matrix corresponding to the Y-axis rotation.
   - **theta1** is derived from the elements of the rotation matrix corresponding to the Z-axis rotation.

### Solution Code
```python
import math
import numpy as np

def euler_to_matrix(roll, pitch, yaw):
    Rx = np.array([
        [1, 0, 0],
        [0, math.cos(roll), -math.sin(roll)],
        [0, math.sin(roll), math.cos(roll)]
    ])
    Ry = np.array([
        [math.cos(pitch), 0, math.sin(pitch)],
        [0, 1, 0],
        [-math.sin(pitch), 0, math.cos(pitch)]
    ])
    Rz = np.array([
        [math.cos(yaw), -math.sin(yaw), 0],
        [math.sin(yaw), math.cos(yaw), 0],
        [0, 0, 1]
    ])
    return Rz @ Ry @ Rx

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    roll, pitch, yaw = r
    R_target = euler_to_matrix(roll, pitch, yaw)
    
    r31 = R_target[2, 0]
    r33 = R_target[2, 2]
    theta2 = math.atan2(-r31, r33)
    
    r13 = R_target[0, 2]
    r23 = R_target[1, 2]
    theta1 = math.atan2(r23, r13)
    
    return (theta1, theta2)
```

### Explanation
1. **Euler to Rotation Matrix Conversion**: The function `euler_to_matrix` converts the given roll, pitch, and yaw angles into a rotation matrix using the fixed-axis rotation order (X, Y, Z). This matrix represents the target orientation in 3D space.
2. **Joint Angle Calculation**:
   - **theta2** is calculated using the arctangent of elements from the rotation matrix that correspond to the Y-axis rotation. This is derived from the elements at positions (2, 0) and (2, 2) of the rotation matrix.
   - **theta1** is calculated using the arctangent of elements from the rotation matrix that correspond to the Z-axis rotation. This is derived from the elements at positions (0, 2) and (1, 2) of the rotation matrix.

This approach ensures that the computed joint angles (theta1 and theta2) will position and orient the TCP as required, assuming the target is reachable.