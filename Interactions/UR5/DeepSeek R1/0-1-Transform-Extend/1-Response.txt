To solve the inverse kinematics for the given 2-DOF manipulator, we need to determine the joint angles (θ₁, θ₂) that position the end-effector at the target position (p) and orientation (r). The solution involves calculating the target rotation matrix from the given Euler angles, extracting the necessary components to find θ₂, and then solving a system of equations to find θ₁.

### Approach
1. **Compute Target Rotation Matrix**: Convert the target Euler angles (roll, pitch, yaw) into a rotation matrix using the ZYX convention.
2. **Determine θ₂**: Extract specific elements from the rotation matrix to compute θ₂ using the arctangent function.
3. **Solve for θ₁**: Using the position equations derived from the forward kinematics, solve a system of linear equations to find θ₁.

### Solution Code
```python
import math
import numpy as np

def euler_to_matrix(rx, ry, rz):
    """Converts Euler angles (roll, pitch, yaw) to a rotation matrix using ZYX convention."""
    Rx = np.array([
        [1, 0, 0],
        [0, math.cos(rx), -math.sin(rx)],
        [0, math.sin(rx), math.cos(rx)]
    ])
    Ry = np.array([
        [math.cos(ry), 0, math.sin(ry)],
        [0, 1, 0],
        [-math.sin(ry), 0, math.cos(ry)]
    ])
    Rz = np.array([
        [math.cos(rz), -math.sin(rz), 0],
        [math.sin(rz), math.cos(rz), 0],
        [0, 0, 1]
    ])
    return Rz @ Ry @ Rx

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    px, py, pz = p
    rx, ry, rz = r
    
    R_target = euler_to_matrix(rx, ry, rz)
    r31 = R_target[2, 0]
    r33 = R_target[2, 2]
    
    theta2 = math.atan2(-r31, r33)
    
    A = 0.425 * math.sin(theta2)
    B = -0.01615
    C = A
    D = 0.01615
    
    det = (A * C) - (B * D)
    if abs(det) < 1e-6:
        raise ValueError("Determinant is zero, target is unreachable.")
    
    cos_theta1 = (C * px - B * py) / det
    sin_theta1 = (A * py - D * px) / det
    
    theta1 = math.atan2(sin_theta1, cos_theta1)
    
    return (theta1, theta2)
```

### Explanation
1. **Rotation Matrix Calculation**: The `euler_to_matrix` function constructs the rotation matrix from Euler angles using the ZYX convention, which is necessary to align with the URDF's orientation specification.
2. **θ₂ Calculation**: The second joint angle (θ₂) is derived from the elements of the rotation matrix that correspond to the orientation constraints imposed by the manipulator's structure.
3. **θ₁ Calculation**: Using the position equations derived from the forward kinematics, we solve a system of linear equations to find the first joint angle (θ₁). This involves computing the determinant of the system and using it to solve for the sine and cosine of θ₁, which are then converted to an angle using the arctangent function.

This approach ensures that both the position and orientation constraints are satisfied, leveraging the geometric properties of the manipulator and the given target.