To solve this problem, we need to determine the joint angles (θ₁ and θ₂) for a 2-DOF manipulator that positions the end-effector at a given target position and orientation. The solution involves converting the target orientation from Euler angles to a rotation matrix, deriving the joint angles from this matrix, and solving the position equations using the correct geometric relationships.

### Approach
1. **Rotation Matrix Calculation**: Convert the target Euler angles (roll, pitch, yaw) into a rotation matrix using the ZYX convention.
2. **θ₂ Calculation**: Extract θ₂ from the rotation matrix elements corresponding to the Y-axis rotation.
3. **Position Equations**: Use the correct coefficients derived from the manipulator's link lengths to set up and solve the system of equations for θ₁.
4. **Angle Wrapping**: Adjust θ₁ to ensure it is within the range [-π, π] to match the expected joint values.

### Solution Code
```python
import math
import numpy as np

def euler_to_matrix(rx, ry, rz):
    """Converts Euler angles (roll, pitch, yaw) to a rotation matrix using ZYX convention."""
    Rx = np.array([
        [1, 0, 0],
        [0, math.cos(rx), -math.sin(rx)],
        [0, math.sin(rx), math.cos(rx)]
    ])
    Ry = np.array([
        [math.cos(ry), 0, math.sin(ry)],
        [0, 1, 0],
        [-math.sin(ry), 0, math.cos(ry)]
    ])
    Rz = np.array([
        [math.cos(rz), -math.sin(rz), 0],
        [math.sin(rz), math.cos(rz), 0],
        [0, 0, 1]
    ])
    return Rz @ Ry @ Rx

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    px, py, pz = p
    rx, ry, rz = r
    
    R_target = euler_to_matrix(rx, ry, rz)
    r31 = R_target[2, 0]
    r33 = R_target[2, 2]
    
    theta2 = math.atan2(-r31, r33)
    
    A = 0.425 * math.sin(theta2)
    B = 0.01615  # Derived from 0.13585 - 0.1197
    
    det = A**2 + B**2
    if abs(det) < 1e-6:
        raise ValueError("Determinant is zero, target is unreachable.")
    
    cos_theta1 = (A * px + B * py) / det
    sin_theta1 = (A * py - B * px) / det
    
    theta1 = math.atan2(sin_theta1, cos_theta1)
    # Wrap theta1 to [-π, π] to match expected joint value representation
    theta1 = (theta1 + math.pi) % (2 * math.pi) - math.pi
    
    return (theta1, theta2)
```

### Explanation
1. **Rotation Matrix**: The `euler_to_matrix` function converts the target Euler angles into a rotation matrix using the ZYX convention, ensuring the correct orientation representation.
2. **θ₂ Calculation**: The second joint angle (θ₂) is derived from the elements of the target rotation matrix's third row, ensuring alignment with the manipulator's Y-axis rotation.
3. **Position Equations**: The coefficients for the system of equations are derived from the manipulator's link lengths (0.13585 and -0.1197), ensuring accurate representation of the position constraints. The system of equations is solved using matrix inversion, yielding the correct θ₁ through the arctangent function.
4. **Angle Wrapping**: The calculated θ₁ is wrapped to the range [-π, π] to ensure it matches the expected joint value representation in the test cases, addressing discrepancies due to angle periodicity.

This approach ensures that both the position and orientation constraints are met by accurately modeling the manipulator's geometry and solving the resulting equations with the correct mathematical relationships, while also adjusting for angle periodicity to match test case expectations.