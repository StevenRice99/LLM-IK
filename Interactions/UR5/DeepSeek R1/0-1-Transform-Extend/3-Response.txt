To address the orientation discrepancies caused by incorrect joint angle calculations, we need to correct the coefficients in the system of equations used to solve for the first joint angle (θ₁). The previous code used incorrect values derived from the manipulator's link positions, leading to orientation errors. By accurately deriving the coefficients from the URDF parameters, we ensure the correct θ₁ and θ₂ values, aligning the orientation with the target.

### Solution Code
```python
import math
import numpy as np

def euler_to_matrix(rx, ry, rz):
    """Converts Euler angles (roll, pitch, yaw) to a rotation matrix using ZYX convention."""
    Rx = np.array([
        [1, 0, 0],
        [0, math.cos(rx), -math.sin(rx)],
        [0, math.sin(rx), math.cos(rx)]
    ])
    Ry = np.array([
        [math.cos(ry), 0, math.sin(ry)],
        [0, 1, 0],
        [-math.sin(ry), 0, math.cos(ry)]
    ])
    Rz = np.array([
        [math.cos(rz), -math.sin(rz), 0],
        [math.sin(rz), math.cos(rz), 0],
        [0, 0, 1]
    ])
    return Rz @ Ry @ Rx

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    px, py, pz = p
    rx, ry, rz = r
    
    R_target = euler_to_matrix(rx, ry, rz)
    r31 = R_target[2, 0]
    r33 = R_target[2, 2]
    
    theta2 = math.atan2(-r31, r33)
    
    a = -0.25555  # -(0.13585 + 0.1197)
    c = 0.25555   # 0.13585 + 0.1197
    b = 0.425 * math.sin(theta2)
    
    det = a * c - b**2
    if abs(det) < 1e-6:
        raise ValueError("Determinant is zero, target is unreachable.")
    
    cos_theta1 = (c * px - b * py) / det
    sin_theta1 = (a * py - b * px) / det
    
    theta1 = math.atan2(sin_theta1, cos_theta1)
    
    return (theta1, theta2)
```

### Explanation
1. **Correct Coefficients**: The coefficients `a` and `c` are derived from the sum of the Y components of the manipulator's links (0.13585 and -0.1197), ensuring accurate representation of the position equations.
2. **System of Equations**: The corrected system of equations for θ₁ uses the proper coefficients, leading to accurate solutions that align both position and orientation with the target.
3. **Determinant Check**: Ensures the system is solvable, avoiding division by zero in cases where the target is unreachable.

This approach corrects the orientation discrepancies by accurately solving for the joint angles using the correct geometric relationships from the URDF parameters.