To solve this problem, we need to compute the joint angles for a 2-DOF robot arm such that the end-effector (TCP) reaches both a desired position and orientation. The solution must consider both the position and orientation constraints provided as inputs.

### Approach
The robot arm has two revolute joints:
1. The first joint (Revolute 1) rotates around the Z-axis (theta1).
2. The second joint (Revolute 2) rotates around the Y-axis (theta2).

The key insight is that the orientation of the TCP is determined by the joint angles, which must satisfy both the desired position and orientation. The orientation's pitch (r_y) directly relates to theta2, while the position's z-coordinate (z_d) relates to the cosine of theta2. By adjusting theta2 based on the sign of z_d, we ensure compatibility between the position and orientation. The first joint angle (theta1) is then computed using the x and y coordinates.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    x_d, y_d, z_d = p
    r_x, r_y, r_z = r

    # Compute theta2 based on the desired orientation's pitch (r_y) and the position's z-coordinate
    if z_d >= 0:
        theta2 = r_y
    else:
        theta2 = math.pi - r_y

    # Normalize theta2 to the range [-pi, pi]
    theta2 = (theta2 + math.pi) % (2 * math.pi) - math.pi

    # Compute theta1 based on x and y coordinates
    A = 0.425 * math.sin(theta2)
    B = 0.01615
    denominator = A ** 2 + B ** 2
    if denominator == 0:
        theta1 = 0.0  # Handle edge case when A and B are both zero
    else:
        C = (A * x_d + B * y_d) / denominator
        S = (-B * x_d + A * y_d) / denominator
        theta1 = math.atan2(S, C)

    return (theta1, theta2)
```

### Explanation
1. **Theta2 Calculation**: The second joint angle (theta2) is determined based on the desired pitch (r_y) and the position's z-coordinate (z_d). If z_d is positive, theta2 is directly set to r_y. If z_d is negative, theta2 is adjusted to `pi - r_y` to ensure the correct orientation and position compatibility.
2. **Theta1 Calculation**: Using the x and y coordinates, the first joint angle (theta1) is computed using trigonometric relationships derived from the robot's geometry. This ensures the TCP reaches the desired position while maintaining the correct orientation.

This approach efficiently combines position and orientation constraints, ensuring the computed joint angles meet both requirements by leveraging geometric relationships and trigonometric calculations.