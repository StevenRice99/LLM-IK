To solve the inverse kinematics for the given 3-DOF serial manipulator, we derive the joint angles (θ₁, θ₂, θ₃) that position the end-effector at the target coordinates (x, y, z). The solution involves trigonometric manipulation and coordinate transformations based on the robot's structure.

### Approach
1. **Calculate θ₃**: Using the target position's squared distance and trigonometric identities, we determine the cosine of θ₃.
2. **Calculate θ₂**: With θ₃ known, solve for θ₂ using linear equations derived from the forward kinematics.
3. **Calculate θ₁**: Use the x and y components of the target position to determine the angle θ₁ using arctangent.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    k = 0.01615  # Derived from 0.1197 - 0.13585 in the y-component adjustments
    k_sq = k ** 2

    # Step 1: Compute θ3 using the derived equation
    numerator_cosθ3 = x**2 + y**2 + z**2 - 0.334746
    cosθ3 = numerator_cosθ3 / 0.3334125
    cosθ3 = max(min(cosθ3, 1.0), -1.0)  # Clamp to valid range
    θ3 = math.acos(cosθ3)

    # Step 2: Compute C and D for θ2 calculation
    C = 0.425 + 0.39225 * math.cos(θ3)
    D = 0.39225 * math.sin(θ3)

    # Step 3: Compute A for θ1 and θ2 calculations
    A_sq = x**2 + y**2 - k_sq
    A = math.sqrt(A_sq) if A_sq >= 0 else 0.0

    # Step 4: Solve for θ2
    denominator_theta2 = C**2 + D**2
    sinθ2 = (C * A - D * z) / denominator_theta2
    cosθ2 = (C * z + D * A) / denominator_theta2
    θ2 = math.atan2(sinθ2, cosθ2)

    # Step 5: Solve for θ1 using x and y components
    denominator_theta1 = x**2 + y**2
    if denominator_theta1 == 0:
        θ1 = 0.0  # Handle edge case where x and y are both 0
    else:
        numerator_cosθ1 = A * x + k * y
        numerator_sinθ1 = A * y - k * x
        θ1 = math.atan2(numerator_sinθ1, numerator_cosθ1)

    return (θ1, θ2, θ3)
```

### Explanation
1. **θ₃ Calculation**: The angle θ₃ is derived from the target position's squared distance, adjusted by constants from the robot's link lengths. This uses the cosine law in a geometric setup involving the third joint.
2. **θ₂ Calculation**: Using θ₃, we form linear equations to solve for θ₂. These equations come from projecting the robot's links onto the coordinate system after accounting for θ₃.
3. **θ₁ Calculation**: The first joint's angle is determined by the x and y coordinates, adjusted for the small constant `k` derived from the link offsets, using arctangent to resolve the correct quadrant.

This approach efficiently decouples the joint angle calculations, leveraging trigonometric identities and algebraic manipulation to solve the inverse kinematics problem.