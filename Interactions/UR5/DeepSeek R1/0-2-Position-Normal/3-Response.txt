To solve this problem, we need to determine the joint angles (θ1, θ2, θ3) for a 3-DOF robotic arm such that the Tool Center Point (TCP) reaches a specified target position (x, y, z). The solution involves decomposing the problem into rotational components and solving using geometric and trigonometric methods, while correcting previous errors in coordinate adjustments and link lengths.

### Approach
1. **Determine θ1 (Rotation around Z-axis):** 
   The first joint (θ1) aligns the arm with the target's x-y projection using the arctangent function.

2. **Project Target to Rotated Frame:**
   After determining θ1, the problem reduces to a 2D planar problem in the rotated frame. The radial distance (r) from the base to the target in the x-y plane is adjusted for Revolute 2's position, and the z-coordinate is adjusted for Revolute 3's Y offset.

3. **Solve for θ2 and θ3 (Planar 2R Arm):**
   Using the projected coordinates (r_rel, z_rel), we solve the inverse kinematics for a planar 2R arm with corrected link lengths. The law of cosines is used to find θ3, and θ2 is derived using geometric relationships.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    
    # Calculate theta1 to align with the x-y projection of the target
    theta1 = np.arctan2(y_target, x_target)
    
    # Project the target position into the rotated frame after theta1
    r = np.sqrt(x_target**2 + y_target**2)
    r_rel = r - 0.13585  # Adjust for Revolute 2's radial offset
    z_rel = z_target + 0.1197  # Adjust for Revolute 3's Y offset
    
    # Correct link lengths including Revolute 3's Y offset
    l1 = np.sqrt(0.425**2 + 0.1197**2)
    l2 = 0.39225
    
    # Solve for theta3 using the law of cosines
    d = np.hypot(r_rel, z_rel)
    cos_theta3 = (d**2 - l1**2 - l2**2) / (2 * l1 * l2)
    theta3 = np.arccos(np.clip(cos_theta3, -1.0, 1.0))
    
    # Solve for theta2 using geometric relationships
    gamma = np.arctan2(z_rel, r_rel)
    theta2 = gamma - np.arctan2(l2 * np.sin(theta3), l1 + l2 * np.cos(theta3))
    
    return (theta1, theta2, theta3)
```

### Explanation
1. **θ1 Calculation:** The angle θ1 is determined using `np.arctan2(y_target, x_target)`, aligning the arm with the target's x-y projection.
2. **Projection to Rotated Frame:** The target's coordinates are transformed into a rotated frame after θ1, adjusting the radial distance for Revolute 2's position and the z-coordinate for Revolute 3's Y offset.
3. **Planar 2R Arm Solution:** Using the projected coordinates (r_rel, z_rel) and corrected link lengths (accounting for Revolute 3's Y offset), the inverse kinematics for a planar 2R arm is solved. The law of cosines determines θ3, and geometric relationships yield θ2.

This approach accurately adjusts for the robotic arm's link offsets and corrects previous errors, ensuring the target position is reachable and correctly computed.