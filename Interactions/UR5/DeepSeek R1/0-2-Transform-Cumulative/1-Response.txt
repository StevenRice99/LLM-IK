To solve this problem, we need to determine the joint angles (theta1, theta2, theta3) for a 3-DOF serial manipulator such that the Tool Center Point (TCP) reaches a specified position and orientation. The solution involves leveraging the kinematic chain and the given orientation constraints.

### Approach
1. **Joint 1 (theta1)**: This joint rotates around the Z-axis. The angle is directly derived from the target orientation's yaw component (rz), as it primarily influences the direction in the X-Y plane.
2. **Joint 2 and 3 (theta2 and theta3)**: These joints rotate around the Y-axis. The sum of their angles (theta_sum) is determined by the target orientation's pitch component (ry). The individual angles are computed using the target position and trigonometric relationships.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    rx, ry, rz = r

    # Solve theta1 from the orientation's yaw component (rz)
    theta1 = rz

    # The sum of theta2 and theta3 is the orientation's pitch component (ry)
    theta_sum = ry

    # Compute S using X or Y equation based on the target position
    if abs(math.cos(rz)) > 1e-9:
        S = (x_target + 0.01615 * math.sin(rz)) / math.cos(rz)
    else:
        S = (y_target - 0.01615 * math.cos(rz)) / math.sin(rz)

    # Calculate sin(theta2) using the derived S
    sin_theta2 = (S - 0.39225 * math.sin(ry)) / 0.425

    # Calculate cos(theta2) from the Z component
    cos_theta2 = (z_target - 0.39225 * math.cos(ry)) / 0.425

    # Normalize to handle numerical precision issues
    norm = math.hypot(sin_theta2, cos_theta2)
    sin_theta2 /= norm
    cos_theta2 /= norm

    theta2 = math.atan2(sin_theta2, cos_theta2)

    # Theta3 is the remaining angle to reach theta_sum
    theta3 = theta_sum - theta2

    return (theta1, theta2, theta3)
```

### Explanation
1. **Theta1 Calculation**: The first joint angle (theta1) is set to the target orientation's yaw component (rz), as it directly controls the rotation around the Z-axis.
2. **Theta_sum Calculation**: The sum of theta2 and theta3 (theta_sum) is set to the target orientation's pitch component (ry), as these joints control the pitch.
3. **Position Handling**: The target position is used to compute the intermediate variable S, which helps in determining theta2. This involves solving trigonometric equations derived from the forward kinematics.
4. **Theta2 and Theta3 Calculation**: Using the derived values from the target position and orientation, theta2 is computed. Theta3 is then found by subtracting theta2 from theta_sum.

This approach efficiently decouples the problem into orientation and position components, leveraging trigonometric identities and the kinematic chain structure to find the joint angles.