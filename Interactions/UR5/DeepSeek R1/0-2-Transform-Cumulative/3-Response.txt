To solve this problem, we need to determine the joint angles (theta1, theta2, theta3) for a 3-DOF serial manipulator such that the Tool Center Point (TCP) reaches a specified position and orientation. The solution involves leveraging the kinematic chain and the given orientation constraints.

### Approach
1. **Convert Target Orientation to Rotation Matrix**: The target orientation given as RPY (roll, pitch, yaw) angles is converted into a rotation matrix. This matrix helps in determining the required joint angles.
2. **Extract Joint Angles from Rotation Matrix**: Using the derived rotation matrix, we extract theta1 (rotation around Z-axis) and theta_sum (sum of theta2 and theta3 rotations around Y-axis).
3. **Solve for Position Components**: The target position is adjusted to account for the rotation around theta1, resulting in a planar problem for the remaining joints.
4. **Solve for Theta2 and Theta3**: Using the adjusted position components and theta_sum, we solve for theta2 and theta3 using geometric methods, ensuring the solution respects joint limits.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    rx, ry, rz = r

    # Compute R_target from RPY angles (ZYX convention)
    cx, sx = math.cos(rx), math.sin(rx)
    cy, sy = math.cos(ry), math.sin(ry)
    cz, sz = math.cos(rz), math.sin(rz)

    # R_target = R_z(rz) * R_y(ry) * R_x(rx)
    R_target = [
        [
            cz * cy, cz * sy * sx - sz * cx, cz * sy * cx + sz * sx
        ],
        [
            sz * cy, sz * sy * sx + cz * cx, sz * sy * cx - cz * sx
        ],
        [
            -sy, cy * sx, cy * cx
        ]
    ]

    # Extract theta1 from R_target[0][1] and R_target[1][1]
    theta1 = math.atan2(-R_target[0][1], R_target[1][1])

    # Extract theta_sum from R_target[2][0] and R_target[2][2]
    theta_sum = math.atan2(-R_target[2][0], R_target[2][2])

    # Compute x' and z' from target position
    if abs(math.cos(theta1)) > 1e-9:
        x_prime = (x_target + math.sin(theta1) * 0.01615) / math.cos(theta1)
    else:
        x_prime = (y_target - math.cos(theta1) * 0.01615) / math.sin(theta1)
    z_prime = z_target

    # Solve for theta2 and theta3 using geometric approach
    a = 0.425
    b = 0.39225
    d_sq = x_prime**2 + z_prime**2
    d = math.sqrt(d_sq)
    cos_theta2 = (d_sq - a**2 - b**2) / (2 * a * b)
    cos_theta2 = max(min(cos_theta2, 1.0), -1.0)
    theta2_1 = math.acos(cos_theta2)
    theta2_2 = -theta2_1

    solutions = []
    for theta2 in [theta2_1, theta2_2]:
        theta3 = theta_sum - theta2
        x_calc = a * math.sin(theta2) + b * math.sin(theta_sum)
        z_calc = a * math.cos(theta2) + b * math.cos(theta_sum)
        if (math.isclose(x_calc, x_prime, abs_tol=1e-5) and 
            math.isclose(z_calc, z_prime, abs_tol=1e-5)):
            solutions.append((theta2, theta3))

    if solutions:
        for theta2, theta3 in solutions:
            if (-6.2831853 <= theta2 <= 6.2831853 and 
                -6.2831853 <= theta3 <= 6.2831853):
                return (theta1, theta2, theta3)
        theta2, theta3 = solutions[0]
    else:
        theta2 = math.atan2(x_prime - b * math.sin(theta_sum), 
                            z_prime - b * math.cos(theta_sum))
        theta3 = theta_sum - theta2

    return (theta1, theta2, theta3)
```

### Explanation
1. **Rotation Matrix Conversion**: The target orientation (RPY angles) is converted into a rotation matrix using the ZYX convention, which helps in decomposing the rotations into the robot's joint angles.
2. **Theta1 and Theta_sum Extraction**: Theta1 is derived from the yaw component of the rotation matrix, while theta_sum (sum of theta2 and theta3) is derived from the pitch component.
3. **Position Adjustment**: The target position is adjusted to account for the rotation around theta1, simplifying the problem to a planar case for the remaining joints.
4. **Geometric Solution for Theta2 and Theta3**: Using the law of cosines and geometric relationships, we solve for theta2 and theta3, ensuring the solution respects the physical joint limits.

This approach efficiently decouples the problem into orientation and position components, leveraging trigonometric identities and the kinematic chain structure to find the joint angles accurately.