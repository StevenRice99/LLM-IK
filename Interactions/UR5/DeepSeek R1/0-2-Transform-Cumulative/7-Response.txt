To solve this problem, we need to determine the joint angles (theta1, theta2, theta3) for a 3-DOF serial manipulator such that the Tool Center Point (TCP) reaches a specified position and orientation. The solution involves leveraging the kinematic chain and the given orientation constraints.

### Approach
1. **Extract Orientation Components**: Convert the target orientation (given as RPY angles) into a rotation matrix to extract the necessary joint angles.
2. **Calculate Theta1**: Determine the first joint angle (theta1) based on the x and y components of the target position.
3. **Adjust Target Position**: Adjust the target position to account for the first joint's contribution.
4. **Solve for Theta2 and Theta3**: Use geometric methods to solve for the remaining joint angles using the adjusted position and orientation components.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    rx, ry, rz = r

    # Compute R_target from RPY angles (ZYX convention)
    cx, sx = math.cos(rx), math.sin(rx)
    cy, sy = math.cos(ry), math.sin(ry)
    cz, sz = math.cos(rz), math.sin(rz)

    R00 = cz * cy
    R02 = cz * sy * cx + sz * sx
    theta_sum = math.atan2(R02, R00)

    # Solve theta1 based on x and y components
    theta1 = math.atan2(-x_target, y_target)

    # Adjust target position for joint 1's contribution (Revolute 2's Y offset)
    y_offset = 0.13585
    x_adj = x_target + y_offset * math.sin(theta1)
    y_adj = y_target - y_offset * math.cos(theta1)
    planar_x = math.hypot(x_adj, y_adj)
    planar_z = z_target

    # Solve for theta2 and theta3 using geometric approach
    a = 0.425
    b = 0.39225
    d_sq = planar_x**2 + planar_z**2
    d = math.sqrt(d_sq)
    cos_theta2 = (d_sq - a**2 - b**2) / (2 * a * b)
    cos_theta2 = max(min(cos_theta2, 1.0), -1.0)
    theta2_1 = math.acos(cos_theta2)
    theta2_2 = -theta2_1

    solutions = []
    for theta2 in [theta2_1, theta2_2]:
        theta3 = theta_sum - theta2
        x_calc = a * math.sin(theta2) + b * math.sin(theta_sum)
        z_calc = a * math.cos(theta2) + b * math.cos(theta_sum)
        if (math.isclose(x_calc, planar_x, abs_tol=1e-5) and 
            math.isclose(z_calc, planar_z, abs_tol=1e-5)):
            solutions.append((theta2, theta3))

    if solutions:
        theta2, theta3 = solutions[0]
    else:
        # Fallback to algebraic solution if geometric fails
        theta2 = math.atan2(planar_x - b * math.sin(theta_sum), 
                            planar_z - b * math.cos(theta_sum))
        theta3 = theta_sum - theta2

    return (theta1, theta2, theta3)
```

### Explanation
1. **Rotation Matrix Construction**: The target orientation (RPY angles) is converted into a rotation matrix using the ZYX convention. This matrix helps in extracting the sum of theta2 and theta3 (theta_sum).
2. **Theta1 Calculation**: The first joint angle (theta1) is derived from the x and y components of the target position using the arctangent function, adjusted for the Y offset of the second joint.
3. **Position Adjustment**: The target position is adjusted to account for the contribution of the first joint, converting the problem into a planar problem for the remaining joints.
4. **Geometric Solution**: Using the law of cosines and geometric relationships, the code solves for theta2 and theta3, ensuring the solution respects the physical joint limits and matches the target position and orientation.

This approach efficiently decouples the problem into orientation and position components, leveraging trigonometric identities and the kinematic chain structure to find the joint angles accurately.