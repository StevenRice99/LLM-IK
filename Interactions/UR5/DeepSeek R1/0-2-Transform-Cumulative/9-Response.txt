To solve this problem, we need to determine the joint angles (theta1, theta2, theta3) for a 3-DOF serial manipulator such that the Tool Center Point (TCP) reaches a specified position and orientation. The solution involves leveraging the kinematic chain and the given orientation constraints.

### Approach
1. **Convert Target Orientation to Rotation Matrix**: The target orientation (given as RPY angles) is converted into a rotation matrix using the ZYX convention. This matrix helps in decomposing the rotations into the robot's joint angles.
2. **Extract Theta1 and Theta_sum**: The first joint angle (theta1) is derived from the rotation matrix's first column, while the sum of theta2 and theta3 (theta_sum) is derived from the third row of the rotation matrix.
3. **Adjust Target Position**: The target position is adjusted to account for the contributions of the first and second links, converting the problem into a planar problem for the remaining joints.
4. **Solve for Theta2 and Theta3**: Using the adjusted position components and theta_sum, we solve for theta2 and theta3 using geometric methods, ensuring the solution respects the physical joint limits.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    rx, ry, rz = r

    # Compute R_target from RPY angles (ZYX convention)
    cx = math.cos(rx)
    sx = math.sin(rx)
    cy = math.cos(ry)
    sy = math.sin(ry)
    cz = math.cos(rz)
    sz = math.sin(rz)

    R_target = [
        [cz * cy, cz * sy * sx - sz * cx, cz * sy * cx + sz * sx],
        [sz * cy, sz * sy * sx + cz * cx, sz * sy * cx - cz * sx],
        [-sy, cy * sx, cy * cx]
    ]

    # Extract theta1 from the first column of R_target
    theta1 = math.atan2(R_target[1][0], R_target[0][0])

    # Extract theta_sum from the third row of R_target
    theta_sum = math.atan2(-R_target[2][0], R_target[2][2])

    # Compute S using adjusted x or y equation to account for link offsets
    if abs(math.cos(theta1)) > 1e-9:
        S = (x_target - 0.25555 * math.sin(theta1)) / math.cos(theta1)
    else:
        S = (y_target - 0.01615 * math.cos(theta1)) / math.sin(theta1)

    # Solve for theta2 using the position equations
    sin_theta2 = (S - 0.39225 * math.sin(theta_sum)) / 0.425
    cos_theta2 = (z_target - 0.39225 * math.cos(theta_sum)) / 0.425

    # Normalize to handle numerical inaccuracies
    norm = math.hypot(sin_theta2, cos_theta2)
    sin_theta2 /= norm
    cos_theta2 /= norm

    theta2 = math.atan2(sin_theta2, cos_theta2)

    # Compute theta3
    theta3 = theta_sum - theta2

    return (theta1, theta2, theta3)
```

### Explanation
1. **Rotation Matrix Conversion**: The target orientation (RPY angles) is converted into a rotation matrix using the ZYX convention. This matrix helps in decomposing the rotations into the robot's joint angles.
2. **Theta1 and Theta_sum Extraction**: The first joint angle (theta1) is derived from the rotation matrix's first column, which corresponds to the yaw component. The sum of theta2 and theta3 (theta_sum) is derived from the third row of the rotation matrix, corresponding to the pitch component.
3. **Position Adjustment**: The target position is adjusted to account for the contributions of the first and second links. This adjustment converts the problem into a planar problem for the remaining joints.
4. **Geometric Solution**: Using the adjusted position components and theta_sum, the code solves for theta2 and theta3 using the arctangent function, ensuring the solution respects the physical joint limits. The normalization step handles numerical inaccuracies to ensure valid trigonometric values.

This approach efficiently decouples the problem into orientation and position components, leveraging trigonometric identities and the kinematic chain structure to find the joint angles accurately.