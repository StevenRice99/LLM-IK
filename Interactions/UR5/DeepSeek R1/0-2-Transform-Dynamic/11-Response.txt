To solve this problem, we need to determine the joint angles (theta1, theta2, theta3) for a 3-DOF serial manipulator such that the Tool Center Point (TCP) reaches a specified position and orientation. The solution involves correctly accounting for the geometric configuration of the manipulator and solving the inverse kinematics using trigonometric methods.

### Approach
1. **Orientation Handling**: The first joint angle (theta1) is derived from the target's yaw component (rz). The sum of the second and third joint angles (theta_sum) is derived from the target's pitch component (ry).
2. **Position Adjustment**: The target position is adjusted to account for the first joint's rotation and the fixed Y-axis offset between Revolute 2 and Revolute 3.
3. **Planar 2R Solution**: The adjusted position is used to solve for the second and third joint angles (theta2 and theta3) using trigonometric identities, ensuring the TCP reaches the desired position and orientation.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    rx, ry, rz = r

    theta1 = rz
    theta_sum = ry

    # Compute K from x and y equations
    term_x = x_target + 0.01615 * math.sin(theta1)
    term_y = y_target - 0.01615 * math.cos(theta1)
    K = math.hypot(term_x, term_y)

    # Compute sin(theta2)
    sin_ry = math.sin(theta_sum)
    numerator = K - 0.39225 * sin_ry
    sin_theta2 = numerator / 0.425

    # Handle possible numerical inaccuracies
    sin_theta2 = max(min(sin_theta2, 1.0), -1.0)

    # Two possible solutions for theta2
    theta2_1 = math.asin(sin_theta2)
    theta2_2 = math.pi - theta2_1

    # Check which theta2 satisfies the z equation
    z_calc1 = 0.39225 * math.cos(theta_sum) + 0.425 * math.cos(theta2_1)
    z_calc2 = 0.39225 * math.cos(theta_sum) + 0.425 * math.cos(theta2_2)

    # Choose the theta2 that results in z closest to target
    if abs(z_calc1 - z_target) <= abs(z_calc2 - z_target):
        theta2 = theta2_1
    else:
        theta2 = theta2_2

    theta3 = theta_sum - theta2

    return (theta1, theta2, theta3)
```

### Explanation
1. **Orientation Handling**: The first joint angle (theta1) is set to the target yaw (rz), and the sum of the second and third joint angles (theta_sum) is set to the target pitch (ry).
2. **Position Adjustment**: The target position's X and Y components are adjusted to account for the first joint's rotation and the fixed Y-axis offset between Revolute 2 and Revolute 3.
3. **Planar Solution**: The adjusted position is used to solve for the second and third joint angles (theta2 and theta3) using trigonometric identities. The solution involves computing possible angles for theta2 and selecting the one that satisfies the Z position constraint.

This approach efficiently combines orientation and position handling, ensuring accurate inverse kinematics calculations by considering the manipulator's geometric configuration.