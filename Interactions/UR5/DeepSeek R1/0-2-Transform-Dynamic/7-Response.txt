To solve this problem, we need to determine the joint angles (theta1, theta2, theta3) for a 3-DOF serial manipulator such that the Tool Center Point (TCP) reaches a specified position and orientation. The solution involves correctly accounting for the geometric configuration of the manipulator, including the Y-axis offset between joints, and solving the inverse kinematics using a direct trigonometric approach.

### Approach
1. **Orientation Handling**: The first joint angle (theta1) is determined by the target's yaw component (rz). The sum of the second and third joint angles (theta_sum) is derived from the target's pitch component (ry).
2. **Position Adjustment**: The target position is adjusted to account for the first joint's rotation and the fixed Y-axis offset between Revolute 2 and Revolute 3.
3. **Direct Trigonometric Solution**: Using the adjusted position and the known sum of theta2 and theta3 (theta_sum), we directly solve for theta2 and theta3 using trigonometric identities.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    rx, ry, rz = r

    # Solve for theta1 from the orientation (rz)
    theta1 = rz

    # Calculate x_rotated in Revolute 2's frame considering the Y offset between Revolute 2 and 3
    y_offset_revolute2_to_3 = -0.1197
    combined_y_offset = 0.13585 + y_offset_revolute2_to_3  # 0.13585 - 0.1197 = 0.01615
    numerator = y_target - combined_y_offset * math.cos(theta1)
    denominator = math.sin(theta1)
    
    if abs(denominator) < 1e-9:
        # Handle singularity (theta1 is 0 or pi; assume x_rotated is 0 as per problem constraints)
        x_rotated = 0.0
    else:
        x_rotated = numerator / denominator

    # Parameters for Revolute 2 and 3
    A = 0.425  # Distance from Revolute 2 to Revolute 3 along Z in their local frame
    B = 0.39225  # Distance from Revolute 3 to TCP
    theta_sum = ry  # theta2 + theta3

    # Compute sin and cos of theta_sum
    sin_ry = math.sin(theta_sum)
    cos_ry = math.cos(theta_sum)

    # Solve for theta2 using the adjusted x_rotated and z_target
    sin_theta2 = (x_rotated - B * sin_ry) / A
    cos_theta2 = (z_target - B * cos_ry) / A

    # Normalize to handle numerical inaccuracies
    norm = math.hypot(sin_theta2, cos_theta2)
    if norm < 1e-9:
        theta2 = 0.0
    else:
        sin_theta2 /= norm
        cos_theta2 /= norm
        theta2 = math.atan2(sin_theta2, cos_theta2)

    # Compute theta3
    theta3 = theta_sum - theta2

    return (theta1, theta2, theta3)
```

### Explanation
1. **Orientation Handling**: The first joint angle (theta1) is set to the target yaw (rz), which determines the base rotation around the Z-axis.
2. **Position Adjustment**: The target position's Y component is adjusted to account for the fixed Y-axis offset between Revolute 2 and Revolute 3. This adjustment allows us to compute the effective X position (x_rotated) in Revolute 2's frame.
3. **Direct Trigonometric Solution**: Using the adjusted X position (x_rotated) and the target Z position (z_target), we directly solve for theta2 and theta3. The solution leverages trigonometric identities to ensure the computed angles satisfy the target position and orientation constraints.

This approach efficiently combines orientation and position handling, ensuring accurate inverse kinematics calculations by considering the manipulator's geometric configuration.