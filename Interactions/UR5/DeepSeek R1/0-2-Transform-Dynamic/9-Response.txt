To solve this problem, we need to determine the joint angles (theta1, theta2, theta3) for a 3-DOF serial manipulator such that the Tool Center Point (TCP) reaches a specified position and orientation. The solution involves correctly accounting for the geometric configuration of the manipulator and solving the inverse kinematics using trigonometric methods.

### Approach
1. **Theta1 Calculation**: The first joint angle (theta1) is derived from the target position's x and y components using a trigonometric equation to ensure the position constraint is satisfied.
2. **Position Transformation**: The target position is transformed into the coordinate system of the second joint (Revolute 2) after adjusting for the first joint's rotation and offset.
3. **Planar 2R Solution**: The remaining position problem is solved using a planar 2R manipulator approach, considering the geometric configuration of the links from Revolute 2 to the TCP.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    rx, ry, rz = r

    # Calculate theta1 from the position equation y*cos(theta1) - x*sin(theta1) = 0.13585
    A = y_target
    B = -x_target
    C = 0.13585
    D = math.hypot(A, B)
    
    if D < 1e-9:
        theta1 = 0.0
    else:
        phi = math.atan2(B, A)
        acos_arg = max(min(C / D, 1.0), -1.0)
        delta = math.acos(acos_arg)
        theta1_1 = phi + delta
        theta1_2 = phi - delta
        
        # Select theta1 closest to the target rz
        if abs(theta1_1 - rz) <= abs(theta1_2 - rz):
            theta1 = theta1_1
        else:
            theta1 = theta1_2

    # Transform target position to Revolute2's frame
    x_revolute2 = x_target * math.cos(theta1) + y_target * math.sin(theta1)
    z_revolute2 = z_target

    # Parameters for the planar 2R arm
    a = math.hypot(-0.1197, 0.425)  # Distance from Revolute2 to Revolute3
    b = 0.39225                      # Distance from Revolute3 to TCP
    theta_sum = ry                   # theta2 + theta3

    # Solve for theta2 and theta3
    term_x = x_revolute2 - b * math.sin(theta_sum)
    term_z = z_revolute2 - b * math.cos(theta_sum)
    theta2 = math.atan2(term_x, term_z)
    theta3 = theta_sum - theta2

    return (theta1, theta2, theta3)
```

### Explanation
1. **Theta1 Calculation**: The first joint angle (theta1) is computed using the target position's x and y components to satisfy the equation derived from the manipulator's geometry. This ensures the position constraint is met.
2. **Position Transformation**: The target position is adjusted to account for the first joint's rotation and offset, transforming it into the coordinate system of the second joint.
3. **Planar 2R Solution**: The transformed position is used to solve for the second and third joint angles (theta2 and theta3) using trigonometric identities, ensuring the TCP reaches the desired position and orientation.

This approach efficiently combines geometric and trigonometric methods to solve the inverse kinematics problem, ensuring both position and orientation constraints are met.