To solve the inverse kinematics for the given 3-DOF manipulator, we need to determine the joint angles (θ₁, θ₂, θ₃) that position the end-effector at the desired location (x, y, z) with the specified orientation (roll, pitch, yaw). The solution involves leveraging the geometric relationships between the joints and the orientation constraints.

### Approach
1. **Orientation Handling**: The first joint angle (θ₁) is set to the desired yaw (rz) to align the manipulator's orientation. The sum of the second and third joint angles (θ₂ + θ₃) must equal the desired pitch (ry).
2. **Position Handling**: Using trigonometric identities and the desired position, we solve for θ₂ and θ₃. The position equations are derived from the manipulator's geometry, considering the offsets and link lengths.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    rx, ry, rz = r
    x, y, z = p
    
    # Theta1 is the desired yaw (rz)
    theta1 = rz
    
    # Calculate sin and cos of theta1 for position equations
    sin_theta1 = np.sin(theta1)
    cos_theta1 = np.cos(theta1)
    
    # Verify that the y-coordinate matches the expected value from theta1
    expected_y = 0.13585 * cos_theta1 - 0.1197
    if not np.isclose(y, expected_y, atol=1e-5):
        raise ValueError("Target position y does not match the expected value for the given orientation.")
    
    # Calculate the terms for theta2
    term_x = x + 0.13585 * sin_theta1 - 0.39225 * np.sin(ry)
    term_z = z - 0.39225 * np.cos(ry)
    
    # Compute sin(theta2) and cos(theta2)
    sin_theta2 = term_x / 0.425
    cos_theta2 = term_z / 0.425
    
    # Ensure the values are within valid range for arctan2
    if abs(sin_theta2) > 1 or abs(cos_theta2) > 1:
        raise ValueError("Target position is out of reach for the given orientation.")
    
    theta2 = np.arctan2(sin_theta2, cos_theta2)
    
    # Theta3 is determined by the desired pitch (ry)
    theta3 = ry - theta2
    
    return (theta1, theta2, theta3)
```

### Explanation
1. **Orientation Handling**: The first joint angle (θ₁) is directly set to the desired yaw (rz), ensuring the correct alignment of the manipulator's orientation.
2. **Position Verification**: The y-coordinate of the target position is verified against the expected value derived from θ₁ to ensure consistency with the manipulator's geometry.
3. **Position Calculation**: The terms for the second joint angle (θ₂) are computed using the x and z coordinates of the target position, adjusted for the manipulator's link lengths and offsets. The second joint angle is determined using the arctangent function to handle both sine and cosine components.
4. **Third Joint Angle**: The third joint angle (θ₃) is calculated to ensure the sum of θ₂ and θ₃ matches the desired pitch (ry), achieving the correct orientation.

This approach ensures that both the position and orientation constraints are met by accurately modeling the manipulator's kinematics and solving the geometric relationships between the joints.