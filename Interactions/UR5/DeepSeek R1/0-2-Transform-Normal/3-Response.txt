To solve this problem, we need to determine the joint angles (θ₁, θ₂, θ₃) for a 3-DOF serial manipulator such that the end-effector (TCP) reaches a specified position and orientation. The solution involves using trigonometric identities and inverse kinematics equations derived from the robot's structure and desired orientation constraints.

### Approach
1. **Orientation Analysis**: The desired orientation is given as Roll-Pitch-Yaw (RPY) angles. The robot's structure allows us to relate the yaw component (rz) to the first joint angle (θ₁) and the pitch component (ry) to the sum of the second and third joint angles (θ₂ + θ₃).
2. **Position Analysis**: Using the derived orientation angles, we solve for the individual joint angles θ₂ and θ₃ by considering the geometric relationships and trigonometric identities. The position equations are solved using the arctangent function to handle both sine and cosine components, ensuring the correct quadrant is selected.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    rx, ry, rz = r
    x, y, z = p
    
    # Calculate theta1 based on desired yaw (rz)
    theta1 = np.arctan2(y, x)
    
    # Transform target position to the plane of the arm
    x_plane = np.sqrt(x**2 + y**2)
    y_plane = z - 0.13585  # Adjust for Revolute 2's z offset
    
    # Parameters for the arm segments
    a2 = 0.425
    a3 = 0.39225
    
    # Calculate theta3 using the law of cosines
    D = (x_plane**2 + y_plane**2 - a2**2 - a3**2) / (2 * a2 * a3)
    theta3 = np.arctan2(np.sqrt(1 - D**2), D)
    
    # Calculate theta2 using geometric relations
    theta2 = np.arctan2(y_plane, x_plane) - np.arctan2(a3 * np.sin(theta3), a2 + a3 * np.cos(theta3))
    
    # Adjust theta1 to match desired orientation's yaw
    theta1_correction = rz - theta1
    theta1 += theta1_correction
    
    # Adjust theta2 and theta3 to achieve desired pitch (ry)
    theta23 = theta2 + theta3
    theta3 += ry - theta23
    
    return (theta1, theta2, theta3)
```

### Explanation
1. **Orientation Handling**: The first joint angle (θ₁) is calculated using the arctangent of the target's x and y coordinates to align the end-effector's yaw with the desired orientation.
2. **Position Handling**: The target position is transformed into the plane of the robotic arm. Using the law of cosines and geometric relationships, the second (θ₂) and third (θ₃) joint angles are derived to ensure the end-effector reaches the desired position.
3. **Orientation Adjustment**: The calculated angles are adjusted to match the desired pitch (ry) and yaw (rz) components of the orientation, ensuring the sum of θ₂ and θ₃ achieves the desired pitch.

This approach combines geometric and trigonometric methods to solve the inverse kinematics problem, ensuring both position and orientation constraints are met.