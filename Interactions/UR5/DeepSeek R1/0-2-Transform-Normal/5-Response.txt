To solve this problem, we need to determine the joint angles (θ₁, θ₂, θ₃) for a 3-DOF serial manipulator such that the end-effector (TCP) reaches a specified position and orientation. The solution involves using trigonometric identities and inverse kinematics equations derived from the robot's structure and desired orientation constraints.

### Approach
1. **Orientation Handling**: The desired orientation's yaw (rz) is directly used to determine the first joint angle (θ₁). The pitch (ry) is achieved by the sum of the second and third joint angles (θ₂ + θ₃).
2. **Position Handling**: The target position is transformed into the plane defined by the first joint's rotation. The second and third joint angles are calculated using geometric relationships and the law of cosines to ensure the end-effector reaches the desired position.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    rx, ry, rz = r
    x, y, z = p
    
    # Calculate theta1 based on desired yaw (rz)
    theta1 = rz
    
    # Transform target position to the arm's plane
    x_plane = x * np.cos(theta1) + y * np.sin(theta1)
    z_plane = z - 0.13585  # Adjust for Revolute 2's Y offset
    
    # Arm segment lengths
    a2 = 0.425
    a3 = 0.39225
    
    # Calculate distance to target in the plane
    D = np.hypot(x_plane, z_plane)
    
    # Calculate theta3 using the law of cosines
    cos_theta3 = (D**2 - a2**2 - a3**2) / (2 * a2 * a3)
    theta3 = np.arccos(np.clip(cos_theta3, -1.0, 1.0))  # Ensure valid arccos input
    
    # Two possible solutions for theta3 (elbow up/down)
    theta3 = np.array([theta3, -theta3])
    
    # Calculate theta2 for each theta3 solution
    alpha = np.arctan2(z_plane, x_plane)
    theta2 = alpha - np.arctan2(a3 * np.sin(theta3), a2 + a3 * np.cos(theta3))
    
    # Calculate theta2 + theta3 for each solution
    theta23 = theta2 + theta3
    
    # Select the solution that best matches the desired pitch (ry)
    error = np.abs(theta23 - ry)
    idx = np.argmin(error)
    
    theta2_val = theta2[idx]
    theta3_val = theta3[idx]
    
    # Adjust theta3 to exactly match the desired pitch
    theta3_val = ry - theta2_val
    
    return (theta1, theta2_val, theta3_val)
```

### Explanation
1. **Orientation Handling**: The first joint angle (θ₁) is set to the desired yaw (rz) to align the arm in the correct direction.
2. **Position Transformation**: The target position is transformed into the plane defined by θ₁, simplifying the problem to a 2D inverse kinematics problem.
3. **Geometric Solution**: Using the law of cosines, the third joint angle (θ₃) is calculated. Two possible solutions (elbow up/down) are considered.
4. **Pitch Adjustment**: The second joint angle (θ₂) is calculated to achieve the desired position, and θ₃ is adjusted to ensure the sum θ₂ + θ₃ matches the desired pitch (ry).

This approach ensures that both the position and orientation constraints are met by combining geometric calculations with orientation adjustments.