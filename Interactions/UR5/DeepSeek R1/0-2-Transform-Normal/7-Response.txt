To solve this problem, we need to determine the joint angles (θ₁, θ₂, θ₃) for a 3-DOF serial manipulator such that the end-effector (TCP) reaches a specified position and orientation. The solution involves using trigonometric identities and inverse kinematics equations derived from the robot's structure and desired orientation constraints.

### Approach
1. **Orientation Handling**: The desired orientation's yaw (rz) is directly used to determine the first joint angle (θ₁). The pitch (ry) is achieved by the sum of the second and third joint angles (θ₂ + θ₃).
2. **Position Handling**: The target position is adjusted to account for the position of Revolute 2 in the world frame after considering the first joint's rotation. The second and third joint angles are calculated using geometric relationships derived from the adjusted position.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    rx, ry, rz = r
    x, y, z = p
    
    # Theta1 is directly the desired yaw (rz)
    theta1 = rz
    
    # Compute Revolute 2's position in world coordinates
    revolute2_x = -0.13585 * np.sin(theta1)
    revolute2_y = 0.13585 * np.cos(theta1)
    
    # Target position relative to Revolute 2's position
    dx = x - revolute2_x
    dy = y - revolute2_y
    dz = z
    
    # Distance in the plane after Revolute 1's rotation
    A = np.hypot(dx, dy)
    
    # Calculate sin(theta2) and cos(theta2) using the position equations
    sin_ry = np.sin(ry)
    cos_ry = np.cos(ry)
    
    sin_theta2 = (A - 0.39225 * sin_ry) / 0.425
    cos_theta2 = (dz - 0.39225 * cos_ry) / 0.425
    
    theta2 = np.arctan2(sin_theta2, cos_theta2)
    
    # Theta3 is determined by the desired pitch (ry)
    theta3 = ry - theta2
    
    return (theta1, theta2, theta3)
```

### Explanation
1. **Orientation Handling**: The first joint angle (θ₁) is set to the desired yaw (rz) to align the arm in the correct direction.
2. **Position Adjustment**: The position of Revolute 2 is calculated in the world frame after considering the rotation from the first joint. The target position is adjusted relative to Revolute 2's position.
3. **Geometric Solution**: Using the adjusted position, the second joint angle (θ₂) is calculated using trigonometric identities. The third joint angle (θ₃) is derived to ensure the sum of θ₂ and θ₃ matches the desired pitch (ry).

This approach ensures that both the position and orientation constraints are met by accurately transforming the target position and solving the geometric relationships between the joints.