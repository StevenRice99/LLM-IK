To solve the inverse kinematics for the given 3-DOF manipulator, we need to accurately model the position and orientation based on the joint angles. The key steps involve calculating the first joint angle (θ₁) from the desired yaw, then solving for the remaining angles (θ₂, θ₃) using geometric relationships derived from the position equations.

### Approach
1. **Orientation Handling**: The first joint angle (θ₁) is derived from the desired yaw (rz) of the TCP's orientation.
2. **Position Adjustment**: The target position is adjusted relative to the position of Revolute 2 after considering θ₁.
3. **Geometric Solution**: Using trigonometric identities and the law of cosines, the second and third joint angles (θ₂, θ₃) are calculated to achieve the desired position and pitch (ry).

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    rx, ry, rz = r
    x, y, z = p
    
    # Calculate theta1 based on the desired yaw (rz)
    theta1 = np.arctan2(y, x)
    
    # Transform the target position to the arm's plane after Revolute 1
    dx = x - 0.13585 * np.sin(theta1)
    dy = y - 0.13585 * np.cos(theta1)
    dz = z
    
    # Distance from Revolute 2 to the target in the plane
    A = np.hypot(dx, dy)
    B = dz
    
    # Link lengths
    a2 = 0.425
    a3 = 0.39225
    
    # Calculate theta3 using the law of cosines
    cos_theta3 = (A**2 + B**2 - a2**2 - a3**2) / (2 * a2 * a3)
    cos_theta3 = np.clip(cos_theta3, -1.0, 1.0)
    theta3 = np.arccos(cos_theta3)
    
    # Two possible solutions (elbow up/down)
    theta3 = np.array([theta3, -theta3])
    
    # Calculate theta2 for each solution
    alpha = np.arctan2(B, A)
    theta2 = alpha - np.arctan2(a3 * np.sin(theta3), a2 + a3 * np.cos(theta3))
    
    # Calculate theta2 + theta3 and select the solution closest to the desired pitch (ry)
    theta23 = theta2 + theta3
    error = np.abs(theta23 - ry)
    idx = np.argmin(error)
    
    theta2_val = theta2[idx]
    theta3_val = ry - theta2_val
    
    return (theta1, theta2_val, theta3_val)
```

### Explanation
1. **Orientation Handling**: The first joint angle (θ₁) is calculated using the arctangent of the target's x and y coordinates, aligning the manipulator's yaw with the desired orientation.
2. **Position Transformation**: The target position is adjusted to account for the position of Revolute 2 after the first joint's rotation, transforming the problem into a 2D plane.
3. **Geometric Solution**: Using the law of cosines, the third joint angle (θ₃) is calculated. Two possible solutions (elbow configurations) are considered, and the solution closest to the desired pitch (ry) is selected. The second joint angle (θ₂) is derived to ensure the sum of θ₂ and θ₃ matches the desired pitch.

This approach ensures that both the position and orientation constraints are met by accurately modeling the manipulator's kinematics and solving the geometric relationships between the joints.