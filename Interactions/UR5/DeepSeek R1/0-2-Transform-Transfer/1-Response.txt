To solve this problem, we need to compute the joint angles for a 3-DOF serial manipulator such that the end-effector reaches a specified position and orientation. The solution must account for both position and orientation constraints using the given kinematic structure.

### Approach
1. **Understand the Kinematic Structure**: The robot has three revolute joints with specific axes and link lengths. The end-effector's position and orientation are determined by these joint angles.
2. **Orientation Constraints**: The desired orientation is given as Euler angles (roll, pitch, yaw). The robot's joints allow rotations around Z and Y axes, so the orientation can be decomposed into yaw (from the first joint) and pitch (from the combined second and third joints).
3. **Position Constraints**: The position is achieved by solving the inverse kinematics using trigonometric identities and linear algebra, considering the orientation constraints.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    roll, pitch, yaw = r

    # θ1 is the yaw component of the desired orientation
    theta1 = yaw

    # Compute the position in the frame after Revolute 1's rotation (θ1)
    cos_theta1 = math.cos(theta1)
    sin_theta1 = math.sin(theta1)
    x_prime = x * cos_theta1 + y * sin_theta1
    z_prime = z

    # Coefficients based on the desired pitch (θ2 + θ3 = pitch)
    cos_p = math.cos(pitch)
    sin_p = math.sin(pitch)
    A = 0.425 - 0.39225 * cos_p
    B = 0.39225 * sin_p
    C = 0.425 + 0.39225 * cos_p
    D = B  # 0.39225 * sin_p

    # Solve the linear system for sinθ2 and cosθ2
    det = A * C - B * D
    if det == 0:
        raise ValueError("Singular matrix, target not reachable")

    sin_theta2 = (C * x_prime - B * z_prime) / det
    cos_theta2 = (A * z_prime - D * x_prime) / det

    theta2 = math.atan2(sin_theta2, cos_theta2)
    theta3 = pitch - theta2

    return (theta1, theta2, theta3)
```

### Explanation
1. **Yaw Calculation (θ1)**: The first joint angle (θ1) is directly set to the desired yaw from the orientation input, as it rotates around the Z-axis.
2. **Position Transformation**: The desired position is transformed into the coordinate frame after the first joint's rotation to simplify subsequent calculations.
3. **Linear System Setup**: Using trigonometric identities and the given link lengths, a system of linear equations is set up to solve for the second joint angle (θ2).
4. **Pitch Constraint**: The third joint angle (θ3) is derived from the desired pitch, ensuring the sum of θ2 and θ3 matches the desired pitch angle.

This approach efficiently combines position and orientation constraints to compute the joint angles, ensuring the end-effector reaches the target pose accurately.