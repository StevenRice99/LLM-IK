To solve this problem, we need to compute the joint angles for a 3-DOF serial manipulator such that the end-effector reaches a specified position and orientation. The solution must account for both position and orientation constraints using the given kinematic structure.

### Approach
1. **Yaw Calculation (θ1)**: The first joint angle (θ1) is set to the desired yaw component of the orientation.
2. **Position Transformation**: The desired position is transformed into a coordinate system after the first joint's rotation to simplify subsequent calculations.
3. **Position Equations**: Using trigonometric identities and the given link lengths, solve for the second joint angle (θ2) while ensuring the transformed position matches the target position.
4. **Orientation Constraint**: The third joint angle (θ3) is calculated to ensure the sum of θ2 and θ3 matches the desired pitch, thus satisfying the orientation constraint.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    roll, pitch, yaw = r

    theta1 = yaw

    # Transform target position to the frame after Revolute 1's rotation
    cos_theta1 = math.cos(theta1)
    sin_theta1 = math.sin(theta1)
    x_prime = x * cos_theta1 + y * sin_theta1
    z_adj = z - 0.01615  # Adjust for the vertical offset between joints

    # Calculate coefficients based on desired pitch
    B = 0.39225
    A = 0.425
    sin_p = math.sin(pitch)
    cos_p = math.cos(pitch)

    # Compute sin(theta2) and cos(theta2) using adjusted z
    sin_theta2 = (x_prime - B * sin_p) / A
    cos_theta2 = (z_adj - B * cos_p) / A

    # Normalize to handle numerical inaccuracies
    norm = math.hypot(sin_theta2, cos_theta2)
    if norm == 0:
        raise ValueError("No valid solution for theta2")
    sin_theta2 /= norm
    cos_theta2 /= norm

    theta2 = math.atan2(sin_theta2, cos_theta2)
    theta3 = pitch - theta2

    return (theta1, theta2, theta3)
```

### Explanation
1. **Yaw Calculation**: The first joint angle (θ1) is directly set to the desired yaw from the orientation input, as it rotates around the Z-axis.
2. **Position Transformation**: The target position (x, y, z) is transformed into a new coordinate system after applying the rotation from the first joint. This simplifies the subsequent calculations by aligning the problem into a more manageable frame of reference.
3. **Z-Adjustment**: The z-coordinate is adjusted by subtracting the vertical offset (0.01615 m) between the second and third joints to account for the kinematic structure.
4. **Position Equations**: The transformed coordinates are used to derive equations for the second joint angle (θ2) using trigonometric identities and the given link lengths. These equations ensure the vertical and horizontal components of the position are satisfied.
5. **Orientation Constraint**: The third joint angle (θ3) is calculated to ensure the sum of θ2 and θ3 matches the desired pitch, thus satisfying the orientation constraint.

This approach efficiently combines position and orientation constraints to compute the joint angles, ensuring the end-effector reaches the target pose accurately. The solution uses normalization to handle numerical stability, ensuring valid joint angles even in edge cases.