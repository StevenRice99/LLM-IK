To solve this problem, we need to compute the joint angles for a 3-DOF serial manipulator such that the end-effector reaches a specified position and orientation. The solution must account for both position and orientation constraints using the given kinematic structure.

### Approach
1. **Yaw Calculation (θ1)**: The first joint angle (θ1) is directly set to the desired yaw from the orientation input, as it rotates around the Z-axis.
2. **Position Transformation**: The desired position is transformed into the coordinate frame after the first joint's rotation to simplify subsequent calculations.
3. **Pitch Constraint**: The third joint angle (θ3) is derived from the desired pitch, ensuring the sum of θ2 and θ3 matches the desired pitch angle.
4. **Position Equations**: Using trigonometric identities and the given link lengths, solve for the second joint angle (θ2) while ensuring the transformed position matches the target position.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    roll, pitch, yaw = r

    theta1 = yaw

    # Transform target position to the frame after Revolute 1's rotation
    cos_theta1 = math.cos(theta1)
    sin_theta1 = math.sin(theta1)
    x_prime = x * cos_theta1 + y * sin_theta1
    z_prime = z

    # Calculate theta2 using the z-coordinate equation
    numerator_z = z_prime + 0.1197 - 0.39225 * math.cos(pitch)
    cos_theta2 = numerator_z / 0.425
    cos_theta2 = max(min(cos_theta2, 1.0), -1.0)
    theta2 = math.acos(cos_theta2)
    theta2_alt = -theta2

    # Check both theta2 solutions against the x-coordinate equation
    sin_pitch = math.sin(pitch)
    x_prime_candidate = 0.425 * math.sin(theta2) + 0.39225 * sin_pitch
    x_prime_candidate_alt = 0.425 * math.sin(theta2_alt) + 0.39225 * sin_pitch

    if abs(x_prime_candidate - x_prime) < 1e-6:
        theta2_final = theta2
    elif abs(x_prime_candidate_alt - x_prime) < 1e-6:
        theta2_final = theta2_alt
    else:
        error1 = abs(x_prime_candidate - x_prime)
        error2 = abs(x_prime_candidate_alt - x_prime)
        theta2_final = theta2 if error1 < error2 else theta2_alt

    theta3 = pitch - theta2_final

    return (theta1, theta2_final, theta3)
```

### Explanation
1. **Yaw Calculation**: The first joint angle (θ1) is set to the desired yaw component of the orientation, as it directly affects the rotation around the Z-axis.
2. **Position Transformation**: The target position (x, y, z) is transformed into a new coordinate system after applying the rotation from the first joint. This simplifies the subsequent calculations by aligning the problem into a more manageable frame of reference.
3. **Z-Coordinate Equation**: The transformed z-coordinate is used to solve for the second joint angle (θ2) using trigonometric identities and the given link lengths. This ensures the vertical component of the position is satisfied.
4. **X-Coordinate Check**: The transformed x-coordinate is used to validate the correct solution for θ2 between two possible angles derived from the z-coordinate equation. This ensures the horizontal component of the position is satisfied.
5. **Pitch Constraint**: The third joint angle (θ3) is calculated to ensure the sum of θ2 and θ3 matches the desired pitch, thus satisfying the orientation constraint.

This approach efficiently combines position and orientation constraints to compute the joint angles, ensuring the end-effector reaches the target pose accurately.