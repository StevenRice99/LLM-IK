To solve this problem, we need to compute the joint angles for a 3-DOF serial manipulator such that the end-effector reaches a specified position and orientation. The solution must account for both position and orientation constraints using the given kinematic structure.

### Approach
1. **Yaw Calculation (θ1)**: The first joint angle (θ1) is set to the desired yaw component of the orientation.
2. **Position Transformation**: The desired position is transformed into a coordinate system after the first joint's rotation to simplify subsequent calculations.
3. **Linear System Setup**: Using trigonometric identities and the given link lengths, a system of linear equations is set up to solve for the second joint angle (θ2).
4. **Pitch Constraint**: The third joint angle (θ3) is derived from the desired pitch, ensuring the sum of θ2 and θ3 matches the desired pitch angle.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    roll, pitch, yaw = r

    theta1 = yaw

    # Transform target position to the frame after Revolute 1's rotation
    cos_theta1 = math.cos(theta1)
    sin_theta1 = math.sin(theta1)
    x_prime = x * cos_theta1 + y * sin_theta1
    y_prime = -x * sin_theta1 + y * cos_theta1
    k = 0.13585 - 0.1197  # 0.01615
    if not math.isclose(y_prime, k, abs_tol=1e-6):
        raise ValueError("Target position y component incompatible with the manipulator's structure")

    # Calculate coefficients based on desired pitch
    cos_p = math.cos(pitch)
    sin_p = math.sin(pitch)
    A = 0.425 - 0.39225 * cos_p
    B = 0.39225 * sin_p
    C = 0.425 + 0.39225 * cos_p
    D = B  # 0.39225 * sin_p

    # Solve the linear system for sinθ2 and cosθ2
    det = A * C - B * D
    if abs(det) < 1e-6:
        raise ValueError("Singular matrix, target not reachable")

    sin_theta2 = (C * x_prime - B * z) / det
    cos_theta2 = (A * z - D * x_prime) / det

    # Normalize to handle numerical inaccuracies
    norm = math.hypot(sin_theta2, cos_theta2)
    sin_theta2 /= norm
    cos_theta2 /= norm

    theta2 = math.atan2(sin_theta2, cos_theta2)
    theta3 = pitch - theta2

    return (theta1, theta2, theta3)
```

### Explanation
1. **Yaw Calculation**: The first joint angle (θ1) is directly set to the desired yaw from the orientation input, as it rotates around the Z-axis.
2. **Position Transformation**: The target position (x, y, z) is transformed into a new coordinate system after applying the rotation from the first joint. This simplifies the subsequent calculations by aligning the problem into a more manageable frame of reference.
3. **Linear System Setup**: The transformed coordinates are used to derive a system of linear equations involving the second joint angle (θ2). These equations are solved using matrix inversion, ensuring the position constraints are satisfied.
4. **Pitch Constraint**: The third joint angle (θ3) is calculated to ensure the sum of θ2 and θ3 matches the desired pitch, thus satisfying the orientation constraint.

This approach efficiently combines position and orientation constraints to compute the joint angles, ensuring the end-effector reaches the target pose accurately. The solution uses normalization to handle numerical stability, ensuring valid joint angles even in edge cases.