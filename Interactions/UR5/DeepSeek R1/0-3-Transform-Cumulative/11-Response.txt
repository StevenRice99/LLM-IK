To solve this problem, we need to determine the joint angles for a 4-DOF serial manipulator to reach a target position and orientation. The solution involves setting the first joint angle to the target yaw and solving for the remaining joints to achieve the position and remaining orientation components.

### Approach
1. **Set Theta1 to Target Yaw:** The first joint (Revolute 1) is directly set to the target yaw component of the orientation, aligning the arm's yaw with the desired orientation.
2. **Adjust Target Position for TCP Offset:** The target position is adjusted by subtracting the TCP's offset transformed by the target orientation, giving the position of Revolute 4's origin.
3. **Transform Position to Revolute 2's Frame:** The adjusted position is transformed into the coordinate system relative to Revolute 2.
4. **Solve Planar Inverse Kinematics:** Theta2 and theta3 are computed using geometric relationships to reach the transformed position.
5. **Calculate Theta4:** The fourth joint angle is derived from the remaining rotation needed to achieve the target orientation after accounting for the first three joints.

### Solution Code
```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    roll, pitch, yaw = r

    # Theta1 is set to the target yaw component
    theta1 = yaw

    # Compute target rotation matrix
    cr, sr = math.cos(roll), math.sin(roll)
    cp, sp = math.cos(pitch), math.sin(pitch)
    cy, sy = math.cos(yaw), math.sin(yaw)
    R_target = np.array([
        [cy * cp, cy * sp * sr - sy * cr, cy * sp * cr + sy * sr],
        [sy * cp, sy * sp * sr + cy * cr, sy * sp * cr - cy * sr],
        [-sp, cp * sr, cp * cr]
    ])

    # Compute TCP's offset in world frame using target orientation
    offset_tcp = np.array([0, 0.093, 0])
    offset_world = R_target.dot(offset_tcp)
    P4 = np.array([x_target, y_target, z_target]) - offset_world
    x_p4, y_p4, z_p4 = P4

    # Calculate Revolute 2's position in the base frame
    revolute2_x = 0.13585 * math.sin(theta1)
    revolute2_y = 0.13585 * math.cos(theta1)
    revolute2_z = 0.0

    # Compute position relative to Revolute 2
    x_rel = x_p4 - revolute2_x
    y_rel = y_p4 - revolute2_y
    z_rel = z_p4 - revolute2_z

    # Rotate into the plane defined by theta1 (around Z by -theta1)
    x_plane = x_rel * math.cos(theta1) + y_rel * math.sin(theta1)
    z_plane = z_rel

    # Solve planar inverse kinematics for theta2 and theta3
    L1 = 0.425
    L2 = 0.39225
    d_sq = x_plane**2 + z_plane**2
    cos_theta3 = (d_sq - L1**2 - L2**2) / (2 * L1 * L2)
    cos_theta3 = np.clip(cos_theta3, -1.0, 1.0)
    theta3 = math.acos(cos_theta3)
    theta3_alt = -theta3

    solutions = []
    for t3 in [theta3, theta3_alt]:
        alpha = math.atan2(z_plane, x_plane)
        beta = math.atan2(L2 * math.sin(t3), L1 + L2 * math.cos(t3))
        theta2 = alpha - beta
        solutions.append((theta2, t3))

    # Select solution with minimum orientation error
    best_error = float('inf')
    best_theta2, best_theta3 = 0.0, 0.0
    for theta2, theta3 in solutions:
        R1 = np.array([
            [math.cos(theta1), -math.sin(theta1), 0],
            [math.sin(theta1), math.cos(theta1), 0],
            [0, 0, 1]
        ])
        R2 = np.array([
            [math.cos(theta2), 0, math.sin(theta2)],
            [0, 1, 0],
            [-math.sin(theta2), 0, math.cos(theta2)]
        ])
        R3 = np.array([
            [math.cos(theta3), 0, math.sin(theta3)],
            [0, 1, 0],
            [-math.sin(theta3), 0, math.cos(theta3)]
        ])
        R_123 = R1.dot(R2).dot(R3)
        R_remaining = R_123.T.dot(R_target)

        # Extract theta4 from R_remaining (Y-rotation)
        theta4 = math.atan2(R_remaining[0, 2], R_remaining[2, 2])

        # Compute orientation error
        R4 = np.array([
            [math.cos(theta4), 0, math.sin(theta4)],
            [0, 1, 0],
            [-math.sin(theta4), 0, math.cos(theta4)]
        ])
        R_total = R_123.dot(R4)
        orient_error = np.linalg.norm(R_total - R_target)

        if orient_error < best_error:
            best_error = orient_error
            best_theta2, best_theta3 = theta2, theta3

    # Final theta4 calculation
    R1 = np.array([
        [math.cos(theta1), -math.sin(theta1), 0],
        [math.sin(theta1), math.cos(theta1), 0],
        [0, 0, 1]
    ])
    R2 = np.array([
        [math.cos(best_theta2), 0, math.sin(best_theta2)],
        [0, 1, 0],
        [-math.sin(best_theta2), 0, math.cos(best_theta2)]
    ])
    R3 = np.array([
        [math.cos(best_theta3), 0, math.sin(best_theta3)],
        [0, 1, 0],
        [-math.sin(best_theta3), 0, math.cos(best_theta3)]
    ])
    R_123 = R1.dot(R2).dot(R3)
    R_remaining = R_123.T.dot(R_target)
    theta4 = math.atan2(R_remaining[0, 2], R_remaining[2, 2])

    return (theta1, best_theta2, best_theta3, theta4)
```

### Explanation
1. **Theta1 Setting:** The first joint angle (theta1) is set to the target yaw, aligning the arm's yaw with the desired orientation.
2. **TCP Offset Adjustment:** The TCP's offset is transformed into the world frame using the target orientation and subtracted from the target position to find the position of Revolute 4's origin.
3. **Position Transformation:** The adjusted position is transformed into Revolute 2's coordinate system and rotated into the plane defined by theta1.
4. **Planar Inverse Kinematics:** Theta2 and theta3 are computed using geometric relationships to reach the transformed position, considering both elbow-up and elbow-down configurations.
5. **Theta4 Calculation:** The fourth joint angle is derived from the remaining rotation needed to achieve the target orientation, ensuring accurate alignment of the end-effector.

This approach ensures that the robot reaches the desired position and orientation by correctly handling coordinate transformations and rotation matrices, addressing the issues highlighted in the feedback.