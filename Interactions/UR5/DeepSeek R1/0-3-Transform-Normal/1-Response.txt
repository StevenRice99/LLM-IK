To solve this problem, we need to determine the joint angles (q1, q2, q3, q4) for a 4-DOF robotic arm to reach a specified position (p) and orientation (r) in 3D space. The solution involves both geometric and algebraic computations to decouple the position and orientation components.

### Approach
1. **Position Calculation**:
   - **q1 (First Joint)**: Determine the angle to align the arm with the target's projection on the XY-plane using `atan2(py, px)`.
   - **q2 and q3 (Second and Third Joints)**: Solve using inverse kinematics for a 2R planar arm in the plane defined by q1. This involves calculating the radial distance and height from the target position and solving the geometric equations for the planar arm.

2. **Orientation Calculation**:
   - **q4 (Fourth Joint)**: Adjust the orientation by computing the remaining rotation needed after positioning. This involves converting the desired orientation from RPY angles to a rotation matrix, adjusting for the initial rotation (q1), and extracting the necessary Y-axis rotation.

### Solution Code
```python
import numpy as np
from math import atan2, acos, sin, cos, sqrt

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    px, py, pz = p
    rx, ry, rz = r

    # Calculate q1 based on the desired position's XY components
    q1 = atan2(py, px)

    # Calculate A and D for the planar arm in the rotated frame
    A = px * cos(q1) + py * sin(q1)
    D = sqrt(A**2 + pz**2)
    L1 = 0.425
    L2 = 0.39225

    # Solve for q3 using the law of cosines
    cos_q3 = (D**2 - L1**2 - L2**2) / (2 * L1 * L2)
    cos_q3 = np.clip(cos_q3, -1.0, 1.0)
    q3 = acos(cos_q3)

    # Solve for q2 using geometric relationships
    q2 = atan2(A, pz) - atan2(L2 * sin(q3), L1 + L2 * cos(q3))

    # Compute the desired rotation matrix from RPY angles
    crx, srx = cos(rx), sin(rx)
    cry, sry = cos(ry), sin(ry)
    crz, srz = cos(rz), sin(rz)

    R_rx = np.array([[1, 0, 0], [0, crx, -srx], [0, srx, crx]])
    R_ry = np.array([[cry, 0, sry], [0, 1, 0], [-sry, 0, cry]])
    R_rz = np.array([[crz, -srz, 0], [srz, crz, 0], [0, 0, 1]])
    R_desired = R_rz @ R_ry @ R_rx

    # Adjust for q1 and extract the required Y rotation
    R = np.array([[cos(-q1), -sin(-q1), 0], [sin(-q1), cos(-q1), 0], [0, 0, 1]]) @ R_desired
    theta = atan2(R[0, 2], R[0, 0])
    q4 = theta - q2 - q3

    return (q1, q2, q3, q4)
```

### Explanation
1. **Position Calculation**:
   - **q1** is determined by the direction of the target in the XY-plane.
   - **q2 and q3** are computed using the inverse kinematics for a 2R planar arm, considering the radial distance (A) and height (D) derived from the target position.

2. **Orientation Calculation**:
   - The desired orientation (given as RPY angles) is converted to a rotation matrix.
   - This matrix is adjusted by the initial rotation (q1) to isolate the remaining rotation around the Y-axis.
   - The remaining Y-axis rotation (theta) is used to determine q4, completing the orientation adjustment.

This approach efficiently decouples the position and orientation problems, leveraging geometric and algebraic methods to find the joint angles required for the robotic arm to reach the target.