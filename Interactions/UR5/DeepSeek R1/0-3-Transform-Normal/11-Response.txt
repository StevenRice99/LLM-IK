To solve this problem, we need to determine the joint angles (q1, q2, q3, q4) for a 4-DOF robotic arm to reach a specified position (p) and orientation (r) in 3D space. The solution involves both geometric and algebraic computations to decouple the position and orientation components, while considering multiple possible solutions for joint angles to ensure the correct configuration is selected.

### Approach
1. **Position Calculation**:
   - **q1 (First Joint)**: Compute two possible angles (q1 and q1 + Ï€) to align the arm with the target's projection on the XY-plane using `atan2(py, px)`.
   - **Adjusted Target Position**: Adjust the target position by subtracting the positions of link2 and TCP offsets in the rotated frame to isolate the planar arm's target in the XZ plane.
   - **q2 and q3 (Second and Third Joints)**: Solve using inverse kinematics for a planar arm in the XZ plane, considering both elbow-up and elbow-down configurations.

2. **Orientation Calculation**:
   - **q4 (Fourth Joint)**: Compute the desired rotation matrix from the given RPY angles in the correct order (Z * Y * X). Adjust for the initial rotation (q1) and extract the remaining Y-axis rotation to determine q4.

### Solution Code
```python
import numpy as np
from math import atan2, acos, sin, cos, sqrt, pi

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    px, py, pz = p
    rx, ry, rz = r

    # Calculate possible q1 solutions with proper offset compensation
    q1_1 = atan2(py - 0.093 * sin(atan2(py, px)), px - 0.093 * cos(atan2(py, px)))
    q1_2 = (q1_1 + pi) % (2 * pi)

    # Try both q1 candidates with full kinematic chain compensation
    for q1 in [q1_1, q1_2]:
        # Transform target to link2 coordinate system
        link2_x = 0.13585 * sin(q1)
        link2_y = 0.13585 * cos(q1)
        tcp_x = 0.093 * sin(q1)
        tcp_y = 0.093 * cos(q1)
        
        adj_x = px - link2_x - tcp_x
        adj_y = py - link2_y - tcp_y
        adj_z = pz

        # Project into planar arm's working plane
        A = sqrt(adj_x**2 + adj_y**2)
        D = sqrt(A**2 + adj_z**2)
        L1 = 0.425
        L2 = 0.39225

        if not (abs(L1 - L2) - 1e-6 <= D <= L1 + L2 + 1e-6):
            continue

        # Solve for q3 with two solutions
        cos_q3 = (D**2 - L1**2 - L2**2) / (2 * L1 * L2)
        cos_q3 = np.clip(cos_q3, -1.0, 1.0)
        q3 = acos(cos_q3)

        for q3_sign in [1, -1]:
            q3_val = q3 * q3_sign
            alpha = atan2(L2 * sin(q3_val), L1 + L2 * cos(q3_val))
            q2 = atan2(A, adj_z) - alpha

            # Compute orientation components
            crx, srx = cos(rx), sin(rx)
            cry, sry = cos(ry), sin(ry)
            crz, srz = cos(rz), sin(rz)

            R = np.array([
                [crz*cry - srz*srx*sry, -srz*crx, crz*sry + srz*srx*cry],
                [srz*cry + crz*srx*sry, crz*crx, srz*sry - crz*srx*cry],
                [-crx*sry, srx, crx*cry]
            ])  # Proper ZYX rotation matrix

            # Compensate for base rotation
            R_comp = np.array([
                [cos(-q1), -sin(-q1), 0],
                [sin(-q1), cos(-q1), 0],
                [0, 0, 1]
            ]) @ R

            # Extract final y-rotation component
            theta = atan2(R_comp[0, 2], R_comp[0, 0])
            q4 = (theta - q2 - q3_val) % (2*pi)
            if q4 > pi:
                q4 -= 2*pi

            # Validate solution by checking orientation consistency
            if abs(q4 - (theta - q2 - q3_val)) < 1e-6:
                return (q1, q2, q3_val, q4)

    # Fallback to primary solution (shouldn't be reached per problem statement)
    q1 = atan2(py, px)
    return (q1, 0.0, 0.0, 0.0)
```

### Explanation
1. **Position Calculation**:
   - **q1** is computed considering both the link2 and TCP offsets in the base frame, providing two potential solutions to handle directional ambiguity.
   - The target position is adjusted by subtracting both link2 and TCP offsets in the rotated coordinate system to isolate the planar arm problem.
   - **q2 and q3** are solved using geometric relationships with consideration for both elbow-up and elbow-down configurations.

2. **Orientation Calculation**:
   - The desired orientation matrix is constructed using the correct ZYX rotation order to match URDF's RPY convention.
   - The computed rotation matrix is adjusted by the base joint rotation (q1) to isolate the remaining Y-axis rotation.
   - The final joint angle (q4) is calculated by subtracting the contributions of previous joints from the extracted Y-rotation component.

This solution properly accounts for the full kinematic chain including all link offsets, uses the correct rotation order for orientation calculation, and systematically explores multiple valid joint configurations to find a solution that satisfies both position and orientation requirements.