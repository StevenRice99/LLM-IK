To solve this problem, we need to determine the joint angles (q1, q2, q3, q4) for a 4-DOF robotic arm to reach a specified position (p) and orientation (r) in 3D space. The solution involves both geometric and algebraic computations to decouple the position and orientation components, while correctly accounting for the kinematic chain and rotation order.

### Approach
1. **Position Calculation**:
   - **q1 (First Joint)**: Determine the angle to align the arm with the target's projection on the XY-plane using `atan2(py, px)`.
   - **Adjusted Target Position**: Adjust the target position by subtracting the position of the second joint (after q1 rotation) to isolate the planar arm's target in the XZ plane.
   - **q2 and q3 (Second and Third Joints)**: Solve using inverse kinematics for a planar arm in the XZ plane, considering the adjusted target position and effective link lengths.

2. **Orientation Calculation**:
   - **q4 (Fourth Joint)**: Compute the desired rotation matrix from the given RPY angles in the correct order (Z * Y * X). Adjust for the initial rotation (q1) and extract the remaining Y-axis rotation to determine q4.

### Solution Code
```python
import numpy as np
from math import atan2, acos, sin, cos, sqrt

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    px, py, pz = p
    rx, ry, rz = r

    # Calculate q1 based on the desired position's XY components
    q1 = atan2(py, px)

    # Adjust target position by link2's offset in the rotated frame
    link2_offset_x = 0.13585 * sin(q1)
    link2_offset_y = 0.13585 * cos(q1)
    adjusted_p = (px - link2_offset_x, py - link2_offset_y, pz)

    # Project adjusted position into the planar arm's XZ plane (after q1 rotation)
    A = sqrt(adjusted_p[0]**2 + adjusted_p[1]**2)
    D = sqrt(A**2 + adjusted_p[2]**2)
    L1 = 0.425
    L2 = 0.39225 + 0.093  # Combining link4 and TCP's Y offset

    # Solve for q3 using the law of cosines
    cos_q3 = (D**2 - L1**2 - L2**2) / (2 * L1 * L2)
    cos_q3 = np.clip(cos_q3, -1.0, 1.0)
    q3 = acos(cos_q3)

    # Solve for q2 using geometric relationships
    q2 = atan2(A, adjusted_p[2]) - atan2(L2 * sin(q3), L1 + L2 * cos(q3))

    # Compute the desired rotation matrix from RPY angles (Z * Y * X)
    crx, srx = cos(rx), sin(rx)
    cry, sry = cos(ry), sin(ry)
    crz, srz = cos(rz), sin(rz)

    R_rx = np.array([[1, 0, 0], [0, crx, -srx], [0, srx, crx]])
    R_ry = np.array([[cry, 0, sry], [0, 1, 0], [-sry, 0, cry]])
    R_rz = np.array([[crz, -srz, 0], [srz, crz, 0], [0, 0, 1]])
    R_desired = R_rz @ R_ry @ R_rx  # Correct order: Z * Y * X

    # Adjust for q1 and extract the required Y rotation
    R_z_inv = np.array([[cos(-q1), -sin(-q1), 0], [sin(-q1), cos(-q1), 0], [0, 0, 1]])
    R_rot = R_z_inv @ R_desired

    # Extract Y rotation angle from R_rot
    theta = atan2(R_rot[0, 2], R_rot[0, 0])
    q4 = theta - q2 - q3

    return (q1, q2, q3, q4)
```

### Explanation
1. **Position Calculation**:
   - **q1** aligns the arm with the target's XY projection.
   - The target position is adjusted by subtracting the position of the second joint in the base frame, which is computed using the first joint's angle (q1).
   - **q2 and q3** are determined using the inverse kinematics for a planar arm in the XZ plane, considering the adjusted target position and effective link lengths (combining link4 and the TCP's offset).

2. **Orientation Calculation**:
   - The desired orientation (given as RPY angles) is converted to a rotation matrix in the correct order (Z * Y * X).
   - This matrix is adjusted by the initial rotation (q1) to isolate the remaining rotation around the Y-axis.
   - The remaining Y-axis rotation (theta) is used to determine q4, completing the orientation adjustment.

This approach efficiently decouples the position and orientation problems, leveraging geometric and algebraic methods while correctly accounting for the kinematic chain and rotation order to find the joint angles required for the robotic arm to reach the target.