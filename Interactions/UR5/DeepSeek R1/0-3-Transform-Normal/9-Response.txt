To solve this problem, we need to determine the joint angles (q1, q2, q3, q4) for a 4-DOF robotic arm to reach a specified position (p) and orientation (r) in 3D space. The solution involves both geometric and algebraic computations to decouple the position and orientation components, while considering multiple possible solutions for joint angles to ensure the correct configuration is selected.

### Approach
1. **Position Calculation**:
   - **q1 (First Joint)**: Compute two possible angles (q1 and q1 + π) to align the arm with the target's projection on the XY-plane using `atan2(py, px)`.
   - **Adjusted Target Position**: Adjust the target position by subtracting the position of the second joint (after q1 rotation) to isolate the planar arm's target in the XZ plane.
   - **q2 and q3 (Second and Third Joints)**: Solve using inverse kinematics for a planar arm in the XZ plane, considering both elbow-up and elbow-down configurations.

2. **Orientation Calculation**:
   - **q4 (Fourth Joint)**: Compute the desired rotation matrix from the given RPY angles in the correct order (Z * Y * X). Adjust for the initial rotation (q1) and extract the remaining Y-axis rotation to determine q4.

### Solution Code
```python
import numpy as np
from math import atan2, acos, sin, cos, sqrt, pi

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    px, py, pz = p
    rx, ry, rz = r

    # Calculate possible q1 solutions
    q1_1 = atan2(py, px)
    q1_2 = (q1_1 + pi) % (2 * pi)  # Normalize to [-pi, pi]

    # Try both q1 candidates
    for q1 in [q1_1, q1_2]:
        # Adjust target position for link2's offset
        link2_x = 0.13585 * sin(q1)
        link2_y = 0.13585 * cos(q1)
        adj_x = px - link2_x
        adj_y = py - link2_y
        adj_z = pz

        # Project into planar arm's XZ plane
        A = sqrt(adj_x**2 + adj_y**2)
        D = sqrt(A**2 + adj_z**2)
        L1 = 0.425
        L2 = 0.39225 + 0.093  # link4 Z + TCP Y

        if not (abs(L1 - L2) - 1e-6 <= D <= L1 + L2 + 1e-6):
            continue  # Skip unreachable configurations

        # Solve for q3 (elbow up/down)
        cos_q3 = (D**2 - L1**2 - L2**2) / (2 * L1 * L2)
        cos_q3 = np.clip(cos_q3, -1.0, 1.0)
        q3 = acos(cos_q3)

        for q3_sign in [1, -1]:
            q3_val = q3 * q3_sign
            # Calculate q2
            alpha = atan2(L2 * sin(q3_val), L1 + L2 * cos(q3_val))
            q2 = atan2(A, adj_z) - alpha

            # Compute desired orientation matrix (Z * Y * X)
            crx, srx = cos(rx), sin(rx)
            cry, sry = cos(ry), sin(ry)
            crz, srz = cos(rz), sin(rz)

            R_rx = np.array([[1, 0, 0], [0, crx, -srx], [0, srx, crx]])
            R_ry = np.array([[cry, 0, sry], [0, 1, 0], [-sry, 0, cry]])
            R_rz = np.array([[crz, -srz, 0], [srz, crz, 0], [0, 0, 1]])
            R_desired = R_rz @ R_ry @ R_rx

            # Adjust for q1 and extract Y rotation
            R_z_inv = np.array([[cos(-q1), -sin(-q1), 0], [sin(-q1), cos(-q1), 0], [0, 0, 1]])
            R_rot = R_z_inv @ R_desired

            theta = atan2(R_rot[0, 2], R_rot[0, 0])
            q4 = (theta - q2 - q3_val) % (2 * pi)
            if q4 > pi:
                q4 -= 2 * pi

            # Return first valid solution
            return (q1, q2, q3_val, q4)

    # Fallback (shouldn't be reached as per problem statement)
    return (q1_1, 0.0, 0.0, 0.0)
```

### Explanation
1. **Position Calculation**:
   - **q1** is computed in two possible directions (q1 and q1 + π) to handle the ambiguity in the `atan2` function.
   - The target position is adjusted by subtracting the position of the second joint, which is computed using the first joint's angle (q1).
   - **q2 and q3** are determined using the inverse kinematics for a planar arm in the XZ plane, considering both elbow-up and elbow-down configurations.

2. **Orientation Calculation**:
   - The desired orientation (given as RPY angles) is converted to a rotation matrix in the correct order (Z * Y * X).
   - This matrix is adjusted by the initial rotation (q1) to isolate the remaining rotation around the Y-axis.
   - The remaining Y-axis rotation (theta) is used to determine q4, ensuring the correct end-effector orientation.

This approach efficiently handles multiple possible joint configurations and selects the first valid solution, ensuring the robotic arm reaches the target position and orientation.