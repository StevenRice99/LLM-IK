To solve the inverse kinematics for the 4-DOF manipulator considering both position and orientation, we first determine the yaw (q1) from the target orientation. We then adjust the remaining joints (q2, q3, q4) to achieve the target position and pitch. The solution leverages the existing position-based approach and adjusts q4 to meet the orientation requirement.

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    target_yaw = r[2]
    target_pitch = r[1]
    
    q1 = target_yaw
    
    # Transform position to the frame after q1 rotation
    x_rot = x * np.cos(q1) + y * np.sin(q1)
    y_rot = -x * np.sin(q1) + y * np.cos(q1)
    z_rot = z
    
    # Solve for q3 using the transformed position
    numerator = x_rot**2 + y_rot**2 + z_rot**2 - 0.346395
    denominator = 0.3341625
    cos_q3 = numerator / denominator
    cos_q3 = np.clip(cos_q3, -1.0, 1.0)
    q3 = np.arccos(cos_q3)
    
    # Solve for q2
    A = 0.425 + 0.39225 * np.cos(q3)
    B = 0.39225 * np.sin(q3)
    S_squared = x_rot**2 + y_rot**2 - 0.10915**2
    S = np.sqrt(S_squared) if S_squared >= 0 else 0.0
    C = z_rot
    numerator_q2 = S * A - C * B
    denominator_q2 = S * B + C * A
    q2 = np.arctan2(numerator_q2, denominator_q2)
    
    # Adjust q4 to meet the target pitch
    q4 = target_pitch - (q2 + q3)
    
    return (q1, q2, q3, q4)
```