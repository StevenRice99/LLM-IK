To solve this problem, we need to determine the joint angles (q1, q2, q3, q4) for a 4-DOF robotic arm to reach a specified position and orientation. The key challenge is correctly accounting for both the position and orientation constraints, particularly the yaw (q1) and pitch (sum of q2, q3, q4).

### Approach
1. **Calculate q1 Candidates**: Consider two possible q1 values (target yaw and target yaw + π) to handle different configurations.
2. **Transform Position**: For each q1 candidate, transform the target position into the coordinate system aligned with q1.
3. **Solve for q2 and q3**: Use geometric relationships to solve for q2 and q3, considering both elbow-up and elbow-down configurations.
4. **Calculate q4**: Determine q4 to achieve the target pitch by adjusting for the sum of q2 and q3.
5. **Select Valid Solution**: Check joint limits and select the valid solution that best matches the target pitch.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    target_roll, target_pitch, target_yaw = r

    best_error = float('inf')
    best_sol = None

    # Consider two possible q1 candidates (original and flipped by π)
    for q1 in [target_yaw, target_yaw + np.pi]:
        # Transform target position to the frame after q1 rotation
        cos_q1 = np.cos(q1)
        sin_q1 = np.sin(q1)
        x_rot = x_target * cos_q1 + y_target * sin_q1
        y_rot = -x_target * sin_q1 + y_target * cos_q1
        z_rot = z_target

        # Solve for q3
        numerator = x_rot**2 + y_rot**2 + z_rot**2 - 0.346395
        denominator = 0.3341625
        if np.isclose(denominator, 0):
            continue
        cos_q3 = numerator / denominator
        cos_q3 = np.clip(cos_q3, -1.0, 1.0)
        q3_pos = np.arccos(cos_q3)
        q3_neg = -q3_pos

        # Solve for q2 for both q3 configurations
        solutions = []
        for q3 in [q3_pos, q3_neg]:
            A = 0.425 + 0.39225 * np.cos(q3)
            B = 0.39225 * np.sin(q3)
            S_squared = x_rot**2 + y_rot**2 - 0.10915**2
            S = np.sqrt(S_squared) if S_squared >= 0 else 0.0
            C = z_rot

            numerator_q2 = S * A - C * B
            denominator_q2 = S * B + C * A
            if np.isclose(denominator_q2, 0) and np.isclose(numerator_q2, 0):
                continue
            q2 = np.arctan2(numerator_q2, denominator_q2)
            solutions.append((q2, q3))

        # Evaluate solutions for this q1
        for q2, q3 in solutions:
            q4 = target_pitch - (q2 + q3)
            # Normalize angles to [-π, π]
            q1_norm = (q1 + np.pi) % (2 * np.pi) - np.pi
            q2_norm = (q2 + np.pi) % (2 * np.pi) - np.pi
            q3_norm = (q3 + np.pi) % (2 * np.pi) - np.pi
            q4_norm = (q4 + np.pi) % (2 * np.pi) - np.pi

            # Check joint limits
            if (-6.2831853 <= q1_norm <= 6.2831853 and
                -6.2831853 <= q2_norm <= 6.2831853 and
                -6.2831853 <= q3_norm <= 6.2831853 and
                -6.2831853 <= q4_norm <= 6.2831853):
                # Calculate pitch error
                current_pitch = q2_norm + q3_norm + q4_norm
                error = abs((current_pitch - target_pitch + np.pi) % (2 * np.pi) - np.pi)
                if error < best_error:
                    best_error = error
                    best_sol = (q1_norm, q2_norm, q3_norm, q4_norm)

    if best_sol is not None:
        return best_sol

    # Fallback to first solution (problem states all targets are reachable)
    q1 = target_yaw
    cos_q1 = np.cos(q1)
    sin_q1 = np.sin(q1)
    x_rot = x_target * cos_q1 + y_target * sin_q1
    y_rot = -x_target * sin_q1 + y_target * cos_q1
    z_rot = z_target

    numerator = x_rot**2 + y_rot**2 + z_rot**2 - 0.346395
    denominator = 0.3341625
    cos_q3 = numerator / denominator
    cos_q3 = np.clip(cos_q3, -1.0, 1.0)
    q3 = np.arccos(cos_q3)
    A = 0.425 + 0.39225 * np.cos(q3)
    B = 0.39225 * np.sin(q3)
    S_squared = x_rot**2 + y_rot**2 - 0.10915**2
    S = np.sqrt(S_squared) if S_squared >= 0 else 0.0
    C = z_rot
    numerator_q2 = S * A - C * B
    denominator_q2 = S * B + C * A
    q2 = np.arctan2(numerator_q2, denominator_q2)
    q4 = target_pitch - (q2 + q3)

    q1_norm = (q1 + np.pi) % (2 * np.pi) - np.pi
    q2_norm = (q2 + np.pi) % (2 * np.pi) - np.pi
    q3_norm = (q3 + np.pi) % (2 * np.pi) - np.pi
    q4_norm = (q4 + np.pi) % (2 * np.pi) - np.pi
    return (q1_norm, q2_norm, q3_norm, q4_norm)
```

### Explanation
1. **q1 Candidates**: The algorithm considers two possible values for q1 (target yaw and target yaw + π) to handle different configurations.
2. **Position Transformation**: The target position is transformed into the coordinate system aligned with each q1 candidate.
3. **Elbow Configurations**: Both possible solutions for q3 (positive and negative) are considered to handle different arm configurations.
4. **Pitch Adjustment**: The fourth joint angle (q4) is calculated to achieve the target pitch by compensating for the sum of q2 and q3.
5. **Solution Selection**: Valid solutions are checked against joint limits, and the one with the minimal pitch error is selected to ensure accuracy.

This approach ensures that both position and orientation constraints are met by considering multiple joint configurations and validating against joint limits.