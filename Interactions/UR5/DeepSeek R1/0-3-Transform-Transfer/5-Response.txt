To solve this problem, we need to determine the joint angles (q1, q2, q3, q4) for a 4-DOF robotic arm to reach a specified position and orientation. The key challenge is correctly accounting for both the position and orientation constraints, particularly the yaw (q1) and pitch (sum of q2, q3, q4).

### Approach
1. **Calculate q1 Based on Orientation**: The first joint (q1) is derived from the target orientation's roll, pitch, and yaw using trigonometric relationships.
2. **Determine Theta (Sum of q2, q3, q4)**: The sum of the Y-axis joint angles (theta) is calculated based on the target orientation's roll and pitch.
3. **Solve for q2 and q3**: Using the transformed position (adjusted for q1), solve for q2 and q3 using geometric relationships.
4. **Calculate q4**: The fourth joint angle (q4) is determined to achieve the target pitch by adjusting for the sum of q2 and q3.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    r_roll, r_pitch, r_yaw = r

    # Calculate q1 based on target orientation
    cos_r_roll = np.cos(r_roll)
    cos_r_pitch = np.cos(r_pitch)
    sin_r_yaw = np.sin(r_yaw)
    cos_r_yaw = np.cos(r_yaw)

    numerator_q1 = cos_r_pitch * sin_r_yaw
    denominator_q1 = cos_r_yaw / cos_r_roll if cos_r_roll != 0 else 0
    q1 = np.arctan2(numerator_q1, denominator_q1) if denominator_q1 != 0 else np.sign(numerator_q1) * np.pi/2

    # Calculate possible theta values (q2 + q3 + q4)
    cos_theta = cos_r_roll * cos_r_pitch
    cos_theta = np.clip(cos_theta, -1.0, 1.0)
    theta = np.arccos(cos_theta)
    theta_options = [theta, -theta]

    # Transform target position to the frame after q1 rotation
    cos_q1 = np.cos(q1)
    sin_q1 = np.sin(q1)
    x_rot = x_target * cos_q1 + y_target * sin_q1
    y_rot = -x_target * sin_q1 + y_target * cos_q1
    z_rot = z_target

    # Solve for possible q2, q3, q4 combinations
    solutions = []
    for theta in theta_options:
        # Solve for q3
        numerator_q3 = x_rot**2 + y_rot**2 + z_rot**2 - 0.346395
        denominator_q3 = 0.3341625
        cos_q3 = numerator_q3 / denominator_q3
        cos_q3 = np.clip(cos_q3, -1.0, 1.0)
        if np.isclose(denominator_q3, 0):
            continue
        q3_pos = np.arccos(cos_q3)
        q3_neg = -q3_pos

        for q3 in [q3_pos, q3_neg]:
            # Solve for q2
            A = 0.425 + 0.39225 * np.cos(q3)
            B = 0.39225 * np.sin(q3)
            S_squared = x_rot**2 + y_rot**2 - 0.10915**2
            S = np.sqrt(S_squared) if S_squared >= 0 else 0.0
            C = z_rot

            numerator_q2 = S * A - C * B
            denominator_q2 = S * B + C * A
            if np.isclose(denominator_q2, 0) and np.isclose(numerator_q2, 0):
                continue
            q2 = np.arctan2(numerator_q2, denominator_q2)

            # Calculate q4
            q4 = theta - (q2 + q3)
            solutions.append((q1, q2, q3, q4))

    # Select valid solution within joint limits
    valid_solutions = []
    for sol in solutions:
        q1_val, q2_val, q3_val, q4_val = sol
        if (-6.2831853 <= q1_val <= 6.2831853 and
            -6.2831853 <= q2_val <= 6.2831853 and
            -6.2831853 <= q3_val <= 6.2831853 and
            -6.2831853 <= q4_val <= 6.2831853):
            valid_solutions.append(sol)

    # Choose the first valid solution (problem states all targets are reachable)
    if valid_solutions:
        return valid_solutions[0]
    else:
        return solutions[0] if solutions else (0.0, 0.0, 0.0, 0.0)
```

### Explanation
1. **Orientation Calculation**: The first joint angle (q1) is derived from the target orientation's yaw and pitch, considering the trigonometric relationships between the target's roll, pitch, and yaw.
2. **Theta Calculation**: The sum of the Y-axis joint angles (theta) is determined based on the target's roll and pitch, allowing for both positive and negative configurations.
3. **Position Transformation**: The target position is transformed into the coordinate system aligned with the first joint's rotation to simplify solving for the remaining joints.
4. **Joint Angle Solutions**: Multiple potential solutions for q2 and q3 are considered, and q4 is adjusted to meet the required theta. Valid solutions are checked against joint limits to ensure feasibility.

This approach ensures that both position and orientation constraints are met by considering geometric relationships and multiple joint configurations.