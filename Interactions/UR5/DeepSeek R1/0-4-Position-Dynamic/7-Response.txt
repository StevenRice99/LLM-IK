To solve this problem, we need to compute the joint angles for a 5-DOF robotic arm such that the end-effector (TCP) reaches a specified target position. The solution involves breaking down the problem into two parts: solving for the first two joints (theta1 and theta2) to position the third joint, and then solving for the last three joints (theta3, theta4, and theta5) to reach the target from the third joint's position.

### Approach
1. **First Two Joints (theta1 and theta2):** Use geometric inverse kinematics to position Revolute 3 such that the remaining joints can reach the target. This involves calculating the angles based on the target position and the known link lengths.
2. **Last Three Joints (theta3, theta4, theta5):** Transform the target position into the coordinate frame of Revolute 3 and solve for the angles using a planar inverse kinematics approach, considering the link lengths from Revolute 3 to the TCP. Adjust for the fixed y-offset in Revolute 5's position.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x_target, y_target, z_target = p

    # Constants from URDF
    d1 = 0.13585  # Revolute 2's y offset
    a2 = 0.425    # Revolute 3's z offset
    d2 = 0.1197   # Revolute 3's y offset (absolute value)
    a3 = 0.39225  # Revolute 4's z offset
    d4 = 0.093    # Revolute 5's y offset
    d5 = 0.09465  # TCP's z offset

    # Solve for theta1 and theta2 to position Revolute 3
    link2_length = math.sqrt(a2**2 + d2**2)
    dz = z_target - d1
    cos_theta2 = dz / link2_length
    cos_theta2 = max(min(cos_theta2, 1.0), -1.0)
    theta2 = math.acos(cos_theta2)
    sin_theta2 = math.sin(theta2)

    A = a2 * sin_theta2
    B = d2
    denominator = A**2 + B**2
    C = (A * x_target + B * y_target) / denominator
    S = (-B * x_target + A * y_target) / denominator
    theta1 = math.atan2(S, C)

    # Calculate position of Revolute 3 (P3) in base frame
    x3 = A * math.cos(theta1) - B * math.sin(theta1)
    y3 = A * math.sin(theta1) + B * math.cos(theta1)
    z3 = a2 * cos_theta2 + d1

    # Vector from P3 to target in base frame
    vx = x_target - x3
    vy = y_target - y3
    vz = z_target - z3

    # Transform vector to Revolute 3's local frame
    # Rotate by -theta2 around Y
    vx_rot_y = vx * math.cos(theta2) - vz * math.sin(theta2)
    vz_rot_y = vx * math.sin(theta2) + vz * math.cos(theta2)
    vy_rot_y = vy

    # Rotate by -theta1 around Z
    vx_local = vx_rot_y * math.cos(theta1) + vy_rot_y * math.sin(theta1)
    vy_local = -vx_rot_y * math.sin(theta1) + vy_rot_y * math.cos(theta1)
    vz_local = vz_rot_y

    # Adjust for fixed y-offset in Revolute 5's position
    vy_adjusted = vy_local - d4
    effective_distance = math.sqrt(vx_local**2 + vy_adjusted**2 + (vz_local - a3)**2)
    L1 = d5  # TCP's z offset
    L2 = math.hypot(a3, d4)  # Effective length from Revolute 3 to Revolute 5

    cos_theta4 = (effective_distance**2 - L1**2 - L2**2) / (2 * L1 * L2)
    cos_theta4 = max(min(cos_theta4, 1.0), -1.0)
    theta4 = math.acos(cos_theta4)
    sin_theta4 = math.sin(theta4)

    # Solve for theta3 using adjusted x and z components
    x_ik = vx_local
    z_ik = vz_local - a3
    A_ik = L1 + L2 * math.cos(theta4)
    B_ik = L2 * math.sin(theta4)
    denominator_theta3 = A_ik**2 + B_ik**2
    if denominator_theta3 == 0:
        theta3 = 0.0
    else:
        sin_theta3 = (A_ik * x_ik - B_ik * z_ik) / denominator_theta3
        cos_theta3 = (B_ik * x_ik + A_ik * z_ik) / denominator_theta3
        theta3 = math.atan2(sin_theta3, cos_theta3)

    # Theta5 is set to 0 as orientation is not considered for position
    theta5 = 0.0

    return (theta1, theta2, theta3, theta4, theta5)
```

### Explanation
1. **First Two Joints (theta1 and theta2):** The angles are computed using geometric relationships to position Revolute 3 such that the remaining links can reach the target. This involves solving for the angles using the target coordinates and the link lengths.
2. **Position of Revolute 3:** The coordinates of Revolute 3 are calculated using the forward kinematics of the first two joints.
3. **Vector Transformation:** The vector from Revolute 3 to the target is transformed into the local coordinate frame of Revolute 3 by rotating by -theta2 around Y and then by -theta1 around Z.
4. **Adjustment for Fixed Y-Offset:** The y-component of the vector in Revolute 3's frame is adjusted to account for the fixed y-offset in Revolute 5's position.
5. **Last Three Joints (theta3, theta4, theta5):** Using the transformed coordinates, the angles are computed using a planar inverse kinematics approach, considering the effective length from Revolute 3 to the TCP. Theta5 is set to 0 as the problem only requires positioning, not orientation.

This approach efficiently breaks down the problem into manageable parts, leveraging geometric relationships and adjusting for fixed offsets to compute the required joint angles.