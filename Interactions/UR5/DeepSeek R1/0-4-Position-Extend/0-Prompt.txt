<INSTRUCTIONS>
You are tasked with producing a closed-form analytical solution for the inverse kinematics of the 5 degrees-of-freedom serial manipulator solving for the position of the TCP as detailed in the "DETAILS" section by completing the Python function provided in the "CODE" section. The "Position" and "Orientation" columns represent link coordinates in local space relative to their parent link. The positions are from the "xyz" attribute and the orientations are the "rpy" attribute from each link's "origin" element parsed from the URDF. The "Axis" column in the table represents the rotational axis of the revolute links; return their values in radians and their limits are in radians. Do not write any code to run or test the method, as this will be handled for you. Assume all targets given as inputs to the method will be reachable, and as such do not write code to check if the target is reachable. You may use any methods included in Python, NumPy, and SymPy to write your solution except for any optimization methods. To help you, a solution for solving the sub-chain of the first 4 links is provided in the "EXISTING" section. This code solved the sub-chain assuming link 5 was the position being solved for. You can use this solution as a starting point to extend for the entire chain. You may respond by either completing the inverse kinematics method or calling either of the two provided functions in the "FUNCTIONS" section to help you develop your solution. If you call a function, you will be provided another response and chance to complete the inverse kinematics method. You may only call a single function per response.
</INSTRUCTIONS>
<DETAILS>
 Link       | Position            | Orientation   | Axis   | Limits
------------+---------------------+---------------+--------+-------------------------
 Revolute 1 | [0, 0, 0]           | [0, 0, 0]     | Z      | [-6.2831853, 6.2831853]
 Revolute 2 | [0, 0.13585, 0]     | [0, 0, 0]     | Y      | [-6.2831853, 6.2831853]
 Revolute 3 | [0, -0.1197, 0.425] | [0, 0, 0]     | Y      | [-6.2831853, 6.2831853]
 Revolute 4 | [0, 0, 0.39225]     | [0, 0, 0]     | Y      | [-6.2831853, 6.2831853]
 Revolute 5 | [0, 0.093, 0]       | [0, 0, 0]     | Z      | [-6.2831853, 6.2831853]
 TCP        | [0, 0, 0.09465]     | [0, 0, 0]     |        |
</DETAILS>
<CODE>
def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
</CODE>
<EXISTING>
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    D = 0.13585 - 0.1197 + 0.093
    L1 = 0.425
    a = 0.39225
    numerator = x ** 2 + y ** 2 + z ** 2 - D ** 2 - L1 ** 2 - a ** 2
    denominator = 2 * L1 * a
    if abs(denominator) < 1e-06:
        raise ValueError('Denominator is zero')
    cos_theta3 = numerator / denominator
    cos_theta3 = np.clip(cos_theta3, -1.0, 1.0)
    theta3_1 = np.arccos(cos_theta3)
    theta3_2 = -theta3_1
    solutions = []
    for theta3 in [theta3_1, theta3_2]:
        C1 = L1 + a * np.cos(theta3)
        C2 = a * np.sin(theta3)
        A_squared = x ** 2 + y ** 2 - D ** 2
        if A_squared < 0:
            continue
        for A_sign in [1, -1]:
            A = A_sign * np.sqrt(A_squared)
            denom = C1 ** 2 + C2 ** 2
            if denom == 0:
                continue
            sin_theta2 = (C1 * A - C2 * z) / denom
            cos_theta2 = (C2 * A + C1 * z) / denom
            if abs(sin_theta2) > 1 or abs(cos_theta2) > 1:
                continue
            theta2 = np.arctan2(sin_theta2, cos_theta2)
            denom_theta1 = A ** 2 + D ** 2
            if denom_theta1 == 0:
                continue
            cos_theta1 = (A * x + D * y) / denom_theta1
            sin_theta1 = (-D * x + A * y) / denom_theta1
            theta1 = np.arctan2(sin_theta1, cos_theta1)
            solutions.append((theta1, theta2, theta3))
    if not solutions:
        raise ValueError('No valid solutions found')
    theta1, theta2, theta3 = min(solutions, key=lambda s: abs(s[2]))
    return (theta1, theta2, theta3, 0.0)
</EXISTING>
<FUNCTIONS>
	<USAGE>
	To use a function, response with the format denoted in the "FORMAT" section of the function.
	</USAGE>
	<FORWARD_KINEMATICS>
		<FORMAT>
		FORWARD_KINEMATICS joint1 joint2 joint3 joint4 joint5
		</FORMAT>
		<DESCRIPTION>
		Test the forward kinematics of the robot, returning the position and orientation of all links in world space after setting the joint values where "joint1", "joint2", "joint3", "joint4", and "joint4" are the joint values as floats.
		</DESCRIPTION>
	</FORWARD_KINEMATICS>
	<TEST_SOLUTION>
		<FORMAT>
		TEST_SOLUTION positionX positionY positionZ
		</FORMAT>
		<DESCRIPTION>
		Returns the position and orientation of all links in world space after testing your current inverse kinematics solution code where "positionX", "positionY", and "positionZ" are the target position.
		</DESCRIPTION>
	</TEST_SOLUTION>
</FUNCTIONS>