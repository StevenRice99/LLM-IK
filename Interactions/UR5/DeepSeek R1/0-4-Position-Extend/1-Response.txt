To solve the inverse kinematics for the 5-DOF manipulator, we need to adjust the existing solution for the first four joints to account for the TCP's offset and include the fifth joint. The fifth joint (Revolute 5) does not affect the position of the TCP, so it can be set to zero. The existing solution is modified by extending the length of the fourth link to include the TCP's offset, allowing the first four joints to position the TCP correctly.

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x, y, z = p
    a3 = 0.425
    a4 = 0.39225 + 0.09465  # Account for TCP offset
    numerator = x**2 + y**2 + z**2 - (a3**2 + a4**2)
    denominator = 2 * a3 * a4
    cos_q3 = numerator / denominator
    cos_q3 = np.clip(cos_q3, -1.0, 1.0)
    q3 = np.arccos(cos_q3)
    A = a3 + a4 * np.cos(q3)
    B = a4 * np.sin(q3)
    S_squared = x**2 + y**2 - 0.10915**2
    S = np.sqrt(S_squared) if S_squared >= 0 else 0.0
    C = z
    numerator_q2 = S * A - C * B
    denominator_q2 = S * B + C * A
    q2 = np.arctan2(numerator_q2, denominator_q2)
    phi = np.arctan2(0.10915, S) if S != 0 else np.pi / 2
    q1 = np.arctan2(y, x) - phi
    q1 = (q1 + np.pi) % (2 * np.pi) - np.pi
    q4 = 0.0
    q5 = 0.0  # Fifth joint does not affect position
    return (q1, q2, q3, q4, q5)
```