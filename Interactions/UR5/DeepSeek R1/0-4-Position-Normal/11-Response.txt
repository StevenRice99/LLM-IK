To solve the inverse kinematics for the 5-DOF manipulator accurately, we need to properly model the kinematic chain and geometric relationships. Here's the corrected solution:

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x, y, z = p

    # Calculate theta1 considering Revolute 2's offset
    theta1 = np.arctan2(y, x)
    for _ in range(3):  # Iterative refinement
        x_r2 = 0.13585 * np.sin(theta1)
        y_r2 = 0.13585 * np.cos(theta1)
        dx = x - x_r2
        dy = y - y_r2
        theta1 = np.arctan2(dy, dx)

    # Position of Revolute 2 in world frame
    x_r2 = 0.13585 * np.sin(theta1)
    y_r2 = 0.13585 * np.cos(theta1)
    z_r2 = 0.0

    # Vector from Revolute 2 to target
    dx = x - x_r2
    dy = y - y_r2
    dz = z - z_r2 - 0.1197  # Account for Revolute 3's Y offset

    # Convert to arm plane coordinates
    r = np.hypot(dx, dy)
    h = dz

    # Kinematic parameters
    L1 = 0.425       # Revolute 2-3
    L2 = 0.39225     # Revolute 3-4
    L3 = np.hypot(0.093, 0.09465)  # Revolute 4-TCP offset
    eff_length = np.hypot(L2, L3)  # Effective planar length

    # Target distance in arm plane
    D = np.hypot(r, h)

    # Law of cosines for theta3 (elbow-up configuration)
    cos_theta3 = (D**2 - L1**2 - eff_length**2) / (2 * L1 * eff_length)
    theta3 = -np.arccos(np.clip(cos_theta3, -1.0, 1.0))

    # Calculate angles for triangle solution
    alpha = np.arctan2(h, r)
    sin_beta = (eff_length * np.sin(-theta3)) / D
    beta = np.arcsin(np.clip(sin_beta, -1.0, 1.0))
    theta2 = alpha - beta

    # Calculate wrist angle with TCP offset compensation
    theta4 = -theta2 - theta3 - np.arctan2(0.093, 0.09465)

    # Normalize angles to [-π, π]
    angles = np.array([theta1, theta2, theta3, theta4, 0.0])
    angles = (angles + np.pi) % (2*np.pi) - np.pi

    return tuple(angles)
```

**Key Corrections:**
1. **Proper Offset Handling:** Accounts for Revolute 3's Y-axis offset (0.1197m) in the Z calculation
2. **Effective Length Calculation:** Uses vector magnitude for Revolute 4-TCP offset
3. **Elbow Configuration:** Explicitly uses negative theta3 for elbow-up configuration
4. **Angle Composition:** Correctly composes wrist angle with TCP offset compensation
5. **Angle Normalization:** Ensures all angles stay within [-π, π] range
6. **Iterative Refinement:** Maintains theta1 calculation with 3 iterations for accuracy

This solution properly models the kinematic chain from Revolute 2 through to the TCP, accounting for all link offsets and using geometric relationships that match the test case requirements.