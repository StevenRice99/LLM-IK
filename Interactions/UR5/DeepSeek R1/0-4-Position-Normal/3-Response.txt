To solve the inverse kinematics for the 5-DOF manipulator, we need to correctly account for the link lengths and the geometric relationships between the joints. The previous solution had errors in calculating the effective link lengths and the planar arm angles. Here's the corrected approach:

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x, y, z = p

    # Calculate theta1 to align with the target's x-y projection, considering Revolute 2's offset
    theta1 = np.arctan2(y, x)

    # Position of Revolute 2's origin in world frame
    x_r2 = 0.13585 * np.sin(theta1)
    y_r2 = 0.13585 * np.cos(theta1)
    z_r2 = 0.0

    # Vector from Revolute 2 to target
    dx = x - x_r2
    dy = y - y_r2
    dz = z - z_r2

    # Project into the arm's plane (radial distance and height)
    r = np.hypot(dx, dy)
    z_planar = dz

    # Corrected effective link lengths (Revolute 2 to 3, 3 to 4, and 4 to TCP)
    L1 = 0.425
    L2 = 0.39225
    L3 = np.hypot(0.093, 0.39225 + 0.09465)  # Revolute 4 to TCP

    # Solve for planar arm angles using corrected geometric approach
    D = np.hypot(r, z_planar)
    
    # Law of cosines for theta3
    cos_theta3 = (D**2 - L1**2 - L2**2 - L3**2) / (2 * L1 * L2)
    theta3 = np.arccos(np.clip(cos_theta3, -1.0, 1.0))

    # Angle to target in the plane
    alpha = np.arctan2(z_planar, r)

    # Law of sines for intermediate angle
    sin_beta = (L2 * np.sin(theta3)) / D
    beta = np.arcsin(np.clip(sin_beta, -1.0, 1.0))

    theta2 = alpha - beta

    # Angle from link3 to target
    gamma = np.arctan2(L3, L1 + L2 * np.cos(theta3) + L3 * np.cos(theta3 + theta2))
    theta4 = - (theta2 + theta3 + gamma)

    # Theta5 doesn't affect position, set to zero
    theta5 = 0.0

    return (theta1, theta2, theta3, theta4, theta5)
```

**Key Improvements:**
1. **Corrected Link Lengths:** Properly accounts for the full distance from Revolute 4 to TCP using combined translations.
2. **Geometric Solution:** Uses law of cosines and sines to compute joint angles in the planar arm while considering the end effector offset.
3. **Angle Adjustments:** Computes theta4 based on the geometric relationship between links to properly align the TCP with the target.