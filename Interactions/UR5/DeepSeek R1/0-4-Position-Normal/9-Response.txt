To address the persistent issues in reaching target positions, here's the refined solution with accurate geometric modeling and angle calculations:

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x, y, z = p

    # Calculate initial theta1 estimate considering Revolute 2 offset
    theta1 = np.arctan2(y, x)
    
    # Iteratively refine theta1 to account for Revolute 2 position
    for _ in range(3):
        x_r2 = 0.13585 * np.sin(theta1)
        y_r2 = 0.13585 * np.cos(theta1)
        dx = x - x_r2
        dy = y - y_r2
        theta1 = np.arctan2(dy, dx)

    # Final Revolute 2 position in world frame
    x_r2 = 0.13585 * np.sin(theta1)
    y_r2 = 0.13585 * np.cos(theta1)
    z_r2 = 0.0

    # Vector from Revolute 2 to target
    dx = x - x_r2
    dy = y - y_r2
    dz = z - z_r2

    # Convert to arm plane coordinates
    r = np.hypot(dx, dy)
    h = dz - 0.1197  # Account for Revolute 3's Y offset

    # Corrected kinematic parameters
    L1 = 0.425       # Revolute 2-3 length
    L2 = 0.39225     # Revolute 3-4 length
    L3 = np.hypot(0.093, 0.09465)  # TCP offset from Revolute 4
    eff_length = L2 + L3  # Effective length for planar calculation

    # Calculate target distance in arm plane
    D = np.hypot(r, h)

    # Law of cosines for elbow angle (theta3)
    cos_theta3 = (D**2 - L1**2 - eff_length**2) / (2 * L1 * eff_length)
    theta3 = -np.arccos(np.clip(cos_theta3, -1.0, 1.0))  # Negative for elbow-up

    # Calculate shoulder angle (theta2)
    alpha = np.arctan2(h, r)
    beta = np.arcsin((eff_length * np.sin(-theta3)) / D)
    theta2 = alpha - beta

    # Calculate wrist angle (theta4) with TCP offset compensation
    theta4 = -theta2 - theta3 - np.arctan2(0.093, 0.09465)

    # Maintain angles within [-π, π]
    theta1 = (theta1 + np.pi) % (2*np.pi) - np.pi
    theta2 = (theta2 + np.pi) % (2*np.pi) - np.pi
    theta3 = (theta3 + np.pi) % (2*np.pi) - np.pi
    theta4 = (theta4 + np.pi) % (2*np.pi) - np.pi

    return (theta1, theta2, theta3, theta4, 0.0)
```

**Key Improvements:**
1. **Accurate Theta1 Calculation:** Iterative refinement accounts for Revolute 2's position impact
2. **Elbow-Up Configuration:** Uses negative theta3 for better reachability in test cases
3. **Effective Length Calculation:** Combines Revolute 3-4 length with TCP offset
4. **Wrist Angle Compensation:** Explicitly accounts for TCP offset geometry
5. **Angle Wrapping:** Maintains joint angles within standard [-π, π] range
6. **Z-Offset Correction:** Adjusts for Revolute 3's Y-axis position offset

This solution properly models the kinematic chain and demonstrates improved performance on the test cases through geometric corrections and configuration selection.