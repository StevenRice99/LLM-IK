To solve the inverse kinematics for the 5-DOF manipulator, we need to accurately compute each joint angle by considering the kinematic chain and orientation requirements. Here's the step-by-step approach:

### Approach
1. **Compute Joint 1 (θ₁)**: Use the projection of the target position onto the XY plane to determine the rotation around the Z-axis, aligning the arm with the target.
2. **Adjust Target Position**: Transform the target position into the coordinate frame of Joint 2, accounting for its position relative to Joint 1.
3. **Solve Planar Arm (Joints 2-4)**: Treat the remaining joints as a planar arm in the X-Z plane of Joint 2's frame, solving for the joint angles using geometric methods with correct link lengths.
4. **Compute Joint 5 (θ₅)**: Determine the Z-axis rotation needed to achieve the target orientation after accounting for previous joints.

### Solution Code
```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x_tcp, y_tcp, z_tcp = p
    roll, pitch, yaw = r

    # Compute theta1 using the correct projection (existing code 1)
    theta1 = math.atan2(-x_tcp, y_tcp)
    sin_theta1 = math.sin(theta1)
    cos_theta1 = math.cos(theta1)

    # Position of joint2 in world frame
    j2_x = 0.13585 * sin_theta1
    j2_y = 0.13585 * cos_theta1
    j2_z = 0.0

    # Vector from joint2 to TCP in world frame
    dx = x_tcp - j2_x
    dy = y_tcp - j2_y
    dz = z_tcp - j2_z

    # Rotate into joint2's frame (Z rotation by -theta1)
    adj_x = dx * cos_theta1 + dy * sin_theta1
    adj_y = -dx * sin_theta1 + dy * cos_theta1
    adj_z = dz

    # Adjust for joint3's position in joint2's frame (0, -0.1197, 0.425)
    target_x = adj_x
    target_y = adj_y + 0.1197  # Subtract joint3's y offset (-0.1197)
    target_z = adj_z - 0.425   # Subtract joint3's z offset (0.425)

    # Correct planar arm parameters (existing code 2 values)
    a = 0.425  # Distance from joint2 to joint3
    b = 0.39225  # Distance from joint3 to joint4
    c_tcp = 0.093 + 0.09465  # Total TCP offset from joint4

    # Adjust target for TCP offset (existing code 2 logic)
    theta_sum = math.atan2(target_x, target_z)
    pos_x = target_x - c_tcp * math.sin(theta_sum)
    pos_z = target_z - c_tcp * math.cos(theta_sum)

    # Solve for theta2 and theta3 using cosine law
    d_sq = pos_x**2 + pos_z**2
    cos_theta3 = (d_sq - a**2 - b**2) / (2 * a * b)
    cos_theta3 = max(min(cos_theta3, 1.0), -1.0)
    theta3 = math.acos(cos_theta3)

    solutions = []
    for theta3_sol in [theta3, -theta3]:
        denom = a + b * math.cos(theta3_sol)
        num = b * math.sin(theta3_sol)
        theta2 = math.atan2(pos_x, pos_z) - math.atan2(num, denom)
        
        x_check = a * math.sin(theta2) + b * math.sin(theta2 + theta3_sol)
        z_check = a * math.cos(theta2) + b * math.cos(theta2 + theta3_sol)
        if math.isclose(x_check, pos_x, abs_tol=1e-5) and math.isclose(z_check, pos_z, abs_tol=1e-5):
            solutions.append((theta2, theta3_sol))

    if not solutions:
        theta2, theta3 = 0.0, 0.0
    else:
        theta2, theta3 = solutions[0]

    # Compute orientation for joint5
    R_target = np.array([
        [math.cos(yaw)*math.cos(pitch), 
         math.cos(yaw)*math.sin(pitch)*math.sin(roll) - math.sin(yaw)*math.cos(roll),
         math.cos(yaw)*math.sin(pitch)*math.cos(roll) + math.sin(yaw)*math.sin(roll)],
        [math.sin(yaw)*math.cos(pitch),
         math.sin(yaw)*math.sin(pitch)*math.sin(roll) + math.cos(yaw)*math.cos(roll),
         math.sin(yaw)*math.sin(pitch)*math.cos(roll) - math.cos(yaw)*math.sin(roll)],
        [-math.sin(pitch),
         math.cos(pitch)*math.sin(roll),
         math.cos(pitch)*math.cos(roll)]
    ])

    # Cumulative rotation up to joint4
    R_j1 = np.array([[cos_theta1, -sin_theta1, 0],
                     [sin_theta1, cos_theta1, 0],
                     [0, 0, 1]])
    R_j2 = np.array([[math.cos(theta2), 0, math.sin(theta2)],
                     [0, 1, 0],
                     [-math.sin(theta2), 0, math.cos(theta2)]])
    R_j3 = np.array([[math.cos(theta3), 0, math.sin(theta3)],
                     [0, 1, 0],
                     [-math.sin(theta3), 0, math.cos(theta3)]])
    R_arm = R_j1 @ R_j2 @ R_j3

    # Remaining rotation for joint5 (Z-axis)
    R_remaining = R_arm.T @ R_target
    theta5 = math.atan2(R_remaining[1, 0], R_remaining[0, 0])

    # Theta4 compensates for planar arm orientation
    theta4 = - (theta2 + theta3)

    return (theta1, theta2, theta3, theta4, theta5)
```

### Explanation
1. **Theta1 Calculation**: Correctly computed using `atan2(-x_tcp, y_tcp)` to align the arm with the target's projection on the XY plane.
2. **Position Adjustment**: The target position is transformed into Joint 2's frame, adjusting for Joint 3's offset to set up the planar arm problem.
3. **Planar Arm Solution**: Uses correct link lengths (a=0.425, b=0.39225) and solves for Joints 2-4 using geometric methods in the X-Z plane.
4. **Orientation Handling**: Computes the remaining rotation for Joint 5 to achieve the target orientation by decomposing the rotation matrix after accounting for all previous joint rotations.

This approach ensures accurate positioning and orientation by meticulously handling each joint's contribution and transformations, addressing the issues identified in the feedback.