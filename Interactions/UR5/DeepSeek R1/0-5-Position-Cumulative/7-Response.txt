```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    x_tcp, y_tcp, z_tcp = p

    # Constants for the last three links and TCP
    a = 0.0823  # TCP's y-offset from Revolute 6
    L1 = 0.093   # Revolute 5's y-offset from Revolute 4
    L2 = 0.09465 # Revolute 6's z-offset from Revolute 5

    # Compute wrist center (Revolute 4's position) considering fixed orientation
    x_wc = x_tcp + 0.1753  # 0.093 + 0.0823
    y_wc = y_tcp
    z_wc = z_tcp - L2

    # Solve first three joints (theta1, theta2, theta3)
    k = 0.01615  # Net Y offset from Revolute 1 to Revolute 3
    k_sq = k ** 2
    x, y, z = x_wc, y_wc, z_wc

    # Corrected parameters for the first three links
    numerator_cosθ3 = x**2 + y**2 + z**2 - 0.36635  # Sum of squares of link lengths
    denominator_cosθ3 = 0.3334125  # 2*0.425*0.39225
    cosθ3 = numerator_cosθ3 / denominator_cosθ3
    cosθ3 = max(min(cosθ3, 1.0), -1.0)
    θ3 = math.acos(cosθ3)

    C = 0.425 + 0.39225 * math.cos(θ3)
    D = 0.39225 * math.sin(θ3)
    A_sq = x**2 + y**2 - k_sq
    A = math.sqrt(A_sq) if A_sq >= 0 else 0.0
    denominator_theta2 = C**2 + D**2
    sinθ2 = (C * A - D * z) / denominator_theta2
    cosθ2 = (C * z + D * A) / denominator_theta2
    θ2 = math.atan2(sinθ2, cosθ2)

    denominator_theta1 = x**2 + y**2
    if denominator_theta1 == 0:
        θ1 = 0.0
    else:
        numerator_cosθ1 = A * x + k * y
        numerator_sinθ1 = A * y - k * x
        θ1 = math.atan2(numerator_sinθ1, numerator_cosθ1)

    # Compute rotation matrix R_03
    R_z_theta1 = np.array([
        [math.cos(θ1), -math.sin(θ1), 0],
        [math.sin(θ1), math.cos(θ1), 0],
        [0, 0, 1]
    ])
    R_y_theta2 = np.array([
        [math.cos(θ2), 0, math.sin(θ2)],
        [0, 1, 0],
        [-math.sin(θ2), 0, math.cos(θ2)]
    ])
    R_y_theta3 = np.array([
        [math.cos(θ3), 0, math.sin(θ3)],
        [0, 1, 0],
        [-math.sin(θ3), 0, math.cos(θ3)]
    ])
    R_03 = R_z_theta1 @ R_y_theta2 @ R_y_theta3

    # Desired rotation matrix (90 degrees around Z)
    R_desired = np.array([
        [0, -1, 0],
        [1, 0, 0],
        [0, 0, 1]
    ])

    # Compute R_36 = R_03.T @ R_desired
    R_03_T = np.transpose(R_03)
    R_36 = R_03_T @ R_desired

    # Decompose R_36 into Euler angles (ZYZ)
    # Calculate theta5 using the arccos of R_36[2,2]
    theta5 = math.acos(R_36[2, 2])
    theta5 = math.copysign(theta5, R_36[2, 2])

    # Handle singularities
    if abs(theta5) < 1e-6:
        theta4 = 0.0
        theta6 = math.atan2(-R_36[0, 1], R_36[0, 0])
    else:
        theta4 = math.atan2(R_36[1, 2], R_36[0, 2])
        theta6 = math.atan2(R_36[2, 1], -R_36[2, 0])

    return (θ1, θ2, θ3, theta4, theta5, theta6)
```

**Explanation:**
1. **Wrist Center Calculation:** Correctly computes the wrist center by adjusting the TCP position based on the fixed orientation and link lengths.
2. **First Three Joints:** Uses corrected parameters derived from the actual link lengths to solve for θ1, θ2, and θ3.
3. **Last Three Joints:** Computes the required rotations using the orientation matrix decomposition to achieve the desired 90° Z rotation, handling both singular and non-singular cases.