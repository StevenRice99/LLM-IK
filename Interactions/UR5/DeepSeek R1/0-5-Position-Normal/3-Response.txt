To solve the inverse kinematics for the given 6-DOF robot, we first determine the wrist center position by subtracting the fixed offset from the target TCP position. The first three joint angles (θ₁, θ₂, θ₃) are calculated to position the wrist center, and the last three joints (θ₄, θ₅, θ₆) are set to maintain the fixed orientation of the TCP.

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    # Offset from wrist center (Revolute4) to TCP in world frame when orientation is fixed
    offset = np.array([-0.1753, 0, 0.09465])
    wx, wy, wz = np.array(p) - offset  # Wrist center position
    
    # Solve theta1 using the x and y components of the wrist center
    theta1 = np.arctan2(wy, wx)
    
    # Position of Revolute2's origin
    x2 = -0.13585 * np.sin(theta1)
    y2 = 0.13585 * np.cos(theta1)
    z2 = 0.0
    
    # Vector from Revolute2 to wrist center
    dx = wx - x2
    dy = wy - y2
    dz = wz - z2
    distance = np.sqrt(dx**2 + dy**2 + dz**2)
    
    # Link lengths (Revolute2 to Revolute3 and Revolute3 to Revolute4)
    a = np.sqrt(0.1197**2 + 0.425**2)  # ~0.4415
    b = 0.39225
    c = distance
    
    # Law of cosines to find angles
    gamma = np.arccos((a**2 + b**2 - c**2) / (2 * a * b))
    theta3 = np.pi - gamma
    
    alpha = np.arcsin((a * np.sin(gamma)) / c)
    theta2 = np.arctan2(dz, np.sqrt(dx**2 + dy**2)) - alpha
    
    # Fixed orientation for last three joints (maintain TCP orientation)
    theta4 = 0.0
    theta5 = np.pi / 2
    theta6 = 0.0
    
    return (theta1, theta2, theta3, theta4, theta5, theta6)
```