To solve the inverse kinematics for the 6-DOF manipulator, we need to accurately compute joint angles by considering both position and orientation while respecting the kinematic chain and joint constraints. Here's the refined approach:

### Approach
1. **Wrist Center Calculation**: Correctly adjust the target position by accounting for the TCP offset transformed by the target orientation matrix.
2. **First Joint (θ₁)**: Determine using the projected wrist center position in the XY-plane.
3. **Second and Third Joints (θ₂, θ₃)**: Use geometric analysis in the plane defined by θ₁, incorporating link lengths and offsets from the URDF.
4. **Last Three Joints (θ₄, θ₅, θ₆)**: Decompose the orientation matrix using the correct Y-Z-Y Euler angle sequence for the wrist joints.

### Solution Code
```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    target_pos = np.array(p)
    roll, pitch, yaw = r

    # Convert target orientation to rotation matrix (ZYX Euler angles)
    cr, cp, cy = math.cos(roll), math.cos(pitch), math.cos(yaw)
    sr, sp, sy = math.sin(roll), math.sin(pitch), math.sin(yaw)
    R_target = np.array([
        [cy * cp, cy * sp * sr - sy * cr, cy * sp * cr + sy * sr],
        [sy * cp, sy * sp * sr + cy * cr, sy * sp * cr - cy * sr],
        [-sp, cp * sr, cp * cr]
    ])

    # Calculate wrist center position (accounting for TCP offset)
    tcp_offset = np.array([0, 0.0823, 0])
    wrist_center = target_pos - R_target @ tcp_offset

    # Solve theta1 using wrist center projection on XY-plane
    x, y, z = wrist_center
    theta1 = math.atan2(y, x)

    # Transform wrist center to the plane after theta1 rotation
    r_xy = math.hypot(x, y)
    x_prime = r_xy
    z_prime = z - 0.13585  # Adjust for joint2's Y offset in local frame

    # Solve theta2 and theta3 using corrected link lengths
    a = 0.425  # Joint2 to joint3 Z component
    b = 0.39225  # Joint3 to joint4 Z component
    d_sq = x_prime**2 + z_prime**2
    cos_theta3 = (d_sq - a**2 - b**2) / (2 * a * b)
    cos_theta3 = np.clip(cos_theta3, -1.0, 1.0)
    theta3 = math.acos(cos_theta3)

    # Two possible configurations (elbow up/down)
    theta3_alt = -theta3
    theta2 = math.atan2(x_prime, z_prime) - math.atan2(b * math.sin(theta3), a + b * math.cos(theta3))
    theta2_alt = math.atan2(x_prime, z_prime) - math.atan2(b * math.sin(theta3_alt), a + b * math.cos(theta3_alt))

    # Select valid configuration based on position error
    pos1 = a * math.sin(theta2) + b * math.sin(theta2 + theta3)
    pos2 = a * math.sin(theta2_alt) + b * math.sin(theta2_alt + theta3_alt)
    if abs(pos1 - x_prime) + abs(a * math.cos(theta2) + b * math.cos(theta2 + theta3) - z_prime) > \
       abs(pos2 - x_prime) + abs(a * math.cos(theta2_alt) + b * math.cos(theta2_alt + theta3_alt) - z_prime):
        theta2, theta3 = theta2_alt, theta3_alt

    # Compute orientation for wrist joints (Y-Z-Y Euler angles)
    R_theta1 = np.array([
        [math.cos(theta1), -math.sin(theta1), 0],
        [math.sin(theta1), math.cos(theta1), 0],
        [0, 0, 1]
    ])
    R_theta2_theta3 = np.array([
        [math.cos(theta2 + theta3), 0, math.sin(theta2 + theta3)],
        [0, 1, 0],
        [-math.sin(theta2 + theta3), 0, math.cos(theta2 + theta3)]
    ])
    R_base = R_theta1 @ R_theta2_theta3
    R_wrist = R_base.T @ R_target

    # Y-Z-Y decomposition
    theta5 = math.acos(R_wrist[1, 1])
    if abs(math.sin(theta5)) < 1e-6:
        theta4 = 0.0
        theta6 = math.atan2(-R_wrist[0, 2], R_wrist[2, 2])
    else:
        theta4 = math.atan2(R_wrist[2, 1], -R_wrist[0, 1])
        theta6 = math.atan2(R_wrist[1, 2], R_wrist[1, 0])

    return (theta1, theta2, theta3, theta4, theta5, theta6)
```

### Explanation
1. **Wrist Center Calculation**: The TCP's offset is transformed by the target orientation and subtracted from the target position to find the wrist center in the world frame.
2. **First Joint (θ₁)**: Calculated using the arctangent of the wrist center's x and y coordinates, aligning the arm in the correct direction.
3. **Second and Third Joints (θ₂, θ₃)**: Solved geometrically in the plane defined by θ₁, considering link lengths and selecting the configuration (elbow-up/down) that minimizes position error.
4. **Wrist Orientation (θ₄, θ₅, θ₆)**: The remaining rotation is decomposed using Y-Z-Y Euler angles to match the joint axes (Y for joint4, Z for joint5, Y for joint6), ensuring correct orientation alignment.

This approach systematically addresses each joint while respecting the kinematic structure and joint constraints, leading to accurate inverse kinematics solutions.