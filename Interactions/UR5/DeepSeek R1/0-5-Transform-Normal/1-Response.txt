To solve the inverse kinematics for the given 6-DOF manipulator, we need to determine the joint angles that position and orient the TCP at the desired target. The solution involves geometric and algebraic methods to decouple the position and orientation problems.

### Approach
1. **Desired Orientation Matrix**: Convert the target RPY angles into a rotation matrix.
2. **Wrist Center Calculation**: Compute the wrist center position by adjusting the target position based on the TCP's offset and orientation.
3. **Solve for θ1, θ2, θ3**: Use geometric relationships to determine the first three joint angles to position the wrist center.
4. **Solve for θ4, θ5, θ6**: Decompose the rotation matrix from the wrist to the TCP into YZY Euler angles to find the last three joint angles.

### Solution Code
```python
import numpy as np
from numpy import sin, cos, arctan2, sqrt

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    x, y, z = p
    roll, pitch, yaw = r

    # Convert RPY to rotation matrix (XYZ order)
    cr, sr = cos(roll), sin(roll)
    cp, sp = cos(pitch), sin(pitch)
    cy, sy = cos(yaw), sin(yaw)
    R_desired = np.array([
        [cy*cp, cy*sp*sr - sy*cr, cy*sp*cr + sy*sr],
        [sy*cp, sy*sp*sr + cy*cr, sy*sp*cr - cy*sr],
        [-sp, cp*sr, cp*cr]
    ])

    # TCP's fixed rotation (90 degrees around Z)
    R_tcp = np.array([
        [0, -1, 0],
        [1, 0, 0],
        [0, 0, 1]
    ])

    # Calculate wrist center (WC) by adjusting for TCP offset
    d_tcp = np.array([0, 0.0823, 0])
    d_tcp_world = R_desired @ R_tcp.T @ d_tcp
    WC = np.array([x, y, z]) - d_tcp_world
    WC_x, WC_y, WC_z = WC

    # Solve for theta1
    A = 0.1197
    K_sq = WC_x**2 + WC_y**2 - A**2
    K = sqrt(K_sq) if K_sq >= 0 else 0.0
    det_theta1 = A**2 + K**2
    sin_theta1 = (A * WC_x + K * WC_y) / det_theta1
    cos_theta1 = (K * WC_x - A * WC_y) / det_theta1
    theta1 = arctan2(sin_theta1, cos_theta1)

    # Solve for theta2 and theta3
    B, C = 0.425, 0.39225
    D = K
    cos_theta3 = (D**2 + WC_z**2 - B**2 - C**2) / (2 * B * C)
    cos_theta3 = np.clip(cos_theta3, -1.0, 1.0)
    theta3 = arctan2(sqrt(1 - cos_theta3**2), cos_theta3)
    sin_theta3 = sin(theta3)

    A1 = B + C * cos_theta3
    A2 = C * sin_theta3
    det_theta2 = A1**2 + A2**2
    sin_theta2 = (A1 * D + A2 * WC_z) / det_theta2
    cos_theta2 = (A1 * WC_z - A2 * D) / det_theta2
    theta2 = arctan2(sin_theta2, cos_theta2)

    # Compute R_base_to_wrist
    R1 = np.array([
        [cos(theta1), -sin(theta1), 0],
        [sin(theta1), cos(theta1), 0],
        [0, 0, 1]
    ])
    R2 = np.array([
        [cos(theta2), 0, sin(theta2)],
        [0, 1, 0],
        [-sin(theta2), 0, cos(theta2)]
    ])
    R3 = np.array([
        [cos(theta3), 0, sin(theta3)],
        [0, 1, 0],
        [-sin(theta3), 0, cos(theta3)]
    ])
    R_base_to_wrist = R1 @ R2 @ R3

    # Solve for theta4, theta5, theta6 (YZY Euler angles)
    R_wrist = R_base_to_wrist.T @ R_desired @ R_tcp.T
    r21, r22, r23 = R_wrist[1]
    r31, r32, r33 = R_wrist[2,0], R_wrist[2,1], R_wrist[2,2]
    r11, r12, r13 = R_wrist[0,0], R_wrist[0,1], R_wrist[0,2]

    theta5 = arctan2(sqrt(r13**2 + r33**2), r23)
    if abs(sin(theta5)) < 1e-6:
        theta4 = 0.0
        theta6 = arctan2(-r31, r11)
    else:
        theta4 = arctan2(r33 / sin(theta5), r13 / sin(theta5))
        theta6 = arctan2(r22 / sin(theta5), -r21 / sin(theta5))

    return (theta1, theta2, theta3, theta4, theta5, theta6)
```

### Explanation
1. **Desired Orientation**: The target orientation (RPY) is converted to a rotation matrix to facilitate matrix operations.
2. **Wrist Center Calculation**: The wrist center is derived by adjusting the target position for the TCP's offset, considering the desired orientation.
3. **Joint Angles θ1, θ2, θ3**: These angles are computed using geometric relationships and trigonometric identities to position the wrist center.
4. **Joint Angles θ4, θ5, θ6**: The remaining angles are determined by decomposing the rotation matrix from the wrist to the TCP into YZY Euler angles, accounting for the manipulator's joint structure.

This approach efficiently decouples the position and orientation problems, allowing for a closed-form solution using geometric and algebraic methods.