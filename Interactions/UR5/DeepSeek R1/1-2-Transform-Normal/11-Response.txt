To solve this problem, we need to determine the joint angles (q1 and q2) for a 2-DOF serial manipulator to reach a target position and orientation. The solution must correctly handle coordinate system flips due to orientation and accurately apply the law of cosines to compute joint angles.

### Approach
1. **Orientation Handling**: Check if the roll and yaw components of the target orientation are π radians (modulo 2π). If so, invert the X and Z coordinates of the target position to account for the coordinate system flip.
2. **Law of Cosines**: Correctly apply the law of cosines to compute the possible values for q2 based on the target position.
3. **Position Equations**: Derive q1 for each possible q2 configuration (elbow-up and elbow-down) using trigonometric relationships.
4. **Solution Selection**: Choose the joint angles that minimize the error in both position and orientation.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    x_p, y_p, z_p = p
    roll, pitch, yaw = r

    # Correctly check if angles are approximately π (mod 2π)
    def is_pi(angle):
        return abs((angle % (2 * math.pi)) - math.pi) < 1e-6

    if is_pi(roll) and is_pi(yaw):
        x_p = -x_p
        z_p = -z_p

    a = 0.39225  # Length from Revolute 2 to TCP
    b = 0.425    # Length from Revolute 1 to Revolute 2

    # Calculate the squared distance from base to target
    d_sq = x_p**2 + z_p**2
    # Correctly compute cos(q2) using the law of cosines
    numerator = (a**2 + b**2) - d_sq
    denominator = 2 * a * b
    cos_q2 = numerator / denominator
    cos_q2 = max(min(cos_q2, 1.0), -1.0)  # Clamp to valid range

    # Two possible solutions for q2
    if abs(cos_q2 - 1.0) < 1e-6:
        q2_1 = 0.0
    else:
        q2_1 = math.acos(cos_q2)
    q2_2 = -q2_1

    # Compute corresponding q1 for each solution
    def compute_q1(q2):
        A = x_p - a * math.sin(pitch)
        B = z_p - a * math.cos(pitch)
        denom = b
        sin_q1 = A / denom
        cos_q1 = B / denom
        return math.atan2(sin_q1, cos_q1)

    q1_1 = compute_q1(q2_1)
    q1_2 = compute_q1(q2_2)

    # Check which solution matches the orientation
    error1 = abs((q1_1 + q2_1 - pitch + math.pi) % (2 * math.pi) - math.pi)
    error2 = abs((q1_2 + q2_2 - pitch + math.pi) % (2 * math.pi) - math.pi)

    # Select the solution with the smallest error
    if error1 < error2:
        q1, q2 = q1_1, q2_1
    else:
        q1, q2 = q1_2, q2_2

    # Normalize angles to [-π, π)
    q1 = (q1 + math.pi) % (2 * math.pi) - math.pi
    q2 = (q2 + math.pi) % (2 * math.pi) - math.pi

    return (q1, q2)
```

### Explanation
1. **Orientation Adjustment**: The code checks if the roll and yaw components are π radians (mod 2π). If true, it inverts the X and Z coordinates to correct for the coordinate system flip.
2. **Law of Cosines**: The correct formula for the cosine of q2 is applied, ensuring accurate computation of possible joint angles.
3. **Position Equations**: For each q2 solution, q1 is computed using trigonometric functions derived from the target position adjusted for the TCP's offset.
4. **Solution Selection**: The solution that minimizes the error in the sum of q1 and q2 (to match the target pitch) is selected, ensuring both position and orientation constraints are met.
5. **Angle Normalization**: Joint angles are normalized to the range [-π, π) to stay within valid joint limits.