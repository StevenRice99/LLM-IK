To solve this problem, we need to determine the joint angles (q1 and q2) for a 2-DOF serial manipulator that will position the Tool Center Point (TCP) at a given target position and orientation. The solution involves using inverse kinematics based on the geometric configuration of the robot, considering both possible solutions for the joint angles and selecting the appropriate one based on the target position and orientation.

### Approach
1. **Problem Analysis**: The robot has two revolute joints rotating around the Y-axis. The TCP's position is derived from the forward kinematics of these joints. The orientation of the TCP is determined by the sum of the joint angles (q1 + q2) around the Y-axis.
2. **Key Equations**:
   - **Position Equations**: Derived from the forward kinematics, the TCP's position (x, z) in the XZ-plane is a function of the joint angles q1 and q2.
   - **Orientation Equation**: The desired orientation's pitch component (r[1]) must equal the sum of the joint angles (q1 + q2).
3. **Closed-Form Solution**: By using the law of cosines to solve for q2 based on the target position and then computing q1 using the orientation constraint, we ensure the correct solution is selected. This approach considers both possible solutions (elbow up and elbow down) and selects the one that minimizes the error in both position and orientation.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    x_p, y_p, z_p = p
    theta = r[1]
    a = 0.39225  # Length from Revolute 2 to TCP
    b = 0.425    # Length from Revolute 1 to Revolute 2

    # Calculate the squared distance from base to target
    d_sq = x_p**2 + z_p**2
    # Compute cos(q2) using the law of cosines
    numerator = d_sq - a**2 - b**2
    denominator = 2 * a * b
    cos_q2 = numerator / denominator
    cos_q2 = max(min(cos_q2, 1.0), -1.0)  # Clamp to valid range

    # Two possible solutions for q2
    q2_1 = math.acos(cos_q2)
    q2_2 = -q2_1

    # Compute corresponding q1 for each solution
    def compute_q1(q2):
        A = x_p - a * math.sin(theta)
        B = z_p - a * math.cos(theta)
        q1 = math.atan2(A - b * math.sin(q2), B - b * math.cos(q2))
        return q1

    q1_1 = compute_q1(q2_1)
    q1_2 = compute_q1(q2_2)

    # Check which solution matches the orientation
    error1 = abs((q1_1 + q2_1 - theta + math.pi) % (2 * math.pi) - math.pi)
    error2 = abs((q1_2 + q2_2 - theta + math.pi) % (2 * math.pi) - math.pi)

    # Select the solution with the smallest error
    if error1 < error2:
        q1, q2 = q1_1, q2_1
    else:
        q1, q2 = q1_2, q2_2

    # Normalize angles to [-π, π)
    q1 = (q1 + math.pi) % (2 * math.pi) - math.pi
    q2 = (q2 + math.pi) % (2 * math.pi) - math.pi

    return (q1, q2)
```

### Explanation
1. **Law of Cosines**: The code uses the law of cosines to determine the possible values for q2 based on the target position. This allows handling both elbow-up and elbow-down configurations.
2. **Position and Orientation Matching**: For each possible q2, the corresponding q1 is computed to match the target position. The solution that minimizes the error in the orientation (q1 + q2) is selected.
3. **Angle Normalization**: The joint angles are normalized to the range [-π, π) to ensure they are within valid joint limits, considering the periodic nature of rotational angles.

This approach ensures that both the position and orientation constraints are satisfied by evaluating all possible solutions and selecting the optimal one based on minimal error.