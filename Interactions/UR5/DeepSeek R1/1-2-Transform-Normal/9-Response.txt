To solve this problem, we need to determine the joint angles (q1 and q2) for a 2-DOF serial manipulator that will position the Tool Center Point (TCP) at a given target position and orientation. The solution must account for orientation flips in the coordinate system when the roll and yaw components are π radians, which invert the X and Z axes.

### Approach
1. **Orientation Handling**: Check if the roll and yaw components of the target orientation are π radians (modulo 2π). If so, invert the X and Z coordinates of the target position to account for the coordinate system flip.
2. **Position Equations**: Use the law of cosines to solve for possible q2 values (elbow-up and elbow-down configurations).
3. **Orientation Constraint**: Ensure the sum of q1 and q2 matches the target pitch angle.
4. **Solution Selection**: Choose the joint angles that minimize positional error while respecting the orientation constraint.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    x_p, y_p, z_p = p
    roll, pitch, yaw = r

    # Check if roll and yaw are approximately π (mod 2π)
    def is_pi(angle):
        return abs((angle + math.pi) % (2 * math.pi) - math.pi) < 1e-6

    if is_pi(roll) and is_pi(yaw):
        x_p = -x_p
        z_p = -z_p

    a = 0.39225  # Length from Revolute 2 to TCP
    b = 0.425    # Length from Revolute 1 to Revolute 2

    # Calculate the squared distance from base to target
    d_sq = x_p**2 + z_p**2
    # Compute cos(q2) using the law of cosines
    numerator = d_sq - a**2 - b**2
    denominator = 2 * a * b
    cos_q2 = numerator / denominator
    cos_q2 = max(min(cos_q2, 1.0), -1.0)  # Clamp to valid range

    # Two possible solutions for q2
    q2_1 = math.acos(cos_q2)
    q2_2 = -q2_1

    # Compute corresponding q1 for each solution
    def compute_q1(q2):
        A = x_p - a * math.sin(pitch)
        B = z_p - a * math.cos(pitch)
        q1 = math.atan2(A - b * math.sin(q2), B - b * math.cos(q2))
        return q1

    q1_1 = compute_q1(q2_1)
    q1_2 = compute_q1(q2_2)

    # Check which solution matches the orientation
    error1 = abs((q1_1 + q2_1 - pitch + math.pi) % (2 * math.pi) - math.pi)
    error2 = abs((q1_2 + q2_2 - pitch + math.pi) % (2 * math.pi) - math.pi)

    # Select the solution with the smallest error
    if error1 < error2:
        q1, q2 = q1_1, q2_1
    else:
        q1, q2 = q1_2, q2_2

    # Normalize angles to [-π, π)
    q1 = (q1 + math.pi) % (2 * math.pi) - math.pi
    q2 = (q2 + math.pi) % (2 * math.pi) - math.pi

    return (q1, q2)
```

### Explanation
1. **Orientation Adjustment**: The code checks if the roll and yaw components are π radians. If true, it inverts the X and Z coordinates to account for the coordinate system flip caused by these orientations.
2. **Law of Cosines**: The possible values for q2 are computed using the law of cosines, considering both elbow-up and elbow-down configurations.
3. **Position and Orientation Matching**: For each q2, the corresponding q1 is calculated. The solution that minimizes the error in the sum of q1 and q2 (to match the target pitch) is selected.
4. **Angle Normalization**: Joint angles are normalized to the range [-π, π) to ensure they are within valid limits.

This approach ensures that both position and orientation constraints are respected, even when the coordinate system is flipped due to roll and yaw components of π radians.