To solve this problem, we need to determine the joint angles (θ1, θ2, θ3) for a 3-DOF serial manipulator such that the Tool Center Point (TCP) reaches a specified target position (x, y, z). The key insight is that the third joint (θ3) does not affect the TCP's position due to its orientation, allowing us to focus on solving for θ1 and θ2 while setting θ3 to an arbitrary value within joint limits.

### Approach
1. **Problem Analysis**: The robot's structure involves three revolute joints rotating around the Y-axis. The TCP's position is derived from the forward kinematics, which involves transformations through each joint. The third joint's rotation does not affect the TCP's position, simplifying the problem to solving for θ1 and θ2.
2. **Key Equations**: Using geometric and trigonometric relationships, we derive equations for θ1 and θ2 based on the target position (x, z). The y-coordinate is fixed due to the robot's structure.
3. **Solution Strategy**: 
   - Use the Law of Cosines to solve for θ2.
   - Use trigonometric identities to solve for θ1 based on θ2.
   - Adjust the sign of θ2 based on the target's z-coordinate to ensure the correct solution.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x_p, y_p, z_p = p
    A = 0.425  # Length from Revolute1 to Revolute2
    B = 0.39225  # Length from Revolute2 to Revolute3

    # Calculate cosθ2 using the law of cosines
    numerator = x_p**2 + z_p**2 - A**2 - B**2
    denominator = 2 * A * B
    cosθ2 = numerator / denominator

    # Compute θ2 considering the sign based on z_p
    θ2_abs = math.acos(cosθ2)
    θ2 = θ2_abs if z_p >= 0 else -θ2_abs

    # Calculate C and D based on θ2
    C = A + B * math.cos(θ2)
    D = B * math.sin(θ2)

    # Compute sinθ1 and cosθ1
    denominator_θ1 = x_p**2 + z_p**2
    sinθ1 = (C * x_p + D * z_p) / denominator_θ1
    cosθ1 = (C * z_p - D * x_p) / denominator_θ1

    θ1 = math.atan2(sinθ1, cosθ1)

    # θ3 does not affect position, set to 0 within joint limits
    θ3 = 0.0

    return (θ1, θ2, θ3)
```

### Explanation
1. **Law of Cosines for θ2**: The target position's x and z coordinates are used to compute the angle θ2 using the Law of Cosines, which relates the lengths of the robot's links to the target position.
2. **Adjusting θ2 Sign**: The sign of θ2 is determined based on the target's z-coordinate. If the z-coordinate is negative, θ2 is taken as the negative of the acos result, ensuring the correct direction of the arm.
3. **Trigonometric Solution for θ1**: Using the derived values from θ2, we solve for θ1 using trigonometric identities to handle the planar projection of the robot's links.
4. **Arbitrary θ3**: Since the third joint's rotation does not affect the TCP's position, θ3 is set to zero, ensuring the solution meets the problem's requirements while respecting joint limits.

This approach efficiently solves the inverse kinematics problem by leveraging geometric relationships and trigonometric identities, ensuring the solution is both accurate and computationally efficient. The adjustment of θ2's sign based on the target's z-coordinate ensures the correct solution is chosen for both positive and negative z values.