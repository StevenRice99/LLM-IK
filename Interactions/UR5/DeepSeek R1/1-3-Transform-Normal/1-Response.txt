To solve this problem, we need to determine the joint angles (theta1, theta2, theta3) for a 3-DOF serial manipulator such that the end-effector (TCP) reaches a specified position and orientation. The solution involves using geometric and trigonometric methods to derive the joint angles based on the given target position and orientation.

### Approach
1. **Problem Analysis**: The robot has three revolute joints, all rotating around the Y-axis. The TCP's position is determined by the forward kinematics equations, and its orientation is the sum of the joint angles around the Y-axis.
2. **Forward Kinematics**: The position of the TCP is derived using the geometric relationships between the links and their respective transformations. The orientation is determined by the cumulative rotation from all joints.
3. **Inverse Kinematics**: Using the target position (x, z) and orientation (y-component), we solve for the joint angles using trigonometric identities and the law of cosines. The solution involves:
   - Calculating the possible angles for the second joint (theta2) using the law of cosines.
   - Determining the first joint angle (theta1) using trigonometric equations.
   - Computing the third joint angle (theta3) based on the desired orientation.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    r_y = r[1]  # Target orientation around Y (sum of thetas)
    
    L1 = 0.425
    L2 = 0.39225
    
    # Calculate theta2 using the law of cosines
    d_sq = x_target**2 + z_target**2
    cos_theta2 = (d_sq - L1**2 - L2**2) / (2 * L1 * L2)
    theta2 = np.arccos(cos_theta2)  # Elbow-up solution
    
    # Compute C and D for theta1 calculation
    C = L1 + L2 * np.cos(theta2)
    D = L2 * np.sin(theta2)
    
    # Calculate sin(theta1) and cos(theta1)
    denominator = C**2 + D**2
    sin_theta1 = (- (C * x_target + D * z_target)) / denominator
    cos_theta1 = (C * z_target - D * x_target) / denominator
    theta1 = np.arctan2(sin_theta1, cos_theta1)
    
    # Calculate theta3 based on the target orientation
    theta3 = r_y - theta1 - theta2
    
    return (theta1, theta2, theta3)
```

### Explanation
1. **Target Position Handling**: The target position's y-coordinate is fixed due to the robot's structure, so we focus on solving for x and z coordinates.
2. **Theta2 Calculation**: Using the law of cosines, we determine the angle for the second joint (theta2) based on the distance from the base to the target position.
3. **Theta1 Calculation**: Using trigonometric identities, we solve for the first joint angle (theta1) by forming a system of equations from the forward kinematics.
4. **Theta3 Calculation**: The third joint angle (theta3) is derived from the desired orientation, ensuring the sum of all joint angles matches the target y-component of the orientation.

This approach efficiently computes the joint angles using closed-form solutions, ensuring the robot's end-effector reaches the desired position and orientation.