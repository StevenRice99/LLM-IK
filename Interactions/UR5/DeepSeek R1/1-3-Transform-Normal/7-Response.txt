To solve this problem, we need to determine the joint angles (theta1, theta2, theta3) for a 3-DOF serial manipulator such that the end-effector (TCP) reaches a specified position and orientation. The solution involves using geometric and trigonometric methods to derive the joint angles based on the given target position and orientation, considering both elbow-up and elbow-down configurations and ensuring numerical stability.

### Approach
1. **Elbow-up and Elbow-down Solutions**: Calculate both possible configurations for theta2 (elbow-up and elbow-down) to explore all geometric possibilities.
2. **Theta1 Calculation**: Solve for theta1 using trigonometric identities derived from the forward kinematics equations, ensuring valid sine and cosine values.
3. **Theta3 Adjustment**: Compute theta3 for each solution and adjust it within the joint limits to match the target orientation.
4. **Solution Validation**: Check for valid joint angles and numerical stability, then select the solution with the lowest combined position and orientation error.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    r_y = r[1]  # Target orientation around Y (sum of thetas)
    
    L1 = 0.425
    L2 = 0.39225
    
    d_sq = x_target**2 + z_target**2
    cos_theta2 = (d_sq - L1**2 - L2**2) / (2 * L1 * L2)
    cos_theta2 = np.clip(cos_theta2, -1.0, 1.0)
    theta2 = np.arccos(cos_theta2)  # Elbow-up
    theta2_alt = -theta2  # Elbow-down
    
    solutions = []
    for t2 in [theta2, theta2_alt]:
        C = L1 + L2 * np.cos(t2)
        D = L2 * np.sin(t2)
        denom = C**2 + D**2
        if denom < 1e-6:
            continue  # Avoid division by zero
        
        sin_t1 = (C * x_target - D * z_target) / denom
        cos_t1 = (D * x_target + C * z_target) / denom
        
        # Check if sin_t1 and cos_t1 are within valid range
        if np.abs(sin_t1) > 1.0 or np.abs(cos_t1) > 1.0:
            continue  # Invalid solution
        
        t1 = np.arctan2(sin_t1, cos_t1)
        
        # Calculate theta3 and adjust within joint limits [-2π, 2π]
        t3_unadjusted = r_y - t1 - t2
        t3 = t3_unadjusted % (2 * np.pi)
        if t3 > np.pi:
            t3 -= 2 * np.pi
        
        # Generate possible theta3 within limits
        for delta in [0, -2 * np.pi, 2 * np.pi]:
            t3_candidate = t3_unadjusted + delta
            if -2 * np.pi <= t3_candidate <= 2 * np.pi:
                solutions.append((t1, t2, t3_candidate))
    
    best_error = float('inf')
    best_sol = None
    for sol in solutions:
        t1, t2, t3 = sol
        # Check joint limits
        if not (-2 * np.pi <= t1 <= 2 * np.pi and
                -2 * np.pi <= t2 <= 2 * np.pi and
                -2 * np.pi <= t3 <= 2 * np.pi):
            continue
        
        # Forward kinematics for position
        x = L1 * np.sin(t1) + L2 * np.sin(t1 + t2)
        z = L1 * np.cos(t1) + L2 * np.cos(t1 + t2)
        pos_error = np.hypot(x - x_target, z - z_target)
        
        # Orientation error (circular)
        orient_sum = (t1 + t2 + t3) % (2 * np.pi)
        target_orient = r_y % (2 * np.pi)
        orient_error = min(abs(orient_sum - target_orient), 2 * np.pi - abs(orient_sum - target_orient))
        
        total_error = pos_error + orient_error
        if total_error < best_error:
            best_error = total_error
            best_sol = sol
    
    return best_sol if best_sol is not None else (0.0, 0.0, 0.0)
```

### Explanation
1. **Elbow Configurations**: The code calculates both elbow-up and elbow-down configurations for theta2 to explore all possible geometric solutions.
2. **Numerical Stability**: The solution checks for valid sine and cosine values to avoid numerical instability and skips invalid configurations.
3. **Theta3 Adjustment**: The third joint angle (theta3) is adjusted within the joint limits to ensure it falls within the allowable range, considering modulo 2π operations.
4. **Error Minimization**: Each solution is evaluated based on combined position and orientation errors, selecting the one with the lowest total error to ensure both position and orientation targets are met.

This approach ensures that all valid joint configurations are considered, numerical stability is maintained, and the optimal solution is selected based on accurate error calculations.