To solve this problem, we need to determine the joint angles (theta1, theta2, theta3) for a 3-DOF serial manipulator such that the end-effector (TCP) reaches a specified position and orientation. The solution involves converting the target orientation into a pure Y-axis rotation and using geometric methods to find valid joint configurations.

### Approach
1. **Convert Target Orientation**: Convert the target Roll-Pitch-Yaw (RPY) angles into a rotation matrix and extract the effective Y-axis rotation angle.
2. **Elbow Configurations**: Calculate both elbow-up and elbow-down configurations for theta2 to explore all possible geometric solutions.
3. **Theta1 Calculation**: Solve for theta1 using trigonometric identities derived from the forward kinematics equations.
4. **Theta3 Adjustment**: Compute theta3 to achieve the target Y-axis rotation, considering modulo 2Ï€ operations to handle periodicity.
5. **Solution Validation**: Evaluate all valid solutions based on position and orientation errors to select the optimal joint angles.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    roll, pitch, yaw = r
    
    # Convert RPY to rotation matrix (XYZ order)
    cr, sr = np.cos(roll), np.sin(roll)
    cp, sp = np.cos(pitch), np.sin(pitch)
    cy, sy = np.cos(yaw), np.sin(yaw)
    
    # Construct rotation matrix
    R = np.array([
        [cy*cp, cy*sp*sr - sy*cr, cy*sp*cr + sy*sr],
        [sy*cp, sy*sp*sr + cy*cr, sy*sp*cr - cy*sr],
        [-sp,    cp*sr,            cp*cr          ]
    ])
    
    # Extract effective Y rotation from the matrix
    cos_theta = R[0, 0]
    sin_theta = R[0, 2]
    target_sum = np.arctan2(sin_theta, cos_theta)
    
    L1 = 0.425
    L2 = 0.39225
    
    d_sq = x_target**2 + z_target**2
    cos_theta2 = (d_sq - L1**2 - L2**2) / (2 * L1 * L2)
    cos_theta2 = np.clip(cos_theta2, -1.0, 1.0)
    theta2 = np.arccos(cos_theta2)
    theta2_alt = -theta2
    
    solutions = []
    for t2 in [theta2, theta2_alt]:
        C = L1 + L2 * np.cos(t2)
        D = L2 * np.sin(t2)
        denom = C**2 + D**2
        if denom < 1e-6:
            continue
        
        sin_t1 = (C * x_target - D * z_target) / denom
        cos_t1 = (D * x_target + C * z_target) / denom
        
        if abs(sin_t1) > 1.0 or abs(cos_t1) > 1.0:
            continue
        
        t1 = np.arctan2(sin_t1, cos_t1)
        
        # Calculate theta3 candidates
        t3_base = (target_sum - t1 - t2) % (2 * np.pi)
        t3_candidates = [t3_base - 2*np.pi, t3_base, t3_base + 2*np.pi]
        
        for t3 in t3_candidates:
            if -2*np.pi <= t3 <= 2*np.pi:
                solutions.append((t1, t2, t3))
    
    best_error = float('inf')
    best_sol = (0.0, 0.0, 0.0)
    for sol in solutions:
        t1, t2, t3 = sol
        if not (-2*np.pi <= t1 <= 2*np.pi and
                -2*np.pi <= t2 <= 2*np.pi and
                -2*np.pi <= t3 <= 2*np.pi):
            continue
        
        # Position check
        x = L1 * np.sin(t1) + L2 * np.sin(t1 + t2)
        z = L1 * np.cos(t1) + L2 * np.cos(t1 + t2)
        pos_error = np.hypot(x - x_target, z - z_target)
        
        # Orientation check
        orient_sum = (t1 + t2 + t3) % (2 * np.pi)
        target_orient = target_sum % (2 * np.pi)
        orient_error = min(abs(orient_sum - target_orient), 2*np.pi - abs(orient_sum - target_orient))
        
        total_error = pos_error + orient_error
        if total_error < best_error:
            best_error = total_error
            best_sol = sol
    
    return best_sol
```

### Explanation
1. **Orientation Conversion**: The target orientation (RPY) is converted to a rotation matrix, from which the effective Y-axis rotation angle is extracted. This handles cases where the target orientation is represented with non-zero roll and yaw but is effectively a pure Y rotation.
2. **Elbow Configurations**: Both elbow-up and elbow-down configurations are considered to explore all geometric solutions for theta2.
3. **Theta Calculation**: Trigonometric identities and the law of cosines are used to solve for theta1 and theta3, ensuring valid joint angles within the specified limits.
4. **Error Minimization**: Solutions are evaluated based on combined position and orientation errors, selecting the optimal configuration that minimizes the total error.

This approach ensures that the robot's end-effector reaches the desired position and orientation by considering all valid joint configurations and accurately handling the target orientation's periodicity.