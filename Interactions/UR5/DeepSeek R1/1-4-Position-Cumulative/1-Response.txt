To solve this problem, we need to determine the joint angles for a 4-DOF robotic arm to reach a given target position (x, y, z). The solution involves calculating the angles for the first three joints (theta1, theta2, theta3) to position the end-effector correctly, while the fourth joint (theta4) does not affect the position and can be set to zero.

### Approach
1. **Problem Analysis**: The robotic arm consists of four revolute joints. The first three joints rotate around the Y-axis, affecting the x and z coordinates, while the fourth joint rotates around the Z-axis, which does not influence the position. The end-effector's position is determined by the first three joints and their respective link lengths.
2. **Adjust Target Position**: The target position (x, z) is adjusted to account for the offset from the end-effector to the fourth joint. This adjustment helps in solving the inverse kinematics for the first three joints.
3. **Inverse Kinematics for First Three Joints**: Using trigonometric identities and the law of cosines, we compute the angles for the first three joints (theta1, theta2, theta3) to reach the adjusted target position.
4. **Fourth Joint**: Since the fourth joint does not affect the position, its angle (theta4) is set to zero.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    l1 = 0.425
    l2 = 0.39225
    l4 = 0.09465  # TCP offset from Revolute4

    # Calculate the effective target for Revolute4's position
    gamma = math.atan2(x_target, z_target)
    x_eff = x_target - l4 * math.sin(gamma)
    z_eff = z_target - l4 * math.cos(gamma)

    # Solve for theta1 and theta2 using the adjusted target
    r = math.sqrt(x_eff ** 2 + z_eff ** 2)
    cos_theta2 = (r ** 2 - l1 ** 2 - l2 ** 2) / (2 * l1 * l2)
    cos_theta2 = max(min(cos_theta2, 1.0), -1.0)
    theta2 = math.acos(cos_theta2)
    beta = math.atan2(x_eff, z_eff)
    alpha = math.atan2(l2 * math.sin(theta2), l1 + l2 * math.cos(theta2))
    theta1 = beta - alpha

    # Calculate theta3 to align the TCP's offset
    theta3 = gamma - theta1 - theta2

    # Theta4 does not affect the position, set to 0
    theta4 = 0.0

    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Adjust Target Position**: The target position (x, z) is adjusted by subtracting the offset caused by the end-effector's position relative to the fourth joint. This adjustment is based on the angle `gamma`, which is the direction from the base to the target.
2. **Solve for Theta1 and Theta2**: Using the adjusted target position, we compute the angles theta1 and theta2 using trigonometric methods. This involves solving a 2-link inverse kinematics problem using the law of cosines and the `atan2` function to handle the correct quadrant.
3. **Calculate Theta3**: The angle theta3 is determined to ensure the cumulative rotation from the first three joints aligns the end-effector's offset correctly with the target position.
4. **Theta4**: Since the fourth joint's rotation does not affect the position, it is set to zero. This joint could be used for orientation if needed, but for position control, it remains zero.

This approach efficiently computes the required joint angles using closed-form solutions, ensuring the robotic arm reaches the desired position.