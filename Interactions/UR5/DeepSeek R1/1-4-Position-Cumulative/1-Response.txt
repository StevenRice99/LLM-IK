To solve this problem, we need to determine the joint angles for a 4-DOF robotic arm to reach a specified target position (x, y, z). The solution involves calculating the angles for the first three joints (theta1, theta2, theta3) to position the end-effector correctly, while the fourth joint (theta4) does not affect the position and can be set to zero.

### Approach
1. **Adjust Target Position**: The target position is adjusted to account for the offset introduced by the fourth link's position.
2. **Solve for Joint Angles**: Using geometric and trigonometric calculations, we solve for the first three joint angles (theta1, theta2, theta3) to reach the adjusted target position. The fourth joint angle (theta4) is set to zero as it does not affect the position.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    # Adjust target to account for the TCP offset from Revolute4's position
    tcp_offset = 0.09465
    # The effective length from Revolute3 to TCP is 0.093 + 0.09465 = 0.18765 in the local Z direction
    # Adjust the target by subtracting the contribution of Revolute4 and TCP
    # This is approximated by treating the last two links as a single offset
    L1 = 0.425
    L2 = 0.39225
    L3 = 0.18765  # 0.093 (Revolute4) + 0.09465 (TCP)
    
    # Compute the adjusted target (x_adj, z_adj) by subtracting the contribution of L3
    # Assuming theta3 is chosen such that the last link is aligned with the target direction
    alpha = math.atan2(x, z)
    x_adj = x - L3 * math.sin(alpha)
    z_adj = z - L3 * math.cos(alpha)
    
    # Solve for theta1 and theta2 using the adjusted target
    d = math.sqrt(x_adj ** 2 + z_adj ** 2)
    cos_theta2 = (d ** 2 - L1 ** 2 - L2 ** 2) / (2 * L1 * L2)
    theta2 = math.acos(cos_theta2)
    
    # Determine the correct sign for theta2 based on the cross product
    cross_product = x_adj * (L1 + L2 * math.cos(theta2)) - z_adj * (L2 * math.sin(theta2))
    if cross_product < 0:
        theta2 = -theta2
    
    alpha_adj = math.atan2(x_adj, z_adj)
    beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
    theta1 = alpha_adj - beta
    
    # Theta3 is the remaining angle to align the last link with the target direction
    theta3 = alpha - (theta1 + theta2)
    
    # Theta4 does not affect the position, set to 0
    theta4 = 0.0
    
    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Adjust Target Position**: The target position is adjusted by subtracting the contribution of the last two links (Revolute4 and TCP) to isolate the problem to the first three joints.
2. **Geometric Calculations**: Using the law of cosines and trigonometric identities, we solve for the angles theta1 and theta2 that position the first two links correctly.
3. **Theta3 Calculation**: The third joint angle (theta3) is determined to align the last link with the target direction.
4. **Theta4 Handling**: The fourth joint angle (theta4) is set to zero as it does not affect the position of the TCP.

This approach efficiently decouples the problem into manageable parts, leveraging geometric transformations and trigonometric calculations to achieve the desired position.