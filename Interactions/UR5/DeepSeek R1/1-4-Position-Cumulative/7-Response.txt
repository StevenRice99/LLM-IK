To solve this problem, we need to determine the joint angles for a 4-DOF robotic arm to reach a specified target position (x, y, z) in the X-Z plane, considering the fixed Y-coordinate due to the robot's structure. The solution involves calculating the angles for the first three joints (theta1, theta2, theta3) to position the end-effector correctly, while the fourth joint (theta4) does not affect the position and is set to zero.

### Approach
1. **Adjust Target Position**: The target position is adjusted by subtracting the TCP offset in the direction of the target's approximate angle. This helps in positioning the third joint (Revolute 3) such that the end-effector can reach the target.
2. **Solve for Joint Angles**: Using geometric and trigonometric calculations, solve for the first two joint angles (theta1, theta2) to reach the adjusted target position. The third joint angle (theta3) is computed to align the end-effector with the actual target position.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    tcp_offset = 0.09465  # TCP offset in X-Z plane from Revolute3
    
    # Step 1: Approximate the direction to the target
    gamma_approx = math.atan2(x, z)
    
    # Adjust target by subtracting TCP offset in the approximate direction
    x_adj = x - tcp_offset * math.sin(gamma_approx)
    z_adj = z - tcp_offset * math.cos(gamma_approx)
    
    # Step 2: Solve two-link IK for adjusted target
    L1 = 0.425
    L2 = 0.39225
    d = math.hypot(x_adj, z_adj)
    
    # Calculate theta2 using law of cosines
    cos_theta2 = (d**2 - L1**2 - L2**2) / (2 * L1 * L2)
    cos_theta2 = max(min(cos_theta2, 1.0), -1.0)  # Clamp to valid range
    theta2 = math.acos(cos_theta2)
    
    # Determine elbow configuration using cross product
    cross = x_adj * (L1 + L2 * math.cos(theta2)) - z_adj * (L2 * math.sin(theta2))
    if cross < 0:
        theta2 = -theta2
    
    # Calculate theta1
    alpha = math.atan2(x_adj, z_adj)
    beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
    theta1 = alpha - beta
    
    # Step 3: Compute Revolute3's position
    x3 = L1 * math.sin(theta1) + L2 * math.sin(theta1 + theta2)
    z3 = L1 * math.cos(theta1) + L2 * math.cos(theta1 + theta2)
    
    # Step 4: Compute theta3 to align TCP
    dx = x - x3
    dz = z - z3
    gamma = math.atan2(dx, dz)
    theta_total = gamma
    theta3 = theta_total - (theta1 + theta2)
    
    # Normalize theta3 to [-π, π]
    theta3 = (theta3 + math.pi) % (2 * math.pi) - math.pi
    
    # Theta4 doesn't affect position
    theta4 = 0.0
    
    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Adjust Target Position**: The target position is adjusted by subtracting the TCP offset in the direction of the target's approximate angle. This helps in positioning the third joint (Revolute 3) such that the end-effector can reach the target.
2. **Two-Link Inverse Kinematics**: The first two joint angles (theta1, theta2) are computed using geometric and trigonometric calculations to position Revolute 3 at the adjusted target.
3. **Third Joint Angle Calculation**: The third joint angle (theta3) is determined by aligning the end-effector with the actual target position, considering the position of Revolute 3 and the TCP offset.
4. **Normalization**: The third joint angle is normalized to ensure it falls within the valid range of [-π, π].

This approach efficiently decouples the problem into manageable parts, leveraging geometric transformations and trigonometric calculations to achieve the desired position.