To solve the inverse kinematics for the 4-DOF manipulator, we need to accurately account for the TCP offset and correctly compute the joint angles. Here's the refined solution:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    
    # Constants from URDF
    L1 = 0.425       # Length from Revolute1 to Revolute2
    L2 = 0.39225     # Length from Revolute2 to Revolute3
    tcp_offset = 0.09465  # TCP offset from Revolute4
    
    # Calculate target direction and magnitude
    D = math.hypot(x_target, z_target)
    if D == 0:
        return (0.0, 0.0, 0.0, 0.0)
    
    # Scale target to account for TCP offset
    k = 1 - tcp_offset / D
    x_adj = x_target * k
    z_adj = z_target * k
    
    # Solve 2-link IK for scaled target
    d = math.hypot(x_adj, z_adj)
    cos_theta2 = (d**2 - L1**2 - L2**2) / (2 * L1 * L2)
    cos_theta2 = max(min(cos_theta2, 1.0), -1.0)  # Clamp to valid range
    theta2 = math.acos(cos_theta2)
    
    # Elbow configuration check using cross product
    cross = x_adj * (L1 + L2 * math.cos(theta2)) - z_adj * (L2 * math.sin(theta2))
    if cross < 0:
        theta2 = -theta2
    
    # Calculate theta1 using geometric relationships
    alpha = math.atan2(x_adj, z_adj)
    beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
    theta1 = alpha - beta
    
    # Calculate theta3 to align TCP with target
    target_angle = math.atan2(x_target, z_target)
    theta3 = target_angle - (theta1 + theta2)
    
    # Normalize theta3 to [-π, π]
    theta3 = (theta3 + math.pi) % (2 * math.pi) - math.pi
    
    # Theta4 doesn't affect position
    theta4 = 0.0
    
    return (theta1, theta2, theta3, theta4)
```

**Key Improvements:**
1. **TCP Offset Handling:** The target is scaled along the line from the origin to the target to account for the TCP offset, ensuring the 2-link solution positions the arm correctly.
2. **Elbow Configuration:** The cross product check determines the correct elbow configuration (up/down) for theta2.
3. **Theta3 Calculation:** The third joint angle is computed as the difference between the target direction and cumulative arm rotation, ensuring proper TCP alignment.
4. **Angle Normalization:** Theta3 is normalized to stay within valid joint limits.

This solution properly accounts for the kinematic chain and TCP offset, producing accurate joint angles to reach the target position.