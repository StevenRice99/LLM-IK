To solve this problem, we need to determine the joint angles (theta1, theta2, theta3, theta4) for a 4-DOF robotic arm to position its Tool Center Point (TCP) at a given target position (x, y, z). The solution involves decoupling the problem into two parts: determining the first joint angle (theta1) and solving for the remaining angles (theta2, theta3) using geometric methods. The fourth joint angle (theta4) does not affect the position and can be set to zero.

### Approach
1. **Determine theta1**: The first joint (Revolute 1) rotates around the Y-axis, affecting the x and z coordinates. The angle theta1 is calculated using the arctangent of the target's x and z coordinates.
2. **Adjust Target Position**: Compute the adjusted target position (A, B) for the subsequent joints by considering the position of the first joint.
3. **Solve for theta2 and theta3**: Treat the remaining joints as a two-link planar arm. Use the law of cosines and trigonometric identities to solve for theta2 and theta3 based on the adjusted target position.
4. **Set theta4**: Since the fourth joint's rotation does not affect the TCP's position, set theta4 to zero.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    
    # Solve for theta1 using the direction in x-z plane
    theta1 = math.atan2(x_target, z_target)
    
    # Compute the adjusted target for the two-link system (theta2 and theta3)
    A = x_target + 0.425 * math.sin(theta1)
    B = z_target - 0.425 * math.cos(theta1)
    
    # Solve for theta2 and theta3 using the two-link inverse kinematics
    L1 = 0.39225
    L2 = 0.09465
    numerator = A**2 + B**2 - L1**2 - L2**2
    denominator = 2 * L1 * L2
    cos_theta3 = numerator / denominator
    theta3 = math.acos(cos_theta3)
    
    A_term = L1 + L2 * math.cos(theta3)
    B_term = L2 * math.sin(theta3)
    denominator_theta2 = A_term**2 + B_term**2
    sin_theta2 = (A_term * A - B_term * B) / denominator_theta2
    cos_theta2 = (B_term * A + A_term * B) / denominator_theta2
    theta2 = math.atan2(sin_theta2, cos_theta2)
    
    # Theta4 does not affect the position, set to 0
    theta4 = 0.0
    
    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Theta1 Calculation**: The first joint angle (theta1) is determined using `atan2(x, z)` to align the arm in the direction of the target in the x-z plane.
2. **Adjusted Target**: The target position is adjusted to account for the position of the first joint, translating the problem into a two-link planar problem.
3. **Two-Link IK Solution**: Using geometric methods, the angles theta2 and theta3 are computed to position the end of the two-link system at the adjusted target. This involves the law of cosines to find theta3 and trigonometric identities to find theta2.
4. **Theta4 Handling**: The fourth joint angle (theta4) is set to zero as it does not influence the TCP's position, focusing only on reaching the target position.

This approach efficiently decouples the problem, leveraging geometric insights to simplify the solution for a 4-DOF robotic arm.