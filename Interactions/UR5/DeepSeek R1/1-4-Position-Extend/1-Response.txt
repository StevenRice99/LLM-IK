To solve this problem, we need to determine the joint angles for a 4-DOF robotic arm to reach a specified target position. The solution involves extending the existing inverse kinematics solution for the first three joints to include the fourth joint and the tool center point (TCP) offset.

### Approach
1. **Problem Analysis**: The robotic arm has four revolute joints. The first three joints rotate around the Y-axis, and the fourth joint rotates around the Z-axis. The TCP is offset from the fourth joint's origin. The goal is to compute the joint angles such that the TCP reaches the target position.

2. **Adjust Target Position**: The TCP's position is offset from the fourth joint's origin. We adjust the target position to account for this offset by considering the orientation of the fourth joint.

3. **Existing Solution for First Three Joints**: Use the provided solution for the first three joints to find the angles that position the fourth joint's origin close to the target.

4. **Compute Fourth Joint Angle**: The fourth joint's angle (theta4) is determined based on the remaining offset from the fourth joint's origin to the target position.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    L1 = 0.425
    L2 = 0.39225
    C = 0.09465  # TCP offset along Z in Revolute 4's frame

    # Calculate the adjusted target (Revolute 4's origin)
    theta_sum = math.atan2(x, z - C)
    x_adj = x - C * math.sin(theta_sum)
    z_adj = z - C * math.cos(theta_sum)

    # Solve for theta1 and theta2 using the existing method
    d = math.hypot(x_adj, z_adj)
    cos_theta2 = (d**2 - L1**2 - L2**2) / (2 * L1 * L2)
    theta2 = math.acos(cos_theta2)

    # Determine the correct sign for theta2
    cross_product = x_adj * (L1 + L2 * math.cos(theta2)) - z_adj * (L2 * math.sin(theta2))
    if cross_product < 0:
        theta2 = -theta2

    alpha = math.atan2(x_adj, z_adj)
    beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
    theta1 = alpha - beta

    # Calculate theta3 to adjust for the remaining offset
    theta3 = theta_sum - theta1 - theta2

    # Theta4 does not affect the position, so set to 0
    theta4 = 0.0

    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Adjust Target Position**: The target position is adjusted by subtracting the TCP's offset, which is computed based on the angle `theta_sum` (the sum of the first three joint angles). This adjustment helps in positioning the fourth joint's origin correctly.

2. **Solve for First Two Joints**: Using the existing solution, we compute the angles `theta1` and `theta2` to position the third joint's origin close to the adjusted target.

3. **Compute Third Joint Angle**: The third joint angle `theta3` is calculated to adjust for any remaining offset, ensuring the fourth joint's origin is correctly positioned.

4. **Fourth Joint Angle**: Since the fourth joint's rotation (theta4) does not affect the position, it is set to zero. This can be adjusted if orientation control is required, but for position-only control, it remains zero.

This approach efficiently extends the existing solution to include all four joints, ensuring the TCP reaches the desired position.