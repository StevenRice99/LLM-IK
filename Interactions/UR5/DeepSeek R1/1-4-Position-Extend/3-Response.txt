To resolve the math domain error, the adjustment of the target position must ensure the calculated `cos_theta2` remains within the valid range [-1, 1]. The error arises from an incorrect adjustment of the TCP's offset. The correct approach is to compute the adjusted target by subtracting the TCP's offset in the direction determined by the target's angle, not the sum of unknown joint angles.

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    L1 = 0.425
    L2 = 0.39225
    C = 0.09465  # TCP offset along Revolute 4's Z-axis

    # Compute the direction of the TCP's offset based on the target's position
    theta_sum = math.atan2(x, z)
    x_adj = x - C * math.sin(theta_sum)
    z_adj = z - C * math.cos(theta_sum)

    # Solve for theta1 and theta2 using the adjusted target
    d = math.hypot(x_adj, z_adj)
    cos_theta2 = (d**2 - L1**2 - L2**2) / (2 * L1 * L2)
    theta2 = math.acos(cos_theta2)

    # Determine the correct sign for theta2
    cross_product = x_adj * (L1 + L2 * math.cos(theta2)) - z_adj * (L2 * math.sin(theta2))
    if cross_product < 0:
        theta2 = -theta2

    alpha = math.atan2(x_adj, z_adj)
    beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
    theta1 = alpha - beta

    # Theta3 compensates for the remaining angle to align the TCP
    theta3 = theta_sum - theta1 - theta2

    # Theta4 does not affect position, set to 0
    theta4 = 0.0

    return (theta1, theta2, theta3, theta4)
```

**Explanation:**
- **Adjust Target Position:** The TCP's offset is subtracted from the target in the direction determined by `theta_sum`, calculated as the angle of the target's position in the XZ plane. This ensures the adjusted target (Revolute 4's origin) is within reach of the first two links.
- **Solve for θ1 and θ2:** Using the adjusted target, compute the first two joint angles via the law of cosines and cross-product sign check.
- **Calculate θ3:** The third joint angle compensates for the remaining angle to align the TCP's offset direction.
- **θ4 Handling:** Since the fourth joint's rotation doesn't affect the TCP's position, it's set to 0.