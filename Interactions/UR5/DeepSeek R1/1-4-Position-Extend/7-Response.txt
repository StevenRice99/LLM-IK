To solve this problem, we need to determine the joint angles for a 4-DOF robotic arm to reach a specified target position. The solution involves considering both possible configurations (elbow-up and elbow-down) for the first three joints to ensure the correct positioning of the TCP.

### Approach
1. **Target Adjustment**: Adjust the target position by subtracting the contribution of the TCP's offset in the direction of the original target.
2. **Two-Joint Solutions**: Solve for the first two joints (theta1 and theta2) considering both possible configurations (elbow-up and elbow-down) using the law of cosines.
3. **Third Joint Calculation**: Compute the third joint angle (theta3) to align the TCP with the target position.
4. **Solution Selection**: Choose the solution that results in the smallest absolute value for theta3 to minimize unnecessary rotation.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p

    A = 0.425
    B = 0.39225
    L3 = 0.09465

    theta_sum = math.atan2(x_target, z_target)
    x_adj = x_target - L3 * math.sin(theta_sum)
    z_adj = z_target - L3 * math.cos(theta_sum)

    r_adj = math.hypot(x_adj, z_adj)
    cos_theta2 = (r_adj**2 - A**2 - B**2) / (2 * A * B)
    cos_theta2 = max(min(cos_theta2, 1.0), -1.0)
    theta2_1 = math.acos(cos_theta2)
    theta2_2 = -theta2_1

    solutions = []
    for theta2 in [theta2_1, theta2_2]:
        beta = math.atan2(x_adj, z_adj)
        alpha = math.atan2(B * math.sin(theta2), A + B * math.cos(theta2))
        theta1 = (beta - alpha) % (2 * math.pi)
        theta3 = (theta_sum - (theta1 + theta2)) % (2 * math.pi)
        if theta3 > math.pi:
            theta3 -= 2 * math.pi
        solutions.append((theta1, theta2, theta3))

    # Select the solution with theta3 closest to zero
    theta1, theta2, theta3 = min(solutions, key=lambda s: abs(s[2]))

    theta4 = 0.0
    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Target Adjustment**: The target position is adjusted by subtracting the contribution of the TCP's offset (L3) in the direction of the original target. This adjustment helps in positioning the third joint's origin correctly.
2. **Two-Joint Solutions**: The first two joints (theta1 and theta2) are solved using the law of cosines, considering both elbow-up and elbow-down configurations. This ensures that we explore all possible solutions for reaching the adjusted target.
3. **Third Joint Calculation**: The third joint angle (theta3) is computed to align the TCP with the target position. This angle is derived from the difference between the target angle (theta_sum) and the sum of the first two joint angles.
4. **Solution Selection**: The solution with the smallest absolute value for theta3 is chosen to minimize unnecessary rotation, ensuring a more natural joint configuration.

This approach ensures that all possible configurations are considered, and the optimal solution is selected based on the minimal rotation required for the third joint, leading to accurate positioning of the TCP.