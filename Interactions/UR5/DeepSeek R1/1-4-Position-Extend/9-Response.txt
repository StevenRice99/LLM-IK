To solve this problem, we need to determine the joint angles for a 4-DOF robotic arm to reach a specified target position. The solution involves accurately modeling the contributions of the first three joints to position the end-effector correctly, considering the geometric relationships and the fixed offset of the third link.

### Approach
1. **Problem Analysis**: The first three joints (theta1, theta2, theta3) are responsible for positioning the end-effector in the XZ plane, while the fourth joint (theta4) affects orientation but not position. The target's Y-coordinate is fixed due to the robot's mechanical design.
2. **Geometric Modeling**: The position of the end-effector is determined by the cumulative contributions of the first three links. The third link's offset must be considered in the direction determined by the sum of the first three joint angles.
3. **Two-Link Adjustment**: The first two joints are solved to position the end of the second link such that the third link can reach the target. This involves adjusting the target by the third link's offset in the direction of the target.
4. **Residual Angle Calculation**: The third joint angle is computed based on the residual direction from the end of the second link to the target, ensuring the third link's contribution is accurately accounted for.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p

    L1 = 0.425
    L2 = 0.39225
    L3 = 0.09465

    # Calculate the direction to the target
    dir_to_target = math.atan2(x_target, z_target)
    x_adj = x_target - L3 * math.sin(dir_to_target)
    z_adj = z_target - L3 * math.cos(dir_to_target)

    # Solve for the first two joints (elbow-up and elbow-down)
    r_adj = math.hypot(x_adj, z_adj)
    cos_theta2 = (r_adj**2 - L1**2 - L2**2) / (2 * L1 * L2)
    cos_theta2 = max(min(cos_theta2, 1.0), -1.0)
    theta2_1 = math.acos(cos_theta2)
    theta2_2 = -theta2_1

    solutions = []
    for theta2 in [theta2_1, theta2_2]:
        beta = math.atan2(x_adj, z_adj)
        alpha = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
        theta1 = (beta - alpha) % (2 * math.pi)
        # Calculate end of the second link
        x2 = L1 * math.sin(theta1) + L2 * math.sin(theta1 + theta2)
        z2 = L1 * math.cos(theta1) + L2 * math.cos(theta1 + theta2)
        # Compute theta3 to reach the target from (x2, z2)
        dx = x_target - x2
        dz = z_target - z2
        theta_residual = math.atan2(dx, dz)
        theta3 = (theta_residual - (theta1 + theta2)) % (2 * math.pi)
        if theta3 > math.pi:
            theta3 -= 2 * math.pi
        solutions.append((theta1, theta2, theta3))

    # Select the solution with theta3 closest to zero
    theta1, theta2, theta3 = min(solutions, key=lambda s: abs(s[2]))

    # Normalize angles to [-pi, pi]
    theta1 = (theta1 + math.pi) % (2 * math.pi) - math.pi
    theta2 = (theta2 + math.pi) % (2 * math.pi) - math.pi
    theta3 = (theta3 + math.pi) % (2 * math.pi) - math.pi

    theta4 = 0.0
    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Target Adjustment**: The target is adjusted by subtracting the contribution of the third link's offset in the direction of the target. This adjustment helps in positioning the end of the second link such that the third link can reach the target.
2. **Two-Link Solution**: The first two joints (theta1 and theta2) are solved using geometric inverse kinematics for a two-link planar arm, considering both elbow-up and elbow-down configurations.
3. **Residual Angle Calculation**: The third joint angle (theta3) is computed based on the residual direction from the end of the second link to the target. This ensures that the third link's contribution accurately positions the end-effector at the target.
4. **Angle Normalization**: The computed angles are normalized to the range [-π, π] to ensure they fall within the joint limits.

This approach ensures that all three joints are used to position the end-effector accurately, considering the geometric relationships and the fixed offset of the third link. The solution selects the optimal configuration based on the minimal rotation required for the third joint, leading to accurate and efficient positioning.