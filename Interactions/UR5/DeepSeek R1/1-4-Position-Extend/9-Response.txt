To solve this problem, we need to determine the joint angles for a 4-DOF robotic arm to reach a specified target position. The solution involves correctly adjusting the target position to account for the tool center point (TCP) offset and ensuring the calculated values remain within valid mathematical ranges.

### Approach
1. **Adjust Target Position**: The TCP's position is offset from the fourth joint's origin. We adjust the target position by moving it in the direction opposite to the TCP's offset, calculated based on the target's direction in the XZ plane.
2. **Solve for First Two Joints**: Use the adjusted target position to compute the angles for the first two joints using the law of cosines and cross-product sign check.
3. **Clamp Values**: Ensure the cosine of the second joint angle remains within the valid range to prevent mathematical domain errors.
4. **Calculate Third Joint Angle**: Determine the third joint angle to align the fourth joint's origin with the adjusted target.
5. **Fourth Joint Angle**: Since the fourth joint's rotation does not affect the position, it is set to zero.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    L1 = 0.425
    L2 = 0.39225
    C = 0.09465  # TCP offset along Revolute 4's Z-axis

    # Compute the direction of the original target to adjust for the TCP offset
    phi = math.atan2(x, z)
    x_adj = x - C * math.sin(phi)
    z_adj = z - C * math.cos(phi)

    # Solve for theta1 and theta2 using the adjusted target
    d = math.hypot(x_adj, z_adj)
    numerator = d**2 - L1**2 - L2**2
    denominator = 2 * L1 * L2
    if denominator == 0:
        cos_theta2 = 1.0
    else:
        cos_theta2 = numerator / denominator
        cos_theta2 = max(min(cos_theta2, 1.0), -1.0)  # Clamp to valid range

    theta2 = math.acos(cos_theta2)

    # Determine the correct sign for theta2 using cross product
    cross_product = x_adj * (L1 + L2 * math.cos(theta2)) - z_adj * (L2 * math.sin(theta2))
    if cross_product < 0:
        theta2 = -theta2

    alpha = math.atan2(x_adj, z_adj)
    beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
    theta1 = alpha - beta

    # Theta3 compensates for the remaining angle to align the TCP
    theta_sum = phi  # Direction of the original target
    theta3 = theta_sum - theta1 - theta2

    # Normalize theta3 to the range [-pi, pi]
    theta3 = (theta3 + math.pi) % (2 * math.pi) - math.pi

    # Theta4 does not affect position, set to 0
    theta4 = 0.0

    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Adjust Target Position**: The target position is adjusted by moving it in the opposite direction of the TCP's offset (0.09465) along the direction determined by the angle of the target in the XZ plane. This ensures the adjusted target is within the reachable range of the first two joints.
2. **Clamping Values**: The cosine of the second joint angle is clamped to the range [-1, 1] to prevent mathematical errors when computing the arccosine.
3. **Joint Angles Calculation**: The first two joint angles are computed using geometric methods, and the third joint angle is adjusted to ensure the fourth joint's origin aligns with the adjusted target. The fourth joint angle is set to zero as it does not affect the position.
4. **Normalization**: The third joint angle is normalized to the range [-π, π] to ensure it stays within valid joint limits.

This approach ensures the solution is both mathematically valid and efficient, providing the correct joint angles to reach the target position.