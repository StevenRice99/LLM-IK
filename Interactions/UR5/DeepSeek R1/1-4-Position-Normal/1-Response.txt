To solve the inverse kinematics for the given 4-DOF manipulator, we focus on determining the joint angles q1, q2, q3, and q4 such that the tool center point (TCP) reaches the target position (x, y, z). The key steps involve geometric analysis and trigonometric calculations.

### Approach
1. **Joint 1 (q1)**: Align the manipulator with the target's projection in the XZ-plane using the arctangent function.
2. **Joints 2 and 3 (q2, q3)**: Treat the remaining structure as a planar 2R robot to solve for these angles using the law of cosines and geometric inverse kinematics.
3. **Joint 4 (q4)**: Since the fourth joint does not affect the position, it can be set to zero.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    # Check if the target y is within the fixed y-coordinate (due to robot structure)
    # As per problem statement, assume target is reachable, so y is ignored
    
    # Compute q1 to align with the target in XZ-plane
    q1 = np.arctan2(x, z)
    
    # Project the target to Revolute1's XZ-plane (after q1 rotation)
    D = np.hypot(x, z)
    
    # Parameters for the planar 2R arm (Revolute2 and Revolute3)
    a = 0.39225  # Revolute3's origin in Revolute2's frame (Z-axis)
    b = np.hypot(0.093, 0.09465)  # Distance from Revolute3 to TCP
    
    # Distance from Revolute2's origin to TCP (subtract Revolute2's Z offset from Revolute1)
    D_prime = D - 0.425
    
    # Check if D_prime is within the reachable range
    # As per problem statement, assume it's reachable
    
    # Solve for q3 using the law of cosines
    cos_q3 = (D_prime**2 - a**2 - b**2) / (2 * a * b)
    q3 = np.arccos(np.clip(cos_q3, -1.0, 1.0))  # Ensure within valid range
    
    # Two possible solutions for q3 (elbow up/down)
    q3 = q3  # Choose elbow up solution
    
    # Solve for q2 using geometric method
    gamma = np.arctan2(0.093, 0.09465)  # Fixed angle from Revolute3 to TCP
    alpha = np.arctan2(b * np.sin(q3), a + b * np.cos(q3))
    q2 = np.arctan2(D_prime, 0) - alpha - gamma  # D_prime is along X-axis after q1
    
    # Set q4 to 0 (doesn't affect position)
    q4 = 0.0
    
    return (q1, q2, q3, q4)
```

### Explanation
1. **Joint 1 (q1)**: The angle is calculated using `atan2(x, z)` to align the manipulator with the target's projection in the XZ-plane.
2. **Joints 2 and 3 (q2, q3)**: These are determined by treating the structure as a planar 2R robot. The law of cosines helps find `q3`, and geometric relationships solve for `q2`.
3. **Joint 4 (q4)**: Since it doesn't affect the position, it's set to zero. This solution assumes the target is reachable and within the manipulator's workspace.