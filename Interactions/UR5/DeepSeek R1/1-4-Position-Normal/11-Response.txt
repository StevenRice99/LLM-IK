To solve the inverse kinematics for the 4-DOF manipulator, we need to determine the joint angles (q1, q2, q3, q4) such that the Tool Center Point (TCP) reaches the target position (x, y, z). The solution involves geometric analysis and trigonometric calculations, considering the structure of the manipulator and the offsets of each link.

### Approach
1. **Joint 1 (q1)**: Calculate the angle to align the manipulator with the target's projection in the XZ-plane.
2. **Joints 2 and 3 (q2, q3)**: Treat the structure as a planar 2R robot (Revolute 2 and Revolute 3) to solve for these angles using the law of cosines and geometric inverse kinematics. Consider both possible solutions (elbow up and elbow down) for q3 and select the appropriate one.
3. **Joint 4 (q4)**: Since the fourth joint does not affect the position, it is set to zero.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    # Link lengths and offsets
    a1 = 0.425  # Revolute1 to Revolute2
    a2 = 0.39225  # Revolute2 to Revolute3
    a3 = np.hypot(0.093, 0.09465)  # Revolute3 to TCP (combined offset)
    gamma = np.arctan2(0.093, 0.09465)  # Angle of TCP offset from Revolute3
    
    # Compute direction to target and effective distance
    theta = np.arctan2(x_target, z_target)
    D = np.hypot(x_target, z_target)
    
    # Effective target for Revolute3 (accounting for TCP offset)
    D_eff = D - a3 * np.cos(gamma)
    
    # Solve for q2 using law of cosines with adjusted link lengths
    cos_q2 = (D_eff**2 - a1**2 - a2**2) / (2 * a1 * a2)
    cos_q2 = np.clip(cos_q2, -1.0, 1.0)
    q2_1 = np.arccos(cos_q2)
    q2_2 = -q2_1
    
    # Calculate corresponding q1 for both solutions
    alpha_1 = np.arctan2(a2 * np.sin(q2_1), a1 + a2 * np.cos(q2_1))
    q1_1 = theta - alpha_1
    
    alpha_2 = np.arctan2(a2 * np.sin(q2_2), a1 + a2 * np.cos(q2_2))
    q1_2 = theta - alpha_2
    
    # Calculate q3 for both solutions
    q3_1 = gamma - (q1_1 + q2_1)
    q3_2 = gamma - (q1_2 + q2_2)
    
    # Choose the solution with minimal joint movement
    if abs(q3_1) + abs(q2_1) <= abs(q3_2) + abs(q2_2):
        q1, q2, q3 = q1_1, q2_1, q3_1
    else:
        q1, q2, q3 = q1_2, q2_2, q3_2
    
    # Normalize angles to [-π, π]
    q1 = (q1 + np.pi) % (2 * np.pi) - np.pi
    q2 = (q2 + np.pi) % (2 * np.pi) - np.pi
    q3 = (q3 + np.pi) % (2 * np.pi) - np.pi
    
    return (q1, q2, q3, 0.0)
```

### Explanation
1. **Joint 1 (q1)**: The angle is calculated using `arctan2(x_target, z_target)` to align the manipulator with the target's direction in the XZ-plane.
2. **Joints 2 and 3 (q2, q3)**: The effective target for Revolute3 is computed by adjusting the original target with the TCP's offset. The law of cosines is used to solve for q2, considering both elbow-up and elbow-down configurations. The corresponding q1 and q3 are computed to ensure the TCP reaches the target.
3. **Joint 4 (q4)**: Set to zero as it does not affect the position. The solution selects the configuration with minimal joint movement to avoid unnecessary rotations.

This approach ensures that the TCP reaches the target position by accurately accounting for the geometric relationships and joint constraints of the manipulator.