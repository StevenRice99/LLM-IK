To solve this problem, we need to determine the joint angles (q1, q2, q3, q4) for a 4-DOF robotic arm such that the Tool Center Point (TCP) reaches a specified target position (x, y, z). The solution involves geometric analysis and trigonometric calculations to account for the arm's structure and joint constraints.

### Approach
1. **Joint 1 (q1)**: Align the robotic arm with the target's projection in the XZ-plane using the arctangent function.
2. **Joints 2 and 3 (q2, q3)**: Treat the structure as a planar 2R robot (Revolute 2 and Revolute 3) to solve for these angles using the law of cosines and geometric inverse kinematics. The third link (Revolute 4 and TCP) is considered as part of the end effector.
3. **Joint 4 (q4)**: Since the fourth joint does not affect the position, it can be set to zero.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    # Compute q1 to align with the target in the XZ-plane
    q1 = np.arctan2(x, z)
    D = np.hypot(x, z)
    
    # Link lengths
    L1 = 0.425  # Revolute2's origin from Revolute1
    L2 = 0.39225  # Revolute3's origin from Revolute2
    L3 = np.hypot(0.093, 0.09465)  # Distance from Revolute3 to TCP
    
    # Effective target distance after Revolute1
    D_eff = D - L1
    
    # Solve for q3 using the law of cosines
    cos_q3 = (D_eff**2 - L2**2 - L3**2) / (2 * L2 * L3)
    q3 = np.arccos(np.clip(cos_q3, -1.0, 1.0))
    
    # Solve for q2 considering the geometry of the third link
    gamma = np.arctan2(0.093, 0.09465)  # Angle of TCP relative to Revolute3
    alpha = np.arctan2(L3 * np.sin(q3), L2 + L3 * np.cos(q3))
    q2 = np.arctan2(D_eff, 0) - alpha - gamma
    
    # q4 does not affect position, set to 0
    q4 = 0.0
    
    return (q1, q2, q3, q4)
```

### Explanation
1. **Joint 1 (q1)**: The angle is calculated using `atan2(x, z)` to align the robotic arm with the target's projection in the XZ-plane.
2. **Joints 2 and 3 (q2, q3)**: These are determined by treating the structure as a planar 2R robot. The law of cosines helps find `q3`, and geometric relationships solve for `q2`. The third link's contribution is considered by adjusting the target position using the effective distance and angle.
3. **Joint 4 (q4)**: Since it doesn't affect the position, it's set to zero. This solution assumes the target is reachable and within the manipulator's workspace.

This approach ensures that the TCP reaches the target position by correctly accounting for the geometric configuration and joint constraints of the robotic arm.