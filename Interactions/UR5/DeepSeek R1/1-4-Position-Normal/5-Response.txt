To solve this problem, we need to determine the joint angles (q1, q2, q3, q4) for a 4-DOF robotic arm such that the Tool Center Point (TCP) reaches a specified target position (x, y, z). The solution involves geometric analysis and trigonometric calculations to account for the arm's structure and joint constraints.

### Approach
1. **Joint 1 (q1)**: Calculate the angle to align the robotic arm with the target's projection in the XZ-plane.
2. **Joints 2 and 3 (q2, q3)**: Treat the structure as a planar 2R robot (Revolute 2 and Revolute 3) to solve for these angles using the law of cosines and geometric inverse kinematics. Consider both possible solutions (elbow up and elbow down) for q3 and select the appropriate one.
3. **Joint 4 (q4)**: Since the fourth joint does not affect the position, it is set to zero.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    # Compute q1 to align with the target in the XZ-plane
    q1 = np.arctan2(x, z)
    
    # Position of Revolute2's origin in world frame
    rev2_x = 0.425 * np.sin(q1)
    rev2_z = 0.425 * np.cos(q1)
    
    # Effective target position relative to Revolute2's origin
    dx = x - rev2_x
    dz = z - rev2_z
    D_eff = np.hypot(dx, dz)
    
    # Link lengths for the planar 2R arm
    L2 = 0.39225
    L3 = np.hypot(0.093, 0.09465)  # Approximately 0.1327
    
    # Solve for q3 using law of cosines (two solutions)
    cos_q3 = (D_eff**2 - L2**2 - L3**2) / (2 * L2 * L3)
    cos_q3 = np.clip(cos_q3, -1.0, 1.0)
    q3_1 = np.arccos(cos_q3)
    q3_2 = -q3_1
    
    # Solve for q2 for each q3 solution
    angle_to_target = np.arctan2(dz, dx)
    gamma = np.arctan2(0.093, 0.09465)  # Angle from Revolute3 to TCP
    
    # For q3_1
    alpha_1 = np.arctan2(L3 * np.sin(q3_1), L2 + L3 * np.cos(q3_1))
    q2_1 = angle_to_target - alpha_1 - gamma
    
    # For q3_2
    alpha_2 = np.arctan2(L3 * np.sin(q3_2), L2 + L3 * np.cos(q3_2))
    q2_2 = angle_to_target - alpha_2 - gamma
    
    # Choose the solution with the smaller |q3|
    if abs(q3_1) <= abs(q3_2):
        q2, q3 = q2_1, q3_1
    else:
        q2, q3 = q2_2, q3_2
    
    # Set q4 to 0 (doesn't affect position)
    q4 = 0.0
    
    return (q1, q2, q3, q4)
```

### Explanation
1. **Joint 1 (q1)**: The angle is calculated using `atan2(x, z)` to align the robotic arm with the target's projection in the XZ-plane.
2. **Joints 2 and 3 (q2, q3)**: These are determined by treating the structure as a planar 2R robot. The law of cosines helps find two possible solutions for `q3` (elbow up and elbow down). The angle `q2` is computed for each solution, and the solution with the smaller absolute value of `q3` is chosen to avoid joint limits and ensure feasibility.
3. **Joint 4 (q4)**: Since it doesn't affect the position, it's set to zero. This solution assumes the target is reachable and within the manipulator's workspace.

This approach ensures that the TCP reaches the target position by correctly accounting for the geometric configuration and joint constraints of the robotic arm, considering both possible solutions for the elbow configuration.