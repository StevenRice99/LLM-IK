To solve this problem, we need to determine the joint angles for a 4-DOF serial manipulator to reach a specified position and orientation. The solution involves breaking down the problem into position and orientation components, leveraging existing solutions for sub-chains, and combining them to form a complete solution.

### Approach
1. **Positioning the End-Effector**: The first three joints (Y-axis rotations) are responsible for positioning the end-effector. We solve for these using inverse kinematics for a planar 3R arm, adjusted for the TCP offset.
2. **Orientation Adjustment**: The fourth joint (Z-axis rotation) adjusts the end-effector's orientation. We compute this by decomposing the target orientation matrix and extracting the necessary Z rotation.

### Solution Code
```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    roll, pitch, yaw = r

    # Compute the target rotation matrix from RPY angles (XYZ order)
    cr, sr = math.cos(roll), math.sin(roll)
    cp, sp = math.cos(pitch), math.sin(pitch)
    cy, sy = math.cos(yaw), math.sin(yaw)

    R_x = np.array([[1, 0, 0],
                    [0, cr, -sr],
                    [0, sr, cr]])
    R_y = np.array([[cp, 0, sp],
                    [0, 1, 0],
                    [-sp, 0, cp]])
    R_z = np.array([[cy, -sy, 0],
                    [sy, cy, 0],
                    [0, 0, 1]])
    R_target = R_z @ R_y @ R_x

    # Extract theta_sum from the target rotation matrix
    r13 = R_target[0, 2]
    r33 = R_target[2, 2]
    theta_sum = math.atan2(r13, r33)

    # Calculate the position of Revolute 3's origin (accounting for TCP offset)
    C_tcp = 0.09465
    pos3_x = x_target - C_tcp * math.sin(theta_sum)
    pos3_z = z_target - C_tcp * math.cos(theta_sum)

    # Solve for theta1 and theta2 using two-link inverse kinematics
    a = 0.425
    b = 0.39225
    x = pos3_x
    z = pos3_z
    d_sq = x**2 + z**2

    cos_theta2 = (d_sq - a**2 - b**2) / (2 * a * b)
    cos_theta2 = max(min(cos_theta2, 1.0), -1.0)
    theta2_1 = math.acos(cos_theta2)
    theta2_2 = -theta2_1

    solutions = []
    for theta2 in [theta2_1, theta2_2]:
        denom = a + b * math.cos(theta2)
        num = b * math.sin(theta2)
        theta1 = math.atan2(x, z) - math.atan2(num, denom)
        x_calc = a * math.sin(theta1) + b * math.sin(theta1 + theta2)
        z_calc = a * math.cos(theta1) + b * math.cos(theta1 + theta2)
        if math.isclose(x_calc, x, abs_tol=1e-5) and math.isclose(z_calc, z, abs_tol=1e-5):
            solutions.append((theta1, theta2))

    # Select the first valid solution (problem states target is reachable)
    theta1, theta2 = solutions[0] if solutions else (0.0, 0.0)

    # Compute theta3
    theta3 = theta_sum - theta1 - theta2

    # Compute theta4 from the remaining rotation
    R_y_sum = np.array([
        [math.cos(theta_sum), 0, math.sin(theta_sum)],
        [0, 1, 0],
        [-math.sin(theta_sum), 0, math.cos(theta_sum)]
    ])
    R_remaining = R_y_sum.T @ R_target
    theta4 = math.atan2(R_remaining[1, 0], R_remaining[0, 0])

    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Rotation Matrix Calculation**: The target orientation is converted from Euler angles (roll, pitch, yaw) to a rotation matrix using the XYZ order.
2. **Theta Sum Calculation**: The sum of the first three joint angles (theta_sum) is derived from the target rotation matrix.
3. **Position Adjustment**: The position of the third joint is adjusted by subtracting the TCP offset from the target position.
4. **Two-Link Inverse Kinematics**: The first two joint angles (theta1 and theta2) are computed using inverse kinematics for a two-link planar arm.
5. **Third Joint Angle**: The third joint angle (theta3) is determined by subtracting theta1 and theta2 from theta_sum.
6. **Fourth Joint Angle**: The fourth joint angle (theta4) is extracted from the remaining rotation after aligning the first three joints.

This approach efficiently combines position and orientation calculations to solve the inverse kinematics for the given 4-DOF manipulator.