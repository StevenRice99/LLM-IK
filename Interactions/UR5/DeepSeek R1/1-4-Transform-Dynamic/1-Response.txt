To solve the inverse kinematics for the 4-DOF manipulator, we first determine the joint angles for positioning using the first three Y-axis joints and then compute the fourth Z-axis joint angle to achieve the desired orientation.

### Approach
1. **Positioning (Joints 1-3):** 
   - Use the existing solution for a 3-DOF arm to compute the first three joint angles (θ₁, θ₂, θ₃) based on the target position. This involves solving for the planar position using geometric methods and adjusting for link lengths.
   
2. **Orientation (Joint 4):** 
   - Compute the fourth joint angle (θ₄) by aligning the end-effector's orientation with the target. This involves deriving the required Z-axis rotation after accounting for the cumulative Y-axis rotations from the first three joints.

### Solution Code
```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    rx, ry, rz = r

    # Compute theta1 using the existing code 1 approach
    theta1 = math.atan2(x_target, z_target)

    # Adjust the target position to the coordinate frame after theta1 rotation
    cos_theta1 = math.cos(theta1)
    sin_theta1 = math.sin(theta1)
    x_rot = x_target * cos_theta1 + z_target * sin_theta1
    z_rot = -x_target * sin_theta1 + z_target * cos_theta1
    y_rot = y_target + 0.1197  # Adjust for Revolute 2's y offset

    # Compute the target orientation's rotation matrix
    R_roll = np.array([[1, 0, 0], [0, np.cos(rx), -np.sin(rx)], [0, np.sin(rx), np.cos(rx)]])
    R_pitch = np.array([[np.cos(ry), 0, np.sin(ry)], [0, 1, 0], [-np.sin(ry), 0, np.cos(ry)]])
    R_yaw = np.array([[np.cos(rz), -np.sin(rz), 0], [np.sin(rz), np.cos(rz), 0], [0, 0, 1]])
    R_target = R_yaw @ R_pitch @ R_roll

    # Compute theta_sum from the orientation matrix
    r13 = R_target[0, 2]
    r33 = R_target[2, 2]
    theta_sum = np.arctan2(r13, r33)

    # Compute theta2 and theta3 based on the adjusted position
    A = 0.39225
    B = 0.09465
    sin_S = np.sin(theta_sum)
    cos_S = np.cos(theta_sum)
    numerator_sin = x_rot - B * sin_S
    numerator_cos = z_rot - B * cos_S
    theta2 = np.arctan2(numerator_sin, numerator_cos)
    theta3 = theta_sum - theta2

    # Compute theta4 from the orientation matrix
    r21 = R_target[1, 0]
    r22 = R_target[1, 1]
    theta4 = np.arctan2(r21, r22)

    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Theta1 Calculation:** The first joint angle (θ₁) is determined using the arctangent of the target's x and z coordinates, aligning the arm in the correct plane.
2. **Position Adjustment:** The target position is transformed into the coordinate frame after θ₁ rotation to isolate the remaining planar problem for θ₂ and θ₃.
3. **Orientation Handling:** The target orientation is decomposed into a rotation matrix. The sum of the first three joint angles (θ_sum) is derived from elements of this matrix.
4. **Theta2 and Theta3:** These angles are computed using geometric relationships to achieve the adjusted target position.
5. **Theta4 Calculation:** The fourth joint angle is derived from the orientation matrix to align the end-effector's Z-axis rotation with the target orientation.

This approach efficiently combines geometric and algebraic methods to solve the inverse kinematics for both position and orientation.