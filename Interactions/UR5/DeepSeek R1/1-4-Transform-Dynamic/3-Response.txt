To solve this problem, we need to determine the joint angles for a 4-DOF manipulator to reach a target position and orientation. The solution involves calculating the first three joints (Y-axis rotations) to achieve the desired position and the fourth joint (Z-axis rotation) to achieve the desired orientation.

### Approach
1. **Position Calculation (Joints 1-3):** 
   - The first three joints are responsible for positioning the end-effector. We use geometric methods to solve for these joints by considering the link lengths and offsets.
   
2. **Orientation Calculation (Joint 4):** 
   - The fourth joint adjusts the orientation. After positioning the end-effector using the first three joints, we compute the required Z-axis rotation to align the end-effector's orientation with the target.

### Solution Code
```python
import numpy as np
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    rx, ry, rz = r

    # Compute the target orientation matrix
    R_roll = np.array([[1, 0, 0], [0, np.cos(rx), -np.sin(rx)], [0, np.sin(rx), np.cos(rx)]])
    R_pitch = np.array([[np.cos(ry), 0, np.sin(ry)], [0, 1, 0], [-np.sin(ry), 0, np.cos(ry)]])
    R_yaw = np.array([[np.cos(rz), -np.sin(rz), 0], [np.sin(rz), np.cos(rz), 0], [0, 0, 1]])
    R_target = R_yaw @ R_pitch @ R_roll

    # Parameters for the arm segments
    a1 = 0.425  # Revolute2's z offset
    a2 = 0.39225  # Revolute3's z offset
    a3 = 0.093 + 0.09465  # Revolute4's y offset + TCP's z offset

    # Target position in the plane (y is fixed at -0.0267)
    x = x_target
    z = z_target - a1  # Adjust for Revolute2's z offset

    # Solve for theta1, theta2, theta3 using geometric approach
    D = (x**2 + z**2 - a2**2 - a3**2) / (2 * a2 * a3)
    D = np.clip(D, -1.0, 1.0)  # Ensure D is within valid range for arccos
    theta3 = np.arccos(D)
    
    # Two possible solutions for theta3 (elbow up/down)
    theta3_1 = theta3
    theta3_2 = -theta3

    # Calculate theta2 for each theta3
    theta2_1 = np.arctan2(z, x) - np.arctan2(a3 * np.sin(theta3_1), a2 + a3 * np.cos(theta3_1))
    theta2_2 = np.arctan2(z, x) - np.arctan2(a3 * np.sin(theta3_2), a2 + a3 * np.cos(theta3_2))

    # Calculate theta1 (base rotation)
    theta1_1 = np.arctan2(x_target, z_target)
    theta1_2 = theta1_1  # Assuming theta1 is the same for both solutions

    # Choose the first solution (can be adjusted to select based on joint limits)
    theta1 = theta1_1
    theta2 = theta2_1
    theta3 = theta3_1

    # Compute R_123 = R1 * R2 * R3
    R1 = np.array([[np.cos(theta1), 0, np.sin(theta1)],
                   [0, 1, 0],
                   [-np.sin(theta1), 0, np.cos(theta1)]])
    R2 = np.array([[np.cos(theta2), 0, np.sin(theta2)],
                   [0, 1, 0],
                   [-np.sin(theta2), 0, np.cos(theta2)]])
    R3 = np.array([[np.cos(theta3), 0, np.sin(theta3)],
                   [0, 1, 0],
                   [-np.sin(theta3), 0, np.cos(theta3)]])
    R_123 = R1 @ R2 @ R3

    # Compute R4 = R_123.T @ R_target and extract theta4
    R4 = R_123.T @ R_target
    theta4 = np.arctan2(R4[1, 0], R4[0, 0])

    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Position Calculation:** 
   - The first three joints are solved using geometric methods considering the link lengths (0.425, 0.39225, and 0.18765). The target position is adjusted to account for the fixed y-coordinate and the first link's offset.
   
2. **Orientation Calculation:** 
   - After determining the first three joint angles, the rotation matrix for these joints is computed. The fourth joint's rotation matrix is derived by aligning the cumulative rotation of the first three joints with the target orientation. The Z-axis rotation angle (theta4) is extracted from this matrix.

This approach ensures that the end-effector reaches the desired position and orientation by decoupling the position and orientation problems, leveraging geometric solutions for position and matrix transformations for orientation.