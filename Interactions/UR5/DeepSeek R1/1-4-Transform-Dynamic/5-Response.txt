To solve this problem, we need to determine the joint angles for a 4-DOF manipulator to reach a target position and orientation. The solution involves calculating the first three joints (Y-axis rotations) to achieve the desired position and the fourth joint (Z-axis rotation) to achieve the desired orientation.

### Approach
1. **Position Calculation (Joints 1-3):** 
   - The first three joints are responsible for positioning the end-effector. We use geometric methods to solve for these joints by considering the link lengths and offsets.
   
2. **Orientation Calculation (Joint 4):** 
   - The fourth joint adjusts the orientation. After positioning the end-effector using the first three joints, we compute the required Z-axis rotation to align the end-effector's orientation with the target.

### Solution Code
```python
import numpy as np
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    rx, ry, rz = r

    # Compute the target orientation matrix
    R_roll = np.array([[1, 0, 0], [0, np.cos(rx), -np.sin(rx)], [0, np.sin(rx), np.cos(rx)]])
    R_pitch = np.array([[np.cos(ry), 0, np.sin(ry)], [0, 1, 0], [-np.sin(ry), 0, np.cos(ry)]])
    R_yaw = np.array([[np.cos(rz), -np.sin(rz), 0], [np.sin(rz), np.cos(rz), 0], [0, 0, 1]])
    R_target = R_yaw @ R_pitch @ R_roll

    # Extract theta_sum from the target orientation matrix
    r13 = R_target[0, 2]
    r33 = R_target[2, 2]
    theta_sum = math.atan2(r13, r33)

    # Link lengths
    L1 = 0.425  # Revolute2's z offset
    L2 = 0.39225  # Revolute3's z offset
    L3 = 0.093 + 0.09465  # Revolute4's y offset + TCP's z offset

    # Compute the intermediate target (x3, z3) for the first two links
    x3 = x_target - L3 * math.sin(theta_sum)
    z3 = z_target - L3 * math.cos(theta_sum)

    # Solve for theta1 and theta2 using the 2R inverse kinematics
    D_sq = x3**2 + z3**2
    D = math.sqrt(D_sq)
    if D > L1 + L2 or D < abs(L1 - L2):
        raise ValueError("Target position is unreachable")

    # Calculate theta2 using the law of cosines
    cos_theta2 = (D_sq - L1**2 - L2**2) / (2 * L1 * L2)
    cos_theta2 = np.clip(cos_theta2, -1.0, 1.0)
    theta2 = math.acos(cos_theta2)
    theta2 = -theta2  # Elbow down solution

    # Calculate theta1
    alpha = math.atan2(z3, x3)
    beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
    theta1 = alpha - beta

    # Calculate theta3
    theta3 = theta_sum - theta1 - theta2

    # Compute theta4 from the orientation matrix
    R1 = np.array([[math.cos(theta1), 0, math.sin(theta1)],
                   [0, 1, 0],
                   [-math.sin(theta1), 0, math.cos(theta1)]])
    R2 = np.array([[math.cos(theta2), 0, math.sin(theta2)],
                   [0, 1, 0],
                   [-math.sin(theta2), 0, math.cos(theta2)]])
    R3 = np.array([[math.cos(theta3), 0, math.sin(theta3)],
                   [0, 1, 0],
                   [-math.sin(theta3), 0, math.cos(theta3)]])
    R123 = R1 @ R2 @ R3
    R4 = R123.T @ R_target
    theta4 = math.atan2(R4[1, 0], R4[0, 0])

    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Position Calculation:** 
   - The first three joints are solved using geometric methods considering the link lengths (0.425, 0.39225, and 0.18765). The target position is adjusted to account for the contribution of the third link, and the first two joints are solved using the law of cosines and arctangent functions.
   
2. **Orientation Calculation:** 
   - After determining the first three joint angles, the rotation matrix for these joints is computed. The fourth joint's rotation matrix is derived by aligning the cumulative rotation of the first three joints with the target orientation. The Z-axis rotation angle (theta4) is extracted from this matrix.

This approach ensures that the end-effector reaches the desired position and orientation by decoupling the position and orientation problems, leveraging geometric solutions for position and matrix transformations for orientation.