To solve this problem, we need to determine the joint angles for a 4-DOF manipulator to reach a target position and orientation. The solution involves calculating the first three joints (Y-axis rotations) to achieve the desired position and the fourth joint (Z-axis rotation) to achieve the desired orientation.

### Approach
1. **Orientation Decomposition:** 
   - Decompose the target orientation matrix to determine the sum of the first three joint angles (θ_sum) and the fourth joint angle (θ₄).
   
2. **Position Adjustment:** 
   - Adjust the target position by accounting for the contribution of the third link based on θ_sum.
   
3. **2R Inverse Kinematics:** 
   - Solve for the first two joint angles (θ₁ and θ₂) using the adjusted target position and the link lengths of the first two joints.
   
4. **Third Joint Calculation:** 
   - Compute the third joint angle (θ₃) using the previously determined θ_sum, θ₁, and θ₂.

### Solution Code
```python
import numpy as np
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    rx, ry, rz = r

    # Compute the target orientation matrix
    R_roll = np.array([[1, 0, 0], [0, np.cos(rx), -np.sin(rx)], [0, np.sin(rx), np.cos(rx)]])
    R_pitch = np.array([[np.cos(ry), 0, np.sin(ry)], [0, 1, 0], [-np.sin(ry), 0, np.cos(ry)]])
    R_yaw = np.array([[np.cos(rz), -np.sin(rz), 0], [np.sin(rz), np.cos(rz), 0], [0, 0, 1]])
    R_target = R_yaw @ R_pitch @ R_roll

    # Extract theta4 from the orientation matrix (Z rotation)
    r21 = R_target[1, 0]
    r22 = R_target[1, 1]
    theta4 = math.atan2(r21, r22)

    # Extract theta_sum (theta1 + theta2 + theta3) from the orientation matrix
    r13 = R_target[0, 2]
    r33 = R_target[2, 2]
    theta_sum = math.atan2(r13, r33)

    # Adjust target position by subtracting the contribution of the third link (0.09465)
    x_adj = x_target - 0.09465 * math.sin(theta_sum)
    z_adj = z_target - 0.09465 * math.cos(theta_sum)

    # Solve 2R inverse kinematics for the first two links (0.425 and 0.39225)
    L1 = 0.425
    L2 = 0.39225
    D_sq = x_adj**2 + z_adj**2
    D = math.sqrt(D_sq)

    # Check if the target is reachable
    if not (abs(L1 - L2) <= D <= L1 + L2):
        raise ValueError("Target position is unreachable")

    # Calculate theta2 using the law of cosines (elbow down solution)
    cos_theta2 = (D_sq - L1**2 - L2**2) / (2 * L1 * L2)
    cos_theta2 = np.clip(cos_theta2, -1.0, 1.0)
    theta2 = -math.acos(cos_theta2)  # Elbow down

    # Calculate theta1
    alpha = math.atan2(z_adj, x_adj)
    beta = math.atan2(L2 * math.sin(-theta2), L1 + L2 * math.cos(-theta2))
    theta1 = alpha - beta

    # Calculate theta3
    theta3 = theta_sum - theta1 - theta2

    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Orientation Decomposition:** 
   - The target orientation matrix is decomposed to extract θ₄ (Z rotation) and θ_sum (sum of the first three Y rotations). This is done using elements of the rotation matrix to isolate the contributions of each joint.

2. **Position Adjustment:** 
   - The target position is adjusted by subtracting the contribution of the third link (0.09465) based on θ_sum. This isolates the position problem to the first two joints.

3. **2R Inverse Kinematics:** 
   - The adjusted position is used to solve for the first two joint angles (θ₁ and θ₂) using geometric methods. The law of cosines and arctangent functions are employed to determine these angles, ensuring the solution accounts for the link lengths.

4. **Third Joint Calculation:** 
   - The third joint angle (θ₃) is derived from the previously computed θ_sum, θ₁, and θ₂, ensuring the sum of the angles matches the required orientation.

This approach ensures that both the position and orientation of the end-effector are accurately achieved by systematically decomposing the problem and solving each component step-by-step.