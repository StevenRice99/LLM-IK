To solve this problem, we need to determine the joint angles for a 4-DOF serial manipulator to reach a target position and orientation. The solution involves both position and orientation calculations, considering the contributions of all four joints.

### Approach
1. **Orientation Calculation**:
   - Compute the target rotation matrix from the given Euler angles (roll, pitch, yaw).
   - Determine the fourth joint angle (theta4) using the second row of the target rotation matrix.
   - Calculate the sum of the first three joint angles (theta_sum) using the first row of the target rotation matrix and theta4.

2. **Position Adjustment**:
   - Adjust the target position to account for the fourth joint and the TCP offset, which simplifies the problem to solving for the first three joints.

3. **Inverse Kinematics for First Three Joints**:
   - Use the existing solution for the first three joints with the adjusted target position to find valid joint angles (theta1, theta2, theta3) that achieve the desired position while ensuring their sum equals theta_sum.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    roll, pitch, yaw = r

    # Compute the target rotation matrix from roll, pitch, yaw
    cr, sr = np.cos(roll), np.sin(roll)
    cp, sp = np.cos(pitch), np.sin(pitch)
    cy, sy = np.cos(yaw), np.sin(yaw)
    R_target = np.array([
        [cy * cp, cy * sp * sr - sy * cr, cy * sp * cr + sy * sr],
        [sy * cp, sy * sp * sr + cy * cr, sy * sp * cr - cy * sr],
        [-sp, cp * sr, cp * cr]
    ])

    # Solve for theta4 using the second row of R_target
    r21 = R_target[1, 0]
    r22 = R_target[1, 1]
    theta4 = np.arctan2(r21, r22)

    # Solve for theta_sum using the first row of R_target and theta4
    c4 = np.cos(theta4)
    s4 = np.sin(theta4)
    if np.isclose(abs(c4), 0.0):
        c_ts = 0.0
    else:
        c_ts = R_target[0, 0] / c4
    s_ts = R_target[0, 2]
    theta_sum = np.arctan2(s_ts, c_ts)

    # Adjust target position for the fourth joint and TCP offset
    offset = 0.18765  # 0.093 + 0.09465
    X = x_target - offset * np.sin(theta_sum)
    Z = z_target - offset * np.cos(theta_sum)

    # Existing solution adapted for the first three joints
    L1 = 0.425
    L2 = 0.39225
    d_sq = X ** 2 + Z ** 2
    cos_theta2 = (d_sq - L1**2 - L2**2) / (2 * L1 * L2)
    cos_theta2 = np.clip(cos_theta2, -1.0, 1.0)
    theta2 = np.arccos(cos_theta2)
    theta2_alt = -theta2

    solutions = []
    for t2 in [theta2, theta2_alt]:
        C = L1 + L2 * np.cos(t2)
        D = L2 * np.sin(t2)
        denom = C**2 + D**2
        if denom < 1e-6:
            continue
        sin_t1 = (C * X - D * Z) / denom
        cos_t1 = (D * X + C * Z) / denom
        if abs(sin_t1) > 1.0 or abs(cos_t1) > 1.0:
            continue
        t1 = np.arctan2(sin_t1, cos_t1)
        t3 = theta_sum - t1 - t2
        solutions.append((t1, t2, t3))

    best_error = float('inf')
    best_sol = (0.0, 0.0, 0.0)
    for sol in solutions:
        t1, t2, t3 = sol
        if not (-2*np.pi <= t1 <= 2*np.pi and -2*np.pi <= t2 <= 2*np.pi and -2*np.pi <= t3 <= 2*np.pi):
            continue
        x = L1 * np.sin(t1) + L2 * np.sin(t1 + t2)
        z = L1 * np.cos(t1) + L2 * np.cos(t1 + t2)
        pos_error = np.hypot(x - X, z - Z)
        total_error = pos_error  # Orientation error is zero as theta_sum is enforced
        if total_error < best_error:
            best_error = total_error
            best_sol = sol

    theta1, theta2, theta3 = best_sol
    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Orientation Calculation**:
   - The target rotation matrix is derived from the given Euler angles.
   - The fourth joint angle (theta4) is determined using the second row of the rotation matrix.
   - The sum of the first three joint angles (theta_sum) is calculated using the first row of the rotation matrix and theta4.

2. **Position Adjustment**:
   - The target position is adjusted to account for the fourth joint and TCP offset, simplifying the problem to solving for the first three joints.

3. **Inverse Kinematics for First Three Joints**:
   - The existing solution is adapted to solve for the first three joints using the adjusted target position, ensuring their sum equals theta_sum. The best solution is selected based on position error.

This approach efficiently combines orientation and position calculations to determine the required joint angles for the manipulator to reach the target.