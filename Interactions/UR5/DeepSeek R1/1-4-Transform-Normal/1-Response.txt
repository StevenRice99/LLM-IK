To solve the inverse kinematics for the given 4-DOF robot manipulator, we need to determine the joint angles (θ₁, θ₂, θ₃, θ₄) that position and orient the end-effector at the target position `p` and orientation `r`. The solution involves both orientation and position analysis.

### Approach
1. **Orientation Analysis**:
   - The end-effector orientation is determined by the cumulative rotations of the joints. The first three joints rotate around the Y-axis, and the fourth joint rotates around the Z-axis.
   - The target orientation (given as roll, pitch, yaw) is converted to a rotation matrix. The robot's orientation is derived from the product of rotations due to each joint.
   - Using trigonometric identities, we solve for the sum of the first three joint angles (θ_sum = θ₁ + θ₂ + θ₃) and the fourth joint angle (θ₄).

2. **Position Analysis**:
   - The position of the end-effector is derived using forward kinematics, considering the geometric configuration of the robot links.
   - By solving the system of equations derived from the forward kinematics, we determine the individual joint angles θ₁, θ₂, and θ₃ using θ_sum obtained from the orientation analysis.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    r_x, r_y, r_z = r
    x, y, z = p

    # Orientation part to compute theta_sum and theta4
    cos_rx = math.cos(r_x)
    cos_ry = math.cos(r_y)
    cos_theta_sum = cos_ry * cos_rx
    theta_sum = math.acos(cos_theta_sum)
    sin_theta_sum = math.sqrt(1 - cos_theta_sum**2)

    if abs(sin_theta_sum) < 1e-9:
        theta4 = r_z
    else:
        sin_theta4 = math.sin(r_z) * cos_ry
        cos_theta4 = math.sin(r_y) / sin_theta_sum
        theta4 = math.atan2(sin_theta4, cos_theta4)

    # Position part to compute theta1, theta2, theta3
    C = 0.09465 * math.sin(theta_sum)
    D_val = 0.09465 * math.cos(theta_sum)
    A = 0.425
    B = 0.39225

    numerator = (x - C)**2 + (z - D_val)**2 - A**2 - B**2
    denominator = 2 * A * B
    K = numerator / denominator

    if K < -1 or K > 1:
        raise ValueError("Unreachable target position")

    t2 = math.acos(K)
    solutions = []
    for current_t2 in [t2, -t2]:
        M = A + B * math.cos(current_t2)
        N = B * math.sin(current_t2)
        denom = M**2 + N**2
        if denom < 1e-9:
            continue
        sin_t1 = (M * (x - C) - N * (z - D_val)) / denom
        cos_t1 = (M * (z - D_val) + N * (x - C)) / denom
        t1 = math.atan2(sin_t1, cos_t1)
        t3 = theta_sum - t1 - current_t2
        solutions.append((t1, current_t2, t3))

    if not solutions:
        raise ValueError("No valid solution found")

    t1, t2_val, t3 = solutions[0]

    return (t1, t2_val, t3, theta4)
```

### Explanation
1. **Orientation Calculation**:
   - The sum of the first three joint angles (θ_sum) is derived using the target roll and pitch angles.
   - The fourth joint angle (θ₄) is determined using the target yaw and the derived θ_sum.

2. **Position Calculation**:
   - The target position is adjusted based on the derived θ_sum.
   - Using geometric transformations and trigonometric identities, the joint angles θ₁, θ₂, and θ₃ are computed by solving the system of equations derived from the forward kinematics.

This approach ensures that the robot's end-effector reaches the desired position and orientation, leveraging both orientation and position analysis to solve the inverse kinematics problem.