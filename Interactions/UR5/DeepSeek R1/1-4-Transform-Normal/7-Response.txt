To solve the inverse kinematics for the given 4-DOF robot manipulator, we need to accurately compute the joint angles to reach the desired position and orientation. The previous errors were due to incorrect calculation of the fourth joint angle (θ₄). Here's the corrected approach:

### Approach
1. **Orientation Analysis**:
   - Compute two possible values for the sum of the first three joint angles (θ_sum) considering both positive and negative solutions.
   - Correctly derive θ₄ using the target's roll (r_x), pitch (r_y), and yaw (r_z) angles with the appropriate trigonometric relationships.

2. **Position Analysis**:
   - Use geometric transformations to solve for the individual joint angles θ₁, θ₂, and θ₃ based on the computed θ_sum.
   - Generate multiple solutions by considering different configurations and select the one that best matches the target.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    r_x, r_y, r_z = r
    x_target, y_target, z_target = p

    cos_rx = math.cos(r_x)
    cos_ry = math.cos(r_y)
    cos_theta_sum = cos_ry * cos_rx
    theta_sum_pos = math.acos(max(min(cos_theta_sum, 1.0), -1.0))
    theta_sum_neg = -theta_sum_pos
    possible_theta_sums = [theta_sum_pos, theta_sum_neg]

    solutions = []
    for theta_sum in possible_theta_sums:
        sin_theta_sum = math.sin(theta_sum)
        cos_theta_sum_val = math.cos(theta_sum)

        numerator_theta4 = math.sin(r_z) * math.cos(r_x) - math.cos(r_z) * math.sin(r_y) * math.sin(r_x)
        denominator_theta4 = math.cos(r_y) * math.cos(r_z)
        theta4 = math.atan2(numerator_theta4, denominator_theta4)

        C = 0.09465 * sin_theta_sum
        D_val = 0.09465 * cos_theta_sum_val
        A = 0.425
        B = 0.39225

        numerator = (x_target - C)**2 + (z_target - D_val)**2 - A**2 - B**2
        denominator = 2 * A * B
        K = numerator / denominator
        K = max(min(K, 1.0), -1.0)

        try:
            t2 = math.acos(K)
        except ValueError:
            continue

        for current_t2 in [t2, -t2]:
            M = A + B * math.cos(current_t2)
            N = B * math.sin(current_t2)
            denom = M**2 + N**2
            if denom < 1e-9:
                continue
            sin_t1 = (M * (x_target - C) - N * (z_target - D_val)) / denom
            cos_t1 = (M * (z_target - D_val) + N * (x_target - C)) / denom
            t1 = math.atan2(sin_t1, cos_t1)
            t3 = theta_sum - t1 - current_t2
            solutions.append((t1, current_t2, t3, theta4))

    if not solutions:
        raise ValueError("No valid solution found")

    best_solution = min(solutions, key=lambda sol: (sol[0] % (2*math.pi), sol[1] % (2*math.pi), sol[2] % (2*math.pi), sol[3] % (2*math.pi)))
    return best_solution
```

### Explanation
1. **Orientation Calculation**:
   - The sum of the first three joint angles (θ_sum) is derived from the target's pitch and roll angles, considering both positive and negative solutions.
   - The fourth joint angle (θ₄) is computed using the correct trigonometric relationship derived from the target's roll, pitch, and yaw angles, ensuring accurate orientation alignment.

2. **Position Calculation**:
   - The target position is adjusted based on the derived θ_sum. Geometric transformations and trigonometric identities are used to solve for θ₁, θ₂, and θ₃.
   - Multiple solutions are generated for each θ_sum, and the best solution is selected based on modulo operations to handle periodicity, ensuring the closest match to the target configuration.

This approach ensures accurate computation of joint angles, addressing previous errors in orientation calculation and providing reliable solutions for reaching the target position and orientation.