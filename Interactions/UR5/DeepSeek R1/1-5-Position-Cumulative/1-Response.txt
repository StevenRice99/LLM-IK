To solve this problem, we need to determine the joint angles for a 5-DOF robotic arm such that the Tool Center Point (TCP) reaches a specified position in 3D space. The solution involves calculating each joint angle step-by-step, considering the kinematic chain and transformations between each link.

### Approach
1. **Calculate θ4 (Revolute 4 Joint Angle)**: The y-coordinate of the TCP is influenced by θ4. By rearranging the kinematic equations, we can solve for θ4 using the target y-coordinate.
2. **Adjust Target Position**: The displacement from Revolute 3's origin to the TCP is determined by θ4. This displacement is used to adjust the target position for the first three joints.
3. **Solve for θ1, θ2, and θ3**: Using the adjusted target position, we apply existing inverse kinematics solutions for the first three joints (θ1, θ2, θ3).
4. **Set θ5**: Since θ5 does not affect the position of the TCP (it only affects orientation), it can be set to a default value (0 in this case).

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x_target, y_target, z_target = p

    # Calculate theta4 from the y-coordinate
    y_adjusted = y_target + 0.0267  # Adjusting for the fixed offset in y
    cos_theta4 = y_adjusted / 0.0823
    theta4 = math.acos(cos_theta4)

    # Consider both possible solutions for theta4
    theta4_solutions = [theta4, -theta4]

    for theta4 in theta4_solutions:
        # Calculate the displacement components in Revolute3's frame
        D_x = -0.0823 * math.sin(theta4)
        D_z = 0.09465

        # Adjust the target x and z for the first three joints
        adjusted_x = x_target - D_x
        adjusted_z = z_target - D_z

        # Solve for theta1 and theta2 using existing solution for the first two joints
        # Using existing solution 2 (EXISTING2) which solves theta1 and theta2
        L1 = 0.425
        L2 = 0.39225
        d = math.sqrt(adjusted_x ** 2 + adjusted_z ** 2)
        cos_theta2 = (d ** 2 - L1 ** 2 - L2 ** 2) / (2 * L1 * L2)
        if cos_theta2 < -1 or cos_theta2 > 1:
            continue  # Skip if unreachable, though problem states it's reachable

        theta2 = math.acos(cos_theta2)
        cross_product = adjusted_x * (L1 + L2 * math.cos(theta2)) - adjusted_z * (L2 * math.sin(theta2))
        if cross_product < 0:
            theta2 = -theta2

        alpha = math.atan2(adjusted_x, adjusted_z)
        beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
        theta1 = alpha - beta

        # Theta3 is set to 0 as per existing solution 3
        theta3 = 0.0
        # Theta5 does not affect position, set to 0
        theta5 = 0.0

        return (theta1, theta2, theta3, theta4, theta5)

    # Fallback in case of no solution (though problem states it's reachable)
    theta1 = math.atan2(x_target, z_target)
    theta2 = 0.0
    theta3 = 0.0
    theta4 = 0.0
    theta5 = 0.0
    return (theta1, theta2, theta3, theta4, theta5)
```

### Explanation
1. **θ4 Calculation**: The y-coordinate of the TCP is adjusted to account for fixed offsets in the kinematic chain. Using trigonometry, we solve for θ4.
2. **Displacement Adjustment**: The displacement from Revolute 3's origin to the TCP is calculated based on θ4. This displacement is used to adjust the target position for the first three joints.
3. **Existing Solutions for θ1, θ2, θ3**: Using the adjusted target position, we apply an existing inverse kinematics solution to solve for the first three joint angles.
4. **θ5 Handling**: Since θ5 does not affect the position, it is set to a default value (0).

This approach ensures that the TCP reaches the desired position by systematically solving each joint angle while considering the kinematic chain and transformations.