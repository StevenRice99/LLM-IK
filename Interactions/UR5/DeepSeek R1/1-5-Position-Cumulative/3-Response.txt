To solve this problem, we need to determine the joint angles for a 5-DOF robotic arm such that the Tool Center Point (TCP) reaches a specified position in 3D space. The solution involves calculating each joint angle step-by-step, considering the kinematic chain and transformations between each link.

### Approach
1. **Calculate θ4 (Revolute 4 Joint Angle)**: The y-coordinate of the TCP is influenced by θ4. By rearranging the kinematic equations, we can solve for θ4 using the target y-coordinate.
2. **Adjust Target Position**: The displacement from Revolute 3's origin to the TCP is determined by θ4 and the combined rotation of the first three joints. This displacement is used to adjust the target position for the first three joints.
3. **Solve for θ1, θ2, and θ3**: Using the adjusted target position, we apply inverse kinematics for the first three joints (θ1, θ2, θ3) and compute θ3 based on the combined rotation angle.
4. **Set θ5**: Since θ5 does not affect the position of the TCP (it only affects orientation), it is set to a default value (0).

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x_target, y_target, z_target = p

    # Calculate theta4 from the y-coordinate
    y_adjusted = y_target + 0.0267  # Adjusting for the fixed offset in y
    cos_theta4 = y_adjusted / 0.0823
    if cos_theta4 < -1 or cos_theta4 > 1:
        raise ValueError("Target y-coordinate is out of reachable range")
    theta4 = math.acos(cos_theta4)

    # Consider both possible solutions for theta4
    theta4_solutions = [theta4, -theta4]

    for theta4 in theta4_solutions:
        # Calculate the displacement components based on theta4 and theta_total (theta1 + theta2 + theta3)
        R = math.hypot(0.0823 * math.sin(theta4), 0.09465)
        phi = math.atan2(0.0823 * math.sin(theta4), 0.09465)

        # Solve for theta_total using geometric relationship
        K_numerator = x_target**2 + z_target**2 + R**2 - (0.425 + 0.39225)**2
        K = K_numerator / (2 * R)
        denominator = math.hypot(x_target, z_target)
        if denominator == 0:
            continue
        sin_val = K / denominator
        if abs(sin_val) > 1:
            continue
        alpha = math.atan2(z_target, x_target)
        theta_total1 = math.asin(sin_val) - alpha - phi
        theta_total2 = math.pi - math.asin(sin_val) - alpha - phi

        for theta_total in [theta_total1, theta_total2]:
            # Calculate displacement components
            D_x = R * math.sin(theta_total + phi)
            D_z = R * math.cos(theta_total + phi)

            # Adjust target for the first three joints
            x_adj = x_target - D_x
            z_adj = z_target - D_z

            # Solve for theta1 and theta2 using existing solution for the first two joints
            L1 = 0.425
            L2 = 0.39225
            d = math.hypot(x_adj, z_adj)
            if d > L1 + L2 or d < abs(L1 - L2):
                continue

            cos_theta2 = (d**2 - L1**2 - L2**2) / (2 * L1 * L2)
            theta2 = math.acos(cos_theta2)
            cross_product = x_adj * (L1 + L2 * math.cos(theta2)) - z_adj * (L2 * math.sin(theta2))
            if cross_product < 0:
                theta2 = -theta2

            alpha_ik = math.atan2(x_adj, z_adj)
            beta_ik = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
            theta1 = alpha_ik - beta_ik

            # Compute theta3
            theta3 = theta_total - theta1 - theta2

            # Theta5 is set to 0 as it doesn't affect position
            theta5 = 0.0

            return (theta1, theta2, theta3, theta4, theta5)

    # Fallback in case of no solution (though problem states it's reachable)
    theta1 = math.atan2(x_target, z_target)
    theta2 = 0.0
    theta3 = 0.0
    theta4 = 0.0
    theta5 = 0.0
    return (theta1, theta2, theta3, theta4, theta5)
```

### Explanation
1. **θ4 Calculation**: The y-coordinate of the TCP is adjusted to account for fixed offsets in the kinematic chain. Using trigonometry, we solve for θ4.
2. **Displacement Adjustment**: The displacement from Revolute 3's origin to the TCP is calculated based on θ4 and the combined rotation of the first three joints. This displacement is used to adjust the target position for the first three joints.
3. **Existing Solutions for θ1, θ2, θ3**: Using the adjusted target position, we apply an existing inverse kinematics solution to solve for the first three joint angles. The combined rotation angle (θ_total) is used to compute θ3.
4. **θ5 Handling**: Since θ5 does not affect the position, it is set to a default value (0).

This approach ensures that the TCP reaches the desired position by systematically solving each joint angle while considering the kinematic chain and transformations.