To solve this problem, we need to determine the joint angles for a 5-DOF manipulator to reach a target position. The solution involves positioning the wrist (Revolute 4) using the first three joints and adjusting the end-effector (TCP) using the last two joints. 

### Approach
1. **Position the Wrist (Revolute 4)**:
   - Use the first two joints (theta1 and theta2) to position Revolute 4 such that the TCP can reach the target. Theta3 is set to zero as it doesn't affect the X-Z position of Revolute 4.
   
2. **Adjust TCP Position**:
   - Compute the vector from Revolute 4 to the target (dx, dz) and solve for theta4 and theta5 using trigonometric identities to align the TCP with the target.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x_target, y_target, z_target = p

    # Fixed Y-coordinate of Revolute 4
    y_revolute4 = -0.0267
    dy = y_target - y_revolute4

    # Check if the y component is reachable
    if abs(dy) > 0.17695:  # 0.09465 + 0.0823
        raise ValueError("Target y is out of reach")

    # Solve for theta1 and theta2 to position Revolute 4
    l1 = 0.425
    l2 = 0.39225
    r = math.hypot(x_target, z_target)
    cos_theta2 = (r**2 - l1**2 - l2**2) / (2 * l1 * l2)
    cos_theta2 = max(min(cos_theta2, 1.0), -1.0)
    theta2 = math.acos(cos_theta2)
    beta = math.atan2(x_target, z_target)
    alpha = math.atan2(l2 * math.sin(theta2), l1 + l2 * math.cos(theta2))
    theta1 = beta - alpha

    # Compute Revolute 4's position
    x_j4 = l1 * math.sin(theta1) + l2 * math.sin(theta1 + theta2)
    z_j4 = l1 * math.cos(theta1) + l2 * math.cos(theta1 + theta2)

    # Displacement from Revolute 4 to target
    dx = x_target - x_j4
    dz = z_target - z_j4

    # Solve for theta4 and theta5 based on dx and dz
    A = 0.09465
    B = 0.0823
    distance_sq = dx**2 + dz**2
    if distance_sq > (A + B)**2 or distance_sq < (A - B)**2:
        raise ValueError("Target xz is out of reach")

    # Calculate theta5 using the law of cosines
    cos_theta5 = (distance_sq - A**2 - B**2) / (2 * A * B)
    cos_theta5 = max(min(cos_theta5, 1.0), -1.0)
    theta5 = math.acos(cos_theta5)

    # Calculate theta4
    gamma = math.atan2(dz, dx)
    delta = math.atan2(B * math.sin(theta5), A + B * math.cos(theta5))
    theta4 = gamma - delta

    # Theta3 is set to 0 as it doesn't affect the position
    theta3 = 0.0

    return (theta1, theta2, theta3, theta4, theta5)
```

### Explanation
1. **Y-Coordinate Check**: The Y-coordinate of Revolute 4 is fixed. The target's Y-coordinate is adjusted to check if it's within the reachable range using the combined lengths of the last two joints.
2. **Theta1 and Theta2 Calculation**: Using geometric and trigonometric principles, the first two joint angles are computed to position Revolute 4.
3. **Displacement Calculation**: The displacement from Revolute 4 to the target is computed in the X-Z plane.
4. **Theta4 and Theta5 Calculation**: Using the law of cosines and trigonometric identities, the last two joint angles are determined to achieve the required displacement from Revolute 4 to the target.

This approach ensures that the target position is reached by decomposing the problem into manageable parts, leveraging geometric and trigonometric principles.