To solve the inverse kinematics for the given 5-DOF manipulator, we first determine the joint angles that position the TCP at the target coordinates. The approach involves solving for the Y component using the fourth joint (q4) and then addressing the X and Z components with the first three joints (q1, q2, q3), followed by solving for q5.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x_target, y_target, z_target = p

    # Solve for q4 based on the Y component
    y_offset = y_target + 0.0267  # -0.1197 + 0.093 = -0.0267
    cos_q4 = y_offset / 0.0823
    q4 = np.arccos(np.clip(cos_q4, -1.0, 1.0))

    # Two possible solutions for q4 (elbow up/down)
    q4_1 = q4
    q4_2 = -q4

    # For simplicity, choose q4_1 and set q5 to 0 (adjust based on orientation if needed)
    q4 = q4_1
    q5 = 0.0

    # Solve for q1, q2, q3 using geometric approach for the planar arm in XZ
    # Link lengths (assuming contributions from Revolute 4 and 5 are negligible for XZ)
    a1 = 0.425
    a2 = 0.39225
    a3 = 0.09465 + 0.0823  # Simplified assumption

    # Target XZ coordinates
    x = x_target
    z = z_target

    # Calculate distance from base to target projection in XZ plane
    d = np.hypot(x, z)
    if d > a1 + a2 + a3:
        raise ValueError("Target unreachable")  # According to problem statement, this won't happen

    # Solve for q1
    q1 = np.arctan2(x, z)

    # Solve for q2 and q3 using inverse kinematics for a 3R planar arm
    # Using the cosine law for the triangle formed by the links
    D = (x**2 + z**2 - a1**2 - a2**2 - a3**2) / (2 * a1 * a2)
    D = np.clip(D, -1.0, 1.0)
    q3 = np.arccos(D)

    # Calculate intermediate angle
    alpha = np.arctan2(z, x) - np.arctan2(a2 * np.sin(q3), a1 + a2 * np.cos(q3))
    q2 = alpha - q1

    return (q1, q2, q3, q4, q5)
```

### Explanation
1. **Solving for q4**: The Y component of the target position is used to determine q4 by considering the contributions from the link offsets. The equation derived from the Y component allows solving for q4 using the arccosine function.

2. **Planar Inverse Kinematics for X and Z**: The first three joints are treated as a planar arm in the XZ plane. Using trigonometric relationships and the law of cosines, the angles q1, q2, and q3 are computed to position the end-effector at the desired X and Z coordinates.

3. **Simplification for q5**: The solution assumes q5 is zero for simplicity, which might need adjustment based on orientation requirements. However, since the problem focuses on position, this simplification is acceptable.

This approach provides a closed-form solution leveraging geometric relationships and trigonometric calculations to determine the joint angles efficiently.