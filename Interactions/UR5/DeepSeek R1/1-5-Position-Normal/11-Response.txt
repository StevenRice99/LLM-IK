To address the recurring issues, the key problem was identified as an incorrect sign in the X adjustment and misaligned link length parameters. Here's the corrected solution:

### Approach
1. **Correct Sign in X Adjustment**: Fix the sign error when adjusting the X component for the TCP's contribution.
2. **Accurate Link Lengths**: Use correct link lengths derived from the URDF parameters for the planar arm calculation.
3. **Proper q4 Handling**: Ensure q4 solutions are correctly evaluated based on both possible configurations.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x_target, y_target, z_target = p

    # Calculate q4 using Y component (corrected formula)
    y_base_offset = 0.093  # Revolute4's Y position
    y_tcp_contribution = 0.0823  # TCP's Y offset from Revolute4
    cos_q4 = (y_target - y_base_offset) / y_tcp_contribution
    cos_q4 = np.clip(cos_q4, -1.0, 1.0)
    q4_pos = np.arccos(cos_q4)
    q4_neg = -q4_pos

    # Evaluate both q4 solutions
    x_effect_pos = -y_tcp_contribution * np.sin(q4_pos)  # Corrected sign
    x_effect_neg = -y_tcp_contribution * np.sin(q4_neg)
    
    # Select q4 that minimizes X error
    if abs(x_target - x_effect_pos) < abs(x_target - x_effect_neg):
        q4 = q4_pos
    else:
        q4 = q4_neg

    # Adjust target for arm segment (corrected X adjustment)
    x_adj = x_target - x_effect_pos if q4 == q4_pos else x_target - x_effect_neg
    z_adj = z_target - 0.09465  # Revolute5's Z offset

    # Solve for q1-q3 using corrected planar arm parameters
    a1 = 0.425  # Revolute2's Z offset
    a2 = 0.39225  # Revolute3's Z offset
    a3 = 0.093  # Revolute4's Y offset (now handled in 3D space)

    # Law of cosines calculation
    D = np.hypot(x_adj, z_adj)
    if D > (a1 + a2) or D < abs(a1 - a2):
        raise ValueError("Target unreachable")

    # Calculate q2 (elbow down configuration)
    cos_q2 = (x_adj**2 + z_adj**2 - a1**2 - a2**2) / (2 * a1 * a2)
    cos_q2 = np.clip(cos_q2, -1.0, 1.0)
    q2 = -np.arccos(cos_q2)  # Negative for elbow down

    # Calculate q1
    gamma = np.arctan2(z_adj, x_adj)
    delta = np.arctan2(a2 * np.sin(q2), a1 + a2 * np.cos(q2))
    q1 = gamma - delta

    # Calculate q3 to compensate for a3 offset
    x_current = a1 * np.sin(q1) + a2 * np.sin(q1 + q2)
    z_current = a1 * np.cos(q1) + a2 * np.cos(q1 + q2)
    dx = x_adj - x_current
    dz = z_adj - z_current
    q3 = np.arctan2(dx, dz) - (q1 + q2)
    q3 = np.arctan2(np.sin(q3), np.cos(q3))  # Normalize angle

    # Set q5 to 0 as per problem statement
    q5 = 0.0

    return (q1, q2, q3, q4, q5)
```

### Explanation
1. **Sign Correction**: The X adjustment now correctly accounts for the TCP's position relative to Revolute4's rotation.
2. **Planar Arm Parameters**: Uses accurate link lengths from the URDF for the first three joints.
3. **q3 Calculation**: Properly compensates for the Revolute4's Y offset through geometric correction.
4. **q4 Selection**: Evaluates both possible q4 configurations to minimize positional error.

This solution addresses the critical sign error and improves the geometric calculations to better match the robot's actual kinematic structure.