To address the persistent issues in reaching the target positions and orientations, here's the refined solution incorporating accurate geometric calculations and proper rotation decomposition:

```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x_tcp, y_tcp, z_tcp = p
    target_roll, target_pitch, target_yaw = r

    # ========== Orientation Handling ==========
    # Construct target rotation matrix from RPY angles
    cr, sr = math.cos(target_roll), math.sin(target_roll)
    cp, sp = math.cos(target_pitch), math.sin(target_pitch)
    cy, sy = math.cos(target_yaw), math.sin(target_yaw)
    
    R_target = np.array([
        [cy*cp,  cy*sp*sr - sy*cr,  cy*sp*cr + sy*sr],
        [sy*cp,  sy*sp*sr + cy*cr,  sy*sp*cr - cy*sr],
        [  -sp,            cp*sr,            cp*cr   ]
    ])

    # Account for TCP's fixed orientation (90Â° Z rotation)
    R_tcp = np.array([[0, -1, 0], [1, 0, 0], [0, 0, 1]])
    R_target_adj = R_target @ R_tcp.T

    # Calculate combined Y rotation from first three joints
    r13 = R_target_adj[0, 2]
    r33 = R_target_adj[2, 2]
    theta_sum = math.atan2(r13, r33)

    # ========== Position Handling ==========
    # Calculate wrist center position (joint4 location)
    L5 = 0.09465  # Revolute5 length
    L_tcp = 0.0823  # TCP offset
    effective_length = L5 + L_tcp
    
    wx = x_tcp - effective_length * R_target_adj[0, 2]
    wz = z_tcp - effective_length * R_target_adj[2, 2]

    # ========== Geometric Solution for Joints 1-3 ==========
    L2 = 0.425    # Revolute2 length
    L3 = 0.39225  # Revolute3 length
    
    # Solve for theta2 using law of cosines
    D_sq = wx**2 + wz**2
    D = math.sqrt(D_sq)
    cos_theta2 = (D_sq - L2**2 - L3**2) / (2*L2*L3)
    cos_theta2 = np.clip(cos_theta2, -1.0, 1.0)
    theta2 = math.acos(cos_theta2)
    
    # Consider both elbow configurations
    solutions = []
    for sign in [1, -1]:
        theta2_candidate = sign * theta2
        A = L2 + L3*math.cos(theta2_candidate)
        B = L3*math.sin(theta2_candidate)
        
        theta1 = math.atan2(wx*A - wz*B, wz*A + wx*B)
        theta3_candidate = theta_sum - theta1 - theta2_candidate
        
        # Verify solution
        x_check = L2*math.sin(theta1) + L3*math.sin(theta1 + theta2_candidate)
        z_check = L2*math.cos(theta1) + L3*math.cos(theta1 + theta2_candidate)
        position_error = math.hypot(x_check - wx, z_check - wz)
        
        solutions.append((theta1, theta2_candidate, theta3_candidate, position_error))

    # Select best solution
    solutions.sort(key=lambda x: x[3])
    theta1, theta2, theta3, _ = solutions[0]

    # ========== Wrist Orientation ==========
    # Calculate remaining rotation after first three joints
    R123 = np.array([
        [math.cos(theta_sum), 0, math.sin(theta_sum)],
        [0, 1, 0],
        [-math.sin(theta_sum), 0, math.cos(theta_sum)]
    ])
    R_remaining = R123.T @ R_target_adj

    # Extract theta4 (Z) and theta5 (Y) from remaining rotation
    theta5 = math.atan2(-R_remaining[2, 0], R_remaining[2, 2])
    theta4 = math.atan2(-R_remaining[0, 1], R_remaining[1, 1])

    return (theta1, theta2, theta3, theta4, theta5)
```

**Key Improvements:**

1. **Accurate TCP Position Compensation:**
   - Uses full rotation matrix to calculate wrist center position
   - Properly accounts for combined TCP offset (Revolute5 + TCP)
   - Uses matrix-derived direction vectors instead of theta_sum approximation

2. **Robust Geometric Solution:**
   - Explicitly considers both elbow-up and elbow-down configurations
   - Uses proper atan2 formulation for theta1 calculation
   - Verifies solutions with position error checking

3. **Correct Orientation Decomposition:**
   - Uses proper matrix elements for Z-Y rotation decomposition
   - Maintains rotation matrix consistency through all transformations
   - Accounts for joint rotation order (Z rotation first, then Y)

4. **Numerical Stability:**
   - Clips cosine values to valid range
   - Uses matrix operations for orientation calculations
   - Sorts solutions by positional error for optimal selection

This solution provides better handling of multiple geometric configurations and more accurate orientation decomposition, addressing the key failure modes observed in the test cases.