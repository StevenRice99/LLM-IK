To solve the inverse kinematics for the 5-DOF manipulator, we extend the existing 4-DOF solution by incorporating the fifth joint. The key steps involve adjusting the orientation decomposition to account for the additional Y-axis rotation and modifying the TCP offset calculation.

### Approach
1. **Position Calculation**: The existing solution for the first three joints (theta1, theta2, theta3) is used to position the end of link3 (link4's origin). The TCP's position is adjusted by considering the combined offset from link5 and the TCP's position relative to link5.
2. **Orientation Decomposition**: The remaining rotation after the first three joints is decomposed into rotations around the Z-axis (theta4) and Y-axis (theta5) to achieve the target orientation.

### Solution Code
```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x_target, y_target, z_target = p
    roll, pitch, yaw = r
    cr, sr = math.cos(roll), math.sin(roll)
    cp, sp = math.cos(pitch), math.sin(pitch)
    cy, sy = math.cos(yaw), math.sin(yaw)
    
    # Construct target rotation matrix
    R_x = np.array([[1, 0, 0], [0, cr, -sr], [0, sr, cr]])
    R_y = np.array([[cp, 0, sp], [0, 1, 0], [-sp, 0, cp]])
    R_z = np.array([[cy, -sy, 0], [sy, cy, 0], [0, 0, 1]])
    R_target = R_z @ R_y @ R_x
    
    # Calculate theta_sum from R_target
    r13, r33 = R_target[0, 2], R_target[2, 2]
    theta_sum = math.atan2(r13, r33)
    
    # Adjust target position for TCP offset (link5 and TCP position)
    C_tcp = 0.09465  # Link5's z-offset
    tcp_offset_y = 0.0823  # TCP's y-offset in link5's frame
    # Approximate adjustment considering theta_sum for the first three joints
    pos3_x = x_target - (C_tcp * math.sin(theta_sum) + tcp_offset_y * math.sin(theta_sum + math.pi/2))
    pos3_z = z_target - (C_tcp * math.cos(theta_sum) + tcp_offset_y * math.cos(theta_sum + math.pi/2))
    
    # Solve for theta1, theta2, theta3 using geometric approach
    a, b = 0.425, 0.39225
    x, z = pos3_x, pos3_z
    d_sq = x**2 + z**2
    cos_theta2 = (d_sq - a**2 - b**2) / (2 * a * b)
    cos_theta2 = np.clip(cos_theta2, -1.0, 1.0)
    theta2_1 = math.acos(cos_theta2)
    theta2_2 = -theta2_1
    solutions = []
    for theta2 in [theta2_1, theta2_2]:
        denom = a + b * math.cos(theta2)
        num = b * math.sin(theta2)
        theta1 = math.atan2(x, z) - math.atan2(num, denom)
        x_calc = a * math.sin(theta1) + b * math.sin(theta1 + theta2)
        z_calc = a * math.cos(theta1) + b * math.cos(theta1 + theta2)
        if math.isclose(x_calc, x, abs_tol=1e-5) and math.isclose(z_calc, z, abs_tol=1e-5):
            solutions.append((theta1, theta2))
    theta1, theta2 = solutions[0] if solutions else (0.0, 0.0)
    theta3 = theta_sum - theta1 - theta2
    
    # Decompose remaining rotation for theta4 (Z) and theta5 (Y)
    R_y_sum = np.array([
        [math.cos(theta_sum), 0, math.sin(theta_sum)],
        [0, 1, 0],
        [-math.sin(theta_sum), 0, math.cos(theta_sum)]
    ])
    R_remaining = R_y_sum.T @ R_target
    
    # Calculate theta5 from R_remaining's third row
    theta5 = math.atan2(-R_remaining[2, 0], R_remaining[2, 2])
    # Calculate theta4 from R_remaining's first and second rows
    theta4 = math.atan2(-R_remaining[0, 1], R_remaining[1, 1])
    
    return (theta1, theta2, theta3, theta4, theta5)
```

### Explanation
1. **Position Adjustment**: The target position is adjusted by considering the combined offset from link5 and the TCP's position. This is approximated by adjusting the TCP offset in the direction determined by the sum of the first three joint angles (theta_sum).
2. **Orientation Decomposition**: The remaining rotation matrix after the first three joints is decomposed into rotations around the Z-axis (theta4) and Y-axis (theta5) using elements of the rotation matrix to solve for the angles. This ensures the correct orientation of the TCP is achieved.