To solve this problem, we need to determine the joint angles (θ1, θ2, θ3) for a 3-DOF serial manipulator such that the end-effector (TCP) reaches a specified target position (x, y, z). The solution involves using geometric and trigonometric relationships derived from the robot's structure and kinematics.

### Approach
1. **Problem Analysis**: The robot has three revolute joints. The first two joints rotate around the Y-axis, and the third joint rotates around the Z-axis. The TCP's position is determined by the first two joints (θ1 and θ2), while the third joint (θ3) does not affect the position but is included in the solution as it is part of the robot's 3-DOF.

2. **Key Equations**:
   - The position equations for the TCP are derived using trigonometric identities based on the robot's link lengths and joint angles.
   - The equations for x and z coordinates are solved using the cosine law and trigonometric identities to find θ1 and θ2.
   - θ3 is set to zero since it does not affect the position.

3. **Algorithm**:
   - Compute θ2 using the cosine law.
   - Solve for θ1 using the derived trigonometric relationships.
   - Set θ3 to zero as it does not influence the position.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    L1 = 0.39225
    L2 = 0.09465

    # Calculate cos(theta2) using the law of cosines
    numerator = x_target**2 + z_target**2 - L1**2 - L2**2
    denominator = 2 * L1 * L2
    cos_theta2 = numerator / denominator

    # Compute theta2 (choose the solution with positive theta2)
    theta2 = math.acos(cos_theta2)

    # Calculate coefficients A and B for solving theta1
    A = L1 + L2 * math.cos(theta2)
    B = L2 * math.sin(theta2)

    # Solve for sin(theta1) and cos(theta1)
    denominator_theta1 = A**2 + B**2
    sin_theta1 = (A * x_target - B * z_target) / denominator_theta1
    cos_theta1 = (B * x_target + A * z_target) / denominator_theta1

    theta1 = math.atan2(sin_theta1, cos_theta1)

    # Theta3 does not affect the position, set to 0
    theta3 = 0.0

    return (theta1, theta2, theta3)
```

### Explanation
1. **Cosine Law for θ2**: The cosine law is used to compute the angle θ2 based on the target coordinates (x, z) and the link lengths (L1, L2). This gives the cosine of θ2, which is then used to find θ2 using the arccosine function.

2. **Trigonometric Solution for θ1**: Using the computed θ2, coefficients A and B are derived. These coefficients help form a system of linear equations in terms of sine and cosine of θ1, which are solved using the arctangent function to find θ1.

3. **Setting θ3**: Since θ3 does not affect the position, it is set to zero. This simplifies the solution while still satisfying the problem requirements.

This approach efficiently computes the joint angles needed to position the TCP at the target coordinates, leveraging geometric and trigonometric principles.