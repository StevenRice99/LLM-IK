To solve this problem, we need to determine the joint angles (theta1, theta2, theta3, theta4) for a 4-DOF manipulator to reach a target position (x, y, z). The solution involves decoupling the problem into solving for the vertical (Y-axis) and horizontal (X-Z plane) components separately, considering the structure and transformations of each joint.

### Approach
1. **Y Component (theta3 and theta4):** The Y component of the target position is adjusted by subtracting the fixed offset from Revolute 3. The remaining Y component is achieved using trigonometric relationships involving theta3 (Z rotation) and theta4 (Y rotation).
2. **X-Z Components (theta1 and theta2):** The effective X and Z targets are computed by adjusting for the contributions from Revolute 4 and the TCP. The geometric approach from existing solutions is used to solve for theta1 and theta2, considering the link lengths and trigonometric relationships.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p

    # Constants from URDF
    L1 = 0.39225  # Revolute 2's Z offset
    L3 = 0.093     # Revolute 3's Y offset
    L4 = 0.09465   # Revolute 4's Z offset
    a = 0.0823     # TCP's Y offset after rotation

    y_eff = y_target - L3

    # Solve for theta3 and theta4 to achieve y_eff
    valid_solutions = []
    for theta3 in [0.0, math.pi]:  # Common configurations for theta3
        try:
            theta4 = math.asin(y_eff / (a * math.cos(theta3)))
        except ValueError:
            continue  # Skip if solution is invalid

        # Two possible theta4 solutions for each theta3
        theta4_candidates = [theta4, math.pi - theta4]
        for theta4 in theta4_candidates:
            # Adjust X-Z target based on theta3 and theta4
            delta_x = a * math.cos(theta4) * math.sin(theta3)
            delta_z = L4 + a * math.cos(theta4) * math.cos(theta3)
            eff_x = x_target - delta_x
            eff_z = z_target - delta_z

            # Solve for theta1 and theta2 using geometric approach
            try:
                theta1 = math.atan2(eff_x, eff_z)
                adjusted_x = eff_x - L1 * math.sin(theta1)
                adjusted_z = eff_z - L1 * math.cos(theta1)
                theta_total = math.atan2(adjusted_x, adjusted_z)
                theta2 = theta_total - theta1
                valid_solutions.append((theta1, theta2, theta3, theta4))
            except:
                continue

    if not valid_solutions:
        raise ValueError("No valid solution found")

    # Select the first valid solution (additional criteria can be applied)
    theta1, theta2, theta3, theta4 = valid_solutions[0]

    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Y Component Calculation:** The Y component of the target position is adjusted by subtracting the fixed offset from Revolute 3. The remaining Y component is used to solve for theta3 and theta4 using trigonometric relationships, considering the TCP's Y offset and the rotations of the joints.
2. **X-Z Component Calculation:** The effective X and Z targets are computed by adjusting for the contributions from Revolute 4 and the TCP. The geometric approach from existing solutions is used to solve for theta1 and theta2, ensuring the solution meets the target X and Z coordinates.
3. **Multiple Solutions Handling:** The code considers multiple possible configurations for theta3 and theta4, checking each for validity and selecting the first valid solution. This approach ensures robustness and accounts for the manipulator's kinematic constraints.

This method systematically addresses the inverse kinematics problem by breaking it into manageable components, leveraging trigonometric relationships and geometric transformations to achieve the desired end-effector position.