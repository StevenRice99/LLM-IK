To solve this problem, we need to determine the joint angles (theta1, theta2, theta3, theta4) for a 4-DOF manipulator to reach a target position (x, y, z). The solution involves decoupling the problem into solving for the vertical (Y-axis) and horizontal (X-Z plane) components separately, considering the structure and transformations of each joint.

### Approach
1. **Y Component (theta4):** The target Y position is adjusted by subtracting the fixed offset from Revolute 3. The remaining Y component is achieved using the arcsine function with the TCP's Y offset.
2. **X-Z Components (theta1 and theta2):** The effective X and Z targets are computed by adjusting for the contributions from Revolute 4 and the TCP. The geometric approach from existing solutions is used to solve for theta1 and theta2, considering the link lengths and trigonometric relationships.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p

    # Constants from URDF
    L1 = 0.39225  # Revolute 2's Z offset
    L2 = 0.093     # Revolute 3's Y offset
    L3 = 0.09465   # Revolute 4's Z offset
    a = 0.0823     # TCP's Y offset after rotation

    # Solve for theta4 based on Y component
    y_eff = y_target - L2
    if abs(y_eff) > a:
        raise ValueError("Target Y position unreachable")
    theta4 = math.asin(y_eff / a)

    # Adjust target for X-Z components considering Revolute 4 and TCP
    # Assuming theta3 is zero due to the problem's orientation constraints
    theta3 = 0.0
    eff_x = x_target - a * math.cos(theta4) * math.sin(theta3)
    eff_z = z_target - (L3 + a * math.cos(theta4) * math.cos(theta3))

    # Solve for theta1 and theta2 using geometric approach
    theta1 = math.atan2(eff_x, eff_z)
    adjusted_x = eff_x - L1 * math.sin(theta1)
    adjusted_z = eff_z - L1 * math.cos(theta1)
    theta_total = math.atan2(adjusted_x, adjusted_z)
    theta2 = theta_total - theta1

    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Y Component Calculation:** The Y component of the target position is adjusted by subtracting the fixed offset from Revolute 3. The remaining Y component is used to solve for theta4 using the arcsine function, considering the TCP's Y offset.
2. **X-Z Component Calculation:** The effective X and Z targets are computed by adjusting for the contributions from Revolute 4 and the TCP. The geometric approach from existing solutions is used to solve for theta1 and theta2, considering the link lengths and trigonometric relationships.
3. **Joint Angles Resolution:** The individual angles theta1 and theta2 are resolved using geometric considerations to achieve the target X and Z coordinates.

This approach systematically decouples the problem into manageable parts, leveraging trigonometric relationships and geometric transformations to achieve the desired end-effector position.