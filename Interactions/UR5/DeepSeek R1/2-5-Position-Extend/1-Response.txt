To solve this problem, we need to determine the joint angles for a 4-DOF manipulator to reach a given target position. The solution involves extending an existing 3-DOF inverse kinematics solution to include the fourth joint, considering the geometric transformations and offsets provided in the problem details.

### Approach
1. **Theta3 Calculation**: The third joint (Revolute 3) affects the Y-component of the target position. We use the Y-coordinate of the target to compute theta3 using the inverse cosine function.
2. **Theta1 and Theta2 Calculation**: Using the existing 3-DOF solution, we solve for the first two joint angles (theta1 and theta2) by considering the X and Z components of the target position. This involves geometric calculations using the law of cosines and arctangent functions.
3. **Theta4 Handling**: The fourth joint (Revolute 4) does not affect the position of the TCP due to its rotational axis and offset, so it is set to zero.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    
    # Constants from the link details
    a = 0.39225  # Revolute2's z offset
    b = 0.09465  # Revolute4's z offset
    y_offset_revolute3 = 0.093  # Revolute3's y offset
    y_tcp = 0.0823  # TCP's y offset from Revolute4
    
    # Solve for theta3 using the y component
    y_effective = y_target - y_offset_revolute3
    cos_theta3 = y_effective / y_tcp
    cos_theta3 = max(min(cos_theta3, 1), -1)  # Clamp to valid range
    theta3 = math.acos(cos_theta3)
    
    # Solve for theta1 and theta2 using the existing method adjusted for x and z
    x = x_target
    z = z_target
    
    d_sq = x ** 2 + z ** 2
    cos_theta2 = (d_sq - a**2 - b**2) / (2 * a * b)
    cos_theta2 = max(min(cos_theta2, 1), -1)
    theta2 = math.acos(cos_theta2)
    
    gamma = math.atan2(x, z)
    delta = math.atan2(b * math.sin(theta2), a + b * math.cos(theta2))
    theta1 = gamma - delta
    
    # Theta4 does not affect the position, set to 0
    theta4 = 0.0
    
    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Theta3 Calculation**: The Y-component of the target position is adjusted by subtracting the fixed offset from Revolute 3. The remaining Y-component is used to compute theta3 using the inverse cosine function, ensuring the value is within the valid range.
2. **Theta1 and Theta2 Calculation**: The existing 3-DOF solution is adapted to handle the X and Z components. The law of cosines and arctangent functions are used to determine the angles required to position the end-effector in the XZ plane.
3. **Theta4 Handling**: Since the fourth joint's rotation does not affect the TCP's position (due to its axis and offset), theta4 is set to zero, ensuring the solution meets the problem requirements without additional complexity.

This approach efficiently extends the existing solution to handle the fourth joint while ensuring the target position is reached accurately.