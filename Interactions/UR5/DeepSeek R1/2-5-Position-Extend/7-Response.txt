To solve this problem, we need to determine the joint angles for a 4-DOF manipulator to reach a given target position. The solution involves correctly accounting for the geometric transformations and offsets provided in the problem details, particularly addressing the rotation around the Z-axis by the third joint and its impact on the target position.

### Approach
1. **Theta3 Calculation**: The third joint (Revolute 3) affects the Y-component of the target position. We compute theta3 using the inverse cosine function, considering both positive and negative solutions to ensure the correct quadrant.
2. **Adjusted X and Z Components**: The X and Z components of the target position are adjusted by subtracting the contributions from the third joint's rotation and the fourth joint's offset.
3. **Theta1 and Theta2 Calculation**: Using the adjusted X and Z components, we solve for the first two joint angles using the law of cosines and arctangent functions, considering both possible solutions for theta2.
4. **Solution Selection**: We evaluate all valid solutions and select the one that best matches the target position.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    
    # Constants from the link details
    a = 0.39225  # Revolute2's z offset
    b = 0.09465  # Revolute4's z offset
    y_offset_revolute3 = 0.093  # Revolute3's y offset
    y_tcp = 0.0823  # TCP's y offset from Revolute4
    
    # Compute theta3 using the y component
    y_effective = y_target - y_offset_revolute3
    cos_theta3 = y_effective / y_tcp
    cos_theta3 = max(min(cos_theta3, 1), -1)
    theta3_pos = math.acos(cos_theta3)
    theta3_neg = -theta3_pos
    
    solutions = []
    for theta3 in [theta3_pos, theta3_neg]:
        # Adjust x and z components based on theta3 and Revolute4's offset
        x_eff = x_target - y_tcp * math.sin(theta3)
        z_eff = z_target - b
        
        # Solve for theta1 and theta2 using the existing method with adjusted x_eff and z_eff
        d_sq = x_eff ** 2 + z_eff ** 2
        numerator = d_sq - a**2 - b**2
        denominator = 2 * a * b
        if abs(denominator) < 1e-10:
            continue  # Avoid division by zero
        cos_theta2 = numerator / denominator
        if cos_theta2 < -1 or cos_theta2 > 1:
            continue  # Invalid solution
        cos_theta2 = max(min(cos_theta2, 1), -1)
        theta2 = math.acos(cos_theta2)
        
        # Two possible solutions for theta2
        for theta2_sign in [1, -1]:
            current_theta2 = theta2 * theta2_sign
            gamma = math.atan2(x_eff, z_eff)
            delta = math.atan2(b * math.sin(current_theta2), a + b * math.cos(current_theta2))
            theta1 = gamma - delta
            solutions.append((theta1, current_theta2, theta3))
    
    if not solutions:
        raise ValueError("No valid solution found")
    
    # Select the solution with theta2 closest to the middle of its limits
    # This is a heuristic; in practice, joint limits should be considered
    best_solution = min(solutions, key=lambda sol: abs(sol[1]))
    theta1, theta2, theta3 = best_solution
    theta4 = 0.0  # Theta4 does not affect position
    
    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Theta3 Calculation**: The Y-component of the target position is adjusted by subtracting the fixed offset from Revolute 3. The remaining Y-component is used to compute theta3 using the inverse cosine function, considering both positive and negative solutions to cover all possible quadrants.
2. **Adjusted X and Z Components**: The X component is adjusted by subtracting the contribution from the third joint's rotation, and the Z component is adjusted by subtracting the fourth joint's offset. This allows the existing solution for the first two joints to be applied correctly.
3. **Theta1 and Theta2 Calculation**: The law of cosines and arctangent functions are used to determine the angles required to position the end-effector in the XZ plane, considering both possible solutions for theta2 to ensure all valid configurations are evaluated.
4. **Solution Selection**: The best solution is selected based on heuristic criteria (e.g., proximity to the middle of joint limits), ensuring a valid and reachable configuration.

This approach efficiently handles the geometric complexities of the manipulator, ensuring accurate and reachable solutions for the given target positions.