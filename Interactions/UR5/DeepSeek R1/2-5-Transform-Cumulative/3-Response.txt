To solve this problem, we need to determine the joint angles for a 4-DOF serial manipulator to reach a target position and orientation. The solution involves calculating the first three joints to achieve the desired position and the fourth joint to achieve the desired orientation.

### Approach
1. **Position Calculation (Joints 1-3)**:
   - Use geometric and trigonometric methods to solve for the first three joint angles (θ1, θ2, θ3) that position the end-effector (TCP) at the target position. This involves considering the kinematic chain and link lengths.

2. **Orientation Calculation (Joint 4)**:
   - After determining the first three joint angles, compute the required rotation matrix for the fourth joint (θ4) to achieve the target orientation. This involves matrix transformations and inverse kinematics to align the end-effector's orientation with the target.

### Solution Code
```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    target_roll, target_pitch, target_yaw = r

    # Compute target rotation matrix
    cr = math.cos(target_roll)
    sr = math.sin(target_roll)
    cp = math.cos(target_pitch)
    sp = math.sin(target_pitch)
    cy = math.cos(target_yaw)
    sy = math.sin(target_yaw)
    R_target = np.array([
        [cy * cp, cy * sp * sr - sy * cr, cy * sp * cr + sy * sr],
        [sy * cp, sy * sp * sr + cy * cr, sy * sp * cr - cy * sr],
        [-sp, cp * sr, cp * cr]
    ])

    # Fixed TCP rotation (90 degrees around Z)
    R_tcp = np.array([[0, -1, 0], [1, 0, 0], [0, 0, 1]])
    R_tcp_inv = R_tcp.T

    # Calculate possible theta2 values based on y-coordinate
    y_offset = y_target - 0.093
    if abs(y_offset) > 0.0823:
        y_offset = 0.0823 * (1 if y_offset > 0 else -1)

    cos_theta2 = y_offset / 0.0823
    cos_theta2 = np.clip(cos_theta2, -1.0, 1.0)
    theta2_pos = math.acos(cos_theta2)
    theta2_neg = -theta2_pos
    possible_theta2 = [theta2_pos, theta2_neg]

    solutions = []
    for theta2 in possible_theta2:
        sin_theta2 = math.sin(theta2)
        A = -0.0823 * sin_theta2
        B = 0.09465
        C = 0.0823 * sin_theta2
        D = 0.09465
        det = B * D - A * C
        if abs(det) < 1e-6:
            continue

        sin_theta1 = (D * x_target - A * z_target) / det
        cos_theta1 = (-C * x_target + B * z_target) / det
        theta1 = math.atan2(sin_theta1, cos_theta1)

        # Compute rotation matrices for the first two joints
        R1 = np.array([
            [math.cos(theta1), 0, math.sin(theta1)],
            [0, 1, 0],
            [-math.sin(theta1), 0, math.cos(theta1)]
        ])
        R2 = np.array([
            [math.cos(theta2), 0, math.sin(theta2)],
            [0, 1, 0],
            [-math.sin(theta2), 0, math.cos(theta2)]
        ])

        # Compute desired rotation after first two joints
        R_desired = R_target @ R_tcp_inv
        R_remaining = np.linalg.inv(R1 @ R2) @ R_desired

        # Extract theta4 and theta3 from R_remaining
        theta4 = math.atan2(-R_remaining[2, 0], R_remaining[2, 2])
        sin3 = -R_remaining[0, 1]
        cos3 = R_remaining[1, 1]
        theta3 = math.atan2(sin3, cos3)

        # Check orientation error
        R3 = np.array([
            [math.cos(theta3), -math.sin(theta3), 0],
            [math.sin(theta3), math.cos(theta3), 0],
            [0, 0, 1]
        ])
        R4 = np.array([
            [math.cos(theta4), 0, math.sin(theta4)],
            [0, 1, 0],
            [-math.sin(theta4), 0, math.cos(theta4)]
        ])
        R_total = R1 @ R2 @ R3 @ R4 @ R_tcp
        error = np.linalg.norm(R_total - R_target)

        solutions.append((theta1, theta2, theta3, theta4, error))

    if not solutions:
        return (0.0, 0.0, 0.0, 0.0)

    # Select the solution with the smallest orientation error
    solutions.sort(key=lambda x: x[4])
    best = solutions[0]
    return (best[0], best[1], best[2], best[3])
```

### Explanation
1. **Position Calculation**:
   - The first three joints (θ1, θ2, θ3) are determined using geometric methods based on the target position. This involves solving trigonometric equations to position the end-effector correctly.

2. **Orientation Calculation**:
   - The fourth joint (θ4) is computed using matrix transformations. The rotation matrix for the target orientation is decomposed to find the required angle for θ4, ensuring the end-effector's orientation matches the target.

This approach efficiently decouples the position and orientation problems, allowing for a closed-form solution that leverages geometric and algebraic methods to determine the joint angles. The key improvement is correctly extracting θ3 and θ4 from the rotation matrix, ensuring accurate orientation alignment.