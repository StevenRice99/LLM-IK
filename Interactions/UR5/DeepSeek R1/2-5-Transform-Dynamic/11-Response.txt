To solve the inverse kinematics for the 4-DOF manipulator, we need to accurately compute the joint angles considering both position and orientation constraints. Here's the refined approach and solution:

### Approach
1. **Calculate θ₁ (Joint 1)**: Determine using the target's x and z coordinates.
2. **Transform Target to Revolute 2's Frame**: Adjust position and orientation considering the TCP's fixed rotation.
3. **Solve for θ₂, θ₃, θ₄**:
   - Use geometric position equations with trigonometric substitution.
   - Decompose orientation matrices to match the target.
   - Generate all valid solutions and select the optimal one.

### Solution Code
```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    target_roll, target_pitch, target_yaw = r

    # Solve theta1 using x-z projection
    theta1 = math.atan2(x, z)

    # Transform target position to Revolute 2's frame
    rev2_offset = 0.39225
    dx = x - rev2_offset * math.sin(theta1)
    dz = z - rev2_offset * math.cos(theta1)
    px = dx * math.cos(theta1) + dz * math.sin(theta1)  # X in Revolute 2's frame
    pz = -dx * math.sin(theta1) + dz * math.cos(theta1) # Z in Revolute 2's frame
    py = y  # Y remains unchanged

    # Transform target orientation to Revolute 2's frame with TCP compensation
    R_tcp = np.array([[0, -1, 0], [1, 0, 0], [0, 0, 1]])  # Fixed TCP rotation
    cr, cp, cy = math.cos(target_roll), math.cos(target_pitch), math.cos(target_yaw)
    sr, sp, sy = math.sin(target_roll), math.sin(target_pitch), math.sin(target_yaw)
    R_target = np.array([
        [cy*cp, cy*sp*sr - sy*cr, cy*sp*cr + sy*sr],
        [sy*cp, sy*sp*sr + cy*cr, sy*sp*cr - cy*sr],
        [-sp, cp*sr, cp*cr]
    ])
    R_revolute1_inv = np.array([
        [math.cos(theta1), 0, math.sin(theta1)],
        [0, 1, 0],
        [-math.sin(theta1), 0, math.cos(theta1)]
    ])
    R_target_revolute2 = R_revolute1_inv @ R_target @ R_tcp.T

    solutions = []
    
    # Position equations from forward kinematics
    # px = 0.09465*sin(theta2) + 0.0823*sin(theta2 + theta4)*cos(theta3)
    # py = 0.093 + 0.0823*sin(theta3)*sin(theta2 + theta4)
    # pz = 0.09465*cos(theta2) + 0.0823*cos(theta2 + theta4)*cos(theta3)
    
    # Solve for theta3 using y-coordinate
    y_term = (py - 0.093) / 0.0823
    if abs(y_term) > 1:
        return (theta1, 0.0, 0.0, 0.0)  # Unreachable
    
    theta3_positive = math.asin(y_term)
    theta3_negative = math.pi - theta3_positive
    theta3_candidates = [theta3_positive, theta3_negative, -theta3_positive, -theta3_negative]

    for theta3 in theta3_candidates:
        # Solve for theta2 + theta4 using px and pz
        A = 0.0823 * math.cos(theta3)
        B = 0.09465
        numerator = A * px + B * pz - A * B
        denominator = A**2 + B**2
        if abs(denominator) < 1e-6:
            continue
        
        cos_theta24 = (B * px + A * pz - B**2) / denominator
        sin_theta24 = (A * px - B * pz) / denominator
        theta24 = math.atan2(sin_theta24, cos_theta24)

        # Solve for theta4 using orientation constraints
        R3 = np.array([
            [math.cos(theta3), -math.sin(theta3), 0],
            [math.sin(theta3), math.cos(theta3), 0],
            [0, 0, 1]
        ])
        R_remaining_needed = np.linalg.inv(R3) @ R_target_revolute2
        
        # Extract theta4 from Y rotation matrix
        cos_theta4 = R_remaining_needed[0, 0]
        sin_theta4 = R_remaining_needed[0, 2]
        theta4 = math.atan2(sin_theta4, cos_theta4)
        
        # Calculate theta2 from theta24 and theta4
        theta2 = (theta24 - theta4 + math.pi) % (2*math.pi) - math.pi

        # Verify position
        expected_px = 0.09465*math.sin(theta2) + 0.0823*math.sin(theta2 + theta4)*math.cos(theta3)
        expected_pz = 0.09465*math.cos(theta2) + 0.0823*math.cos(theta2 + theta4)*math.cos(theta3)
        pos_error = math.hypot(px - expected_px, pz - expected_pz)

        # Verify orientation
        R2 = np.array([
            [math.cos(theta2), 0, math.sin(theta2)],
            [0, 1, 0],
            [-math.sin(theta2), 0, math.cos(theta2)]
        ])
        R4 = np.array([
            [math.cos(theta4), 0, math.sin(theta4)],
            [0, 1, 0],
            [-math.sin(theta4), 0, math.cos(theta4)]
        ])
        R_achieved = R2 @ R3 @ R4
        orientation_error = np.linalg.norm(R_achieved - R_target_revolute2)
        
        solutions.append((theta2, theta3, theta4, pos_error + orientation_error))

    if not solutions:
        return (theta1, 0.0, 0.0, 0.0)

    # Select solution with minimal error
    solutions.sort(key=lambda x: x[3])
    best = solutions[0]
    return (theta1, best[0], best[1], best[2])
```

### Explanation
1. **θ₁ Calculation**: Correctly computed using the target's x-z projection.
2. **Coordinate Transformation**: Accurately transforms the target to Revolute 2's frame, considering the TCP's fixed orientation.
3. **Position Solving**:
   - Solves for θ₃ using the y-coordinate equation.
   - Uses trigonometric identities to decouple θ₂ and θ₄.
4. **Orientation Matching**:
   - Decomposes rotation matrices to ensure the combined effect of θ₂, θ₃, θ₄ matches the target orientation.
5. **Error Minimization**:
   - Generates all valid angle combinations.
   - Selects the solution with the lowest combined position and orientation error.

This approach systematically addresses both position and orientation constraints, providing accurate inverse kinematics solutions for the 4-DOF manipulator.