To solve this problem, we need to determine the joint angles for a 4-DOF manipulator to reach a target position and orientation. The solution involves calculating each joint angle step-by-step, considering both position and orientation constraints.

### Approach
1. **Solve for θ₁ (Joint 1)**: Use the target position's x and z coordinates to determine the rotation around the Y-axis.
2. **Transform Target to Revolute 2's Frame**: Adjust the target position and orientation relative to Revolute 2's coordinate system after accounting for θ₁.
3. **Solve for Position (θ₂, θ₃, θ₄)**:
   - Use geometric relationships to express the position equations based on forward kinematics.
   - Solve for possible θ₄ values using the y-coordinate.
   - For each θ₄, compute θ₃ and θ₂ using the transformed position.
4. **Solve for Orientation**: Ensure the combined rotations of θ₂, θ₃, and θ₄ (along with the TCP's fixed orientation) match the target orientation.
5. **Error Handling**: Evaluate solutions based on position and orientation errors to select the best joint angles.

### Solution Code
```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    target_roll, target_pitch, target_yaw = r

    # Solve theta1 using the direction of x and z in the target position
    theta1 = math.atan2(x, z)

    # Transform target position to Revolute 2's frame
    rev2_origin_x = 0.39225 * math.sin(theta1)
    rev2_origin_z = 0.39225 * math.cos(theta1)
    dx = x - rev2_origin_x
    dz = z - rev2_origin_z
    px = dx * math.cos(theta1) - dz * math.sin(theta1)
    pz = dx * math.sin(theta1) + dz * math.cos(theta1)
    py = y  # Y remains unchanged as Revolute 1 rotates around Y

    # Transform target orientation to Revolute 2's frame
    cr, cp, cy = math.cos(target_roll), math.cos(target_pitch), math.cos(target_yaw)
    sr, sp, sy = math.sin(target_roll), math.sin(target_pitch), math.sin(target_yaw)
    R_target = np.array([
        [cy*cp, cy*sp*sr - sy*cr, cy*sp*cr + sy*sr],
        [sy*cp, sy*sp*sr + cy*cr, sy*sp*cr - cy*sr],
        [-sp, cp*sr, cp*cr]
    ])
    R_revolute1_inv = np.array([
        [math.cos(theta1), 0, math.sin(theta1)],
        [0, 1, 0],
        [-math.sin(theta1), 0, math.cos(theta1)]
    ])
    R_tcp = np.array([[0, -1, 0], [1, 0, 0], [0, 0, 1]])
    R_target_revolute2 = R_revolute1_inv @ R_target @ R_tcp.T

    # Solve for theta2, theta3, theta4 using geometric approach
    solutions = []
    
    # Position equations derived from forward kinematics
    # py = 0.093 + 0.0823 * cos(theta3 - theta4)
    cos_delta = (py - 0.093) / 0.0823
    if abs(cos_delta) > 1:
        return (theta1, 0.0, 0.0, 0.0)  # Assume reachable per problem statement
    
    delta_pos = math.acos(cos_delta)
    delta_neg = -delta_pos
    delta_candidates = [delta_pos, delta_neg]

    for delta in delta_candidates:
        A = 0.0823 * math.sin(delta)
        B = 0.09465
        det = A**2 + B**2
        if det < 1e-6:
            continue
        
        # Solve for theta2
        cos_theta2 = (A * px + B * pz) / det
        sin_theta2 = (B * px - A * pz) / det
        theta2 = math.atan2(sin_theta2, cos_theta2)
        
        # Solve for theta3 and theta4 using orientation
        R2 = np.array([
            [math.cos(theta2), 0, math.sin(theta2)],
            [0, 1, 0],
            [-math.sin(theta2), 0, math.cos(theta2)]
        ])
        R_remaining = R2
        
        R_desired = R_target_revolute2
        R_needed = np.linalg.inv(R_remaining) @ R_desired
        
        # Extract theta3 and theta4 from R_needed (R3 * R4)
        # R3 is Z rotation, R4 is Y rotation
        theta3 = math.atan2(R_needed[1, 0], R_needed[0, 0])
        R3 = np.array([
            [math.cos(theta3), -math.sin(theta3), 0],
            [math.sin(theta3), math.cos(theta3), 0],
            [0, 0, 1]
        ])
        R4_actual = np.linalg.inv(R3) @ R_needed
        
        # Extract theta4 from R4_actual (Y rotation)
        cos_theta4 = R4_actual[0, 0]
        sin_theta4 = R4_actual[0, 2]
        theta4 = math.atan2(sin_theta4, cos_theta4)
        
        # Check if delta = theta4 - theta3
        if not np.isclose(delta, (theta4 - theta3) % (2 * math.pi), atol=1e-4):
            continue
        
        # Verify position
        expected_px = A * math.cos(theta2) + B * math.sin(theta2)
        expected_pz = -A * math.sin(theta2) + B * math.cos(theta2)
        pos_error = math.hypot(px - expected_px, pz - expected_pz)
        
        # Verify orientation
        R3_actual = np.array([
            [math.cos(theta3), -math.sin(theta3), 0],
            [math.sin(theta3), math.cos(theta3), 0],
            [0, 0, 1]
        ])
        R4_actual = np.array([
            [math.cos(theta4), 0, math.sin(theta4)],
            [0, 1, 0],
            [-math.sin(theta4), 0, math.cos(theta4)]
        ])
        R_achieved = R2 @ R3_actual @ R4_actual
        orientation_error = np.linalg.norm(R_achieved - R_target_revolute2)
        total_error = pos_error + orientation_error
        
        solutions.append((theta2, theta3, theta4, total_error))
    
    if not solutions:
        return (theta1, 0.0, 0.0, 0.0)
    
    solutions.sort(key=lambda x: x[3])
    best = solutions[0]
    return (theta1, best[0], best[1], best[2])
```

### Explanation
1. **θ₁ Calculation**: The first joint angle is determined using the arctangent of the target's x and z coordinates.
2. **Coordinate Transformation**: The target position and orientation are transformed into the coordinate system of the second joint to simplify subsequent calculations.
3. **Position Solving**: Using geometric relationships derived from forward kinematics, possible values for θ₂, θ₃, and θ₄ are computed. The position equations account for the combined effect of these angles.
4. **Orientation Solving**: The orientation is matched by decomposing the rotation matrices and ensuring the combined rotations align with the target orientation.
5. **Error Evaluation**: Solutions are evaluated based on position and orientation errors, and the best solution is selected to minimize these errors.

This approach ensures that both position and orientation constraints are satisfied, providing accurate inverse kinematics for the 4-DOF manipulator.