To solve this problem, we need to determine the joint angles for a 4-DOF serial manipulator to reach a target position and orientation. The solution involves extending an existing 3-DOF inverse kinematics solution to include the fourth joint, considering both position and orientation.

### Approach
1. **Position Calculation**: The existing solution for the first three joints (theta1, theta2, theta3) is used to position the end-effector. The fourth joint (theta4) is solved based on the desired orientation.
2. **Orientation Calculation**: The orientation of the end-effector is influenced by all four joints. The fourth joint's rotation around the Y-axis is determined by decomposing the target rotation matrix and solving for the additional angle.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x_target, y_target, z_target = p
    rx, ry, rz = r

    # Compute the target rotation matrix from the given orientation
    R_roll = np.array([[1, 0, 0], [0, np.cos(rx), -np.sin(rx)], [0, np.sin(rx), np.cos(rx)]])
    R_pitch = np.array([[np.cos(ry), 0, np.sin(ry)], [0, 1, 0], [-np.sin(ry), 0, np.cos(ry)]])
    R_yaw = np.array([[np.cos(rz), -np.sin(rz), 0], [np.sin(rz), np.cos(rz), 0], [0, 0, 1]])
    R_target = R_yaw @ R_pitch @ R_roll

    # Parameters for the manipulator's link lengths including TCP offset
    A = 0.39225  # Revolute 2's z position
    B = 0.09465 + 0.0823  # Revolute 4's z position plus TCP's y offset

    # Calculate theta_sum using elements from the target rotation matrix
    r13 = R_target[0, 2]
    r33 = R_target[2, 2]
    theta_sum = np.arctan2(r13, r33)

    # Solve for theta1 and theta2 based on the target position
    sin_S = np.sin(theta_sum)
    cos_S = np.cos(theta_sum)
    numerator_sin = x_target - B * sin_S
    numerator_cos = z_target - B * cos_S
    theta1 = np.arctan2(numerator_sin, numerator_cos)
    theta2 = theta_sum - theta1

    # Adjust B to original value for orientation calculations
    B_orientation = 0.09465
    R_rhs = R_target @ np.array([[0, 1, 0], [-1, 0, 0], [0, 0, 1]])  # R_target * R_z(-pi/2)

    # Compute the rotation matrix after the first two joints
    theta_sum_current = theta1 + theta2
    cos_theta_sum = np.cos(theta_sum_current)
    sin_theta_sum = np.sin(theta_sum_current)
    R_Y_theta_sum_T = np.array([
        [cos_theta_sum, 0, -sin_theta_sum],
        [0, 1, 0],
        [sin_theta_sum, 0, cos_theta_sum]
    ])
    M = R_Y_theta_sum_T @ R_rhs

    # Solve for theta3 and theta4 from the matrix M
    theta3 = np.arctan2(-M[0, 1], M[1, 1])
    theta4 = np.arctan2(-M[2, 0], M[2, 2])

    return (theta1, theta2, theta3, theta4)
```

### Explanation
1. **Position Calculation**: The first three joints (theta1, theta2, theta3) are determined using geometric relationships and the target position. The parameters A and B are adjusted to account for the manipulator's link lengths and the TCP's offset.
2. **Orientation Calculation**: The target rotation matrix is decomposed to solve for the fourth joint (theta4). The matrix transformations account for the cumulative rotations of all joints and the fixed rotation from the TCP's local frame. The angles theta3 and theta4 are derived using inverse trigonometric functions on the decomposed matrix elements.

This approach ensures that the manipulator reaches the desired position and orientation by solving for all four joint angles in a closed-form analytical manner.