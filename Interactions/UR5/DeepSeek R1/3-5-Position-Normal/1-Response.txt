To solve this problem, we need to determine the joint angles (θ1, θ2, θ3) for a 3-DOF serial manipulator such that the end-effector (TCP) reaches a specified target position (x, y, z). The solution involves deriving the inverse kinematics equations using trigonometric identities and matrix transformations.

### Approach
1. **Problem Analysis**: The robot has three revolute joints with specific axes of rotation and link offsets. The goal is to compute the joint angles that position the TCP at the target coordinates.
2. **Forward Kinematics**: Derive the equations that relate the joint angles to the TCP position using homogeneous transformation matrices.
3. **Inverse Kinematics**: Solve the derived equations to express the joint angles in terms of the target coordinates. This involves:
   - Using trigonometric identities to isolate and solve for each joint angle.
   - Handling multiple potential solutions by considering the geometric constraints and joint limits.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    a = 0.0823
    b = 0.09465
    y_offset = 0.093

    # Calculate sin(theta3)
    numerator_s3 = a**2 + b**2 - (y - y_offset)**2 - x**2 - z**2
    denominator_s3 = 2 * a * b
    sin_theta3 = numerator_s3 / denominator_s3

    # Check if sin(theta3) is within valid range
    if abs(sin_theta3) > 1:
        raise ValueError("Target position is unreachable")

    # Calculate cos(theta3), considering both positive and negative roots
    cos_theta3 = math.sqrt(1 - sin_theta3**2)
    if cos_theta3 < 1e-10:
        cos_theta3 = 0.0  # Avoid division by zero

    # Calculate sin(theta2) using the positive cos(theta3) first
    sin_theta2 = (y_offset - y) / (a * cos_theta3)
    if abs(sin_theta2) > 1:
        # Try negative cos(theta3)
        cos_theta3 = -cos_theta3
        sin_theta2 = (y_offset - y) / (a * cos_theta3)
        if abs(sin_theta2) > 1:
            raise ValueError("Target position is unreachable")

    # Calculate cos(theta2)
    cos_theta2 = math.sqrt(1 - sin_theta2**2)
    if cos_theta2 < 1e-10:
        cos_theta2 = 0.0  # Avoid division by zero

    # Calculate theta2
    theta2 = math.atan2(sin_theta2, cos_theta2)

    # Calculate coefficients for theta1
    A = -a * cos_theta3 * cos_theta2
    B = b - a * sin_theta3

    # Calculate theta1 using atan2
    numerator_theta1 = A * z - B * x
    denominator_theta1 = A * x - B * z
    theta1 = math.atan2(numerator_theta1, denominator_theta1)

    # Calculate theta3
    theta3 = math.atan2(sin_theta3, cos_theta3)

    return (theta1, theta2, theta3)
```

### Explanation
1. **Calculate sin(theta3)**: Using the geometric relationship derived from the forward kinematics equations, we compute `sin(theta3)` based on the target coordinates.
2. **Check Validity**: Ensure `sin(theta3)` is within the valid range [-1, 1].
3. **Compute cos(theta3)**: Using the Pythagorean identity, considering both positive and negative roots to handle different configurations.
4. **Solve for theta2**: Using the y-coordinate equation to isolate and compute `sin(theta2)` and `cos(theta2)`, checking for valid configurations.
5. **Solve for theta1**: Using the x and z coordinates, derive the coefficients and compute the angle using the arctangent function to handle quadrant ambiguities.
6. **Return Joint Angles**: The computed angles (θ1, θ2, θ3) are returned, ensuring the TCP reaches the target position.

This approach efficiently solves the inverse kinematics problem using trigonometric identities and matrix transformations, providing a closed-form solution for the given 3-DOF manipulator.