To solve the inverse kinematics for the given 3-DOF manipulator, we need to determine the joint angles (θ1, θ2, θ3) that position the TCP at the target coordinates (x, y, z). The solution involves solving for θ1 and θ2 based on the target position, while θ3 can be set to zero as it does not affect the TCP's position.

### Approach
1. **Calculate θ2**: Using the y-coordinate of the target position, we solve for θ2 using the inverse cosine function. This gives two possible solutions (θ2 and -θ2).
2. **Calculate θ1**: For each θ2 solution, we solve a system of equations derived from the x and z coordinates of the target position. This involves trigonometric identities and matrix inversion to find θ1.
3. **Set θ3**: Since θ3 does not affect the TCP's position, it is set to zero.

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    
    # Calculate theta2 from the y-component equation
    y_component = (y - 0.093) / 0.0823
    theta2 = math.acos(y_component)
    
    # Consider both possible solutions for theta2 (positive and negative)
    for theta2_candidate in [theta2, -theta2]:
        C = -0.0823 * math.sin(theta2_candidate)
        D = 0.09465
        denominator = C**2 + D**2
        
        # Avoid division by zero (problem states target is reachable, so this is safe)
        cos_theta1 = (C * x + D * z) / denominator
        sin_theta1 = (D * x - C * z) / denominator
        theta1 = math.atan2(sin_theta1, cos_theta1)
        
        # Return the first valid solution (problem assumes target is reachable)
        return (theta1, theta2_candidate, 0.0)
    
    # Fallback return (should not be reached as per problem statement)
    return (0.0, 0.0, 0.0)
```

### Explanation
1. **θ2 Calculation**: The y-coordinate equation is derived from the geometry of the manipulator. By isolating the cosine term, we use the inverse cosine function to find θ2, yielding two potential solutions.
2. **θ1 Calculation**: Using the x and z coordinates, we form a system of equations. By solving these equations using trigonometric identities and matrix inversion, we determine θ1 for each θ2 solution.
3. **θ3 Handling**: Since θ3 does not influence the TCP's position, it is arbitrarily set to zero, ensuring the solution meets the problem's requirements.

This approach efficiently computes the joint angles needed to position the TCP at the target coordinates, leveraging geometric and algebraic manipulations to solve the inverse kinematics problem.