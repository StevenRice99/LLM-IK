To solve this problem, we need to determine the joint angles (θ1, θ2, θ3) for a 3-DOF serial manipulator such that the end-effector (TCP) reaches a specified target position (x, y, z). The key insight is that the third joint (θ3) does not affect the position of the TCP, so we can set θ3 to 0 and solve for θ1 and θ2 using the derived equations.

### Approach
1. **Problem Analysis**: The robot has three revolute joints. The first joint rotates around Y, the second around Z, and the third around Y. The TCP's position is determined by θ1 and θ2, while θ3 only affects orientation. Therefore, θ3 can be set to 0.
2. **Forward Kinematics**: Derive the equations that relate θ1 and θ2 to the TCP position using trigonometric identities and matrix transformations.
3. **Inverse Kinematics**: Solve the derived equations to express θ1 and θ2 in terms of the target coordinates (x, y, z).

### Solution Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    a = 0.0823  # Length from joint3 to TCP
    L1 = 0.093   # Length from joint1 to joint2
    L2 = 0.09465 # Length from joint2 to joint3

    # Calculate theta2 from y-coordinate
    c2 = (y_target - L1) / a
    if abs(c2) > 1:
        raise ValueError("Target position is unreachable")
    s2 = math.sqrt(1 - c2**2)
    
    # Two possible solutions for theta2 (elbow up and down)
    theta2_options = [math.acos(c2), -math.acos(c2)]
    
    best_solution = None
    min_error = float('inf')
    
    for theta2 in theta2_options:
        current_s2 = math.sin(theta2)
        
        # Coefficients for the linear system in sin(theta1) and cos(theta1)
        A = L2
        B = -a * current_s2
        denominator = A**2 + (a * current_s2)**2  # A*C - B*D where C=A and D=-B
        
        if denominator < 1e-10:
            continue  # Avoid division by zero
        
        sin_theta1 = (A * x_target - B * z_target) / denominator
        cos_theta1 = (A * z_target + B * x_target) / denominator
        
        # Check if the solution is valid
        if abs(sin_theta1**2 + cos_theta1**2 - 1) > 1e-6:
            continue
        
        theta1 = math.atan2(sin_theta1, cos_theta1)
        
        # Verify the solution by forward kinematics
        x = L2 * sin_theta1 - a * current_s2 * cos_theta1
        z = L2 * cos_theta1 + a * current_s2 * sin_theta1
        error = (x - x_target)**2 + (z - z_target)**2
        
        if error < min_error:
            min_error = error
            best_solution = (theta1, theta2, 0.0)
    
    if best_solution is None:
        raise ValueError("Target position is unreachable")
    
    return best_solution
```

### Explanation
1. **Calculate θ2**: Using the y-coordinate of the target position, compute the cosine of θ2. Check if the value is within the valid range and compute the sine of θ2.
2. **Two Solutions for θ2**: Consider both possible solutions for θ2 (elbow up and elbow down configurations).
3. **Solve for θ1**: Using the derived equations from the forward kinematics, solve for θ1 by setting up a system of linear equations in terms of sine and cosine of θ1. Check the validity of the solution using the Pythagorean identity.
4. **Select Best Solution**: Evaluate the solutions by comparing the error between the computed and target positions using forward kinematics. Select the solution with the minimum error.

This approach efficiently solves the inverse kinematics problem by focusing on the relevant joints (θ1 and θ2) and setting θ3 to 0, ensuring the TCP reaches the target position accurately.