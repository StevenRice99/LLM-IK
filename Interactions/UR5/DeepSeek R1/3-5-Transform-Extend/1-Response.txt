To solve this problem, we need to determine the joint angles (theta1, theta2, theta3) for a 3-DOF serial manipulator such that the Tool Center Point (TCP) reaches a specified position and orientation. The solution involves both position and orientation calculations for the three revolute joints.

### Approach
1. **Position Calculation**:
   - **Theta2 (Joint 2)**: Calculate using the y-coordinate of the target position. This involves solving for the angle using the cosine function.
   - **Theta1 (Joint 1)**: Derived from the x and z coordinates using trigonometric identities and matrix operations to handle the coupled equations.

2. **Orientation Calculation**:
   - **Theta3 (Joint 3)**: After determining theta1 and theta2, compute the remaining rotation needed to achieve the target orientation. This involves matrix transformations and extracting the angle from the resulting rotation matrix.

### Solution Code
```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    import numpy as np
    import math

    x, y, z = p
    rx, ry, rz = r

    # Calculate theta2 from y-coordinate
    y_offset = y - 0.093
    cos_theta2 = y_offset / 0.0823
    theta2 = math.acos(cos_theta2)
    sin_theta2 = math.sin(theta2)

    # Calculate theta1 using x and z coordinates
    C = 0.0823 * sin_theta2
    denominator = C**2 + 0.09465**2
    c_theta1 = (0.09465 * z - C * x) / denominator
    s_theta1 = (0.09465 * x + C * z) / denominator
    theta1 = math.atan2(s_theta1, c_theta1)

    # Compute the target rotation matrix
    def rot_x(angle):
        return np.array([
            [1, 0, 0],
            [0, math.cos(angle), -math.sin(angle)],
            [0, math.sin(angle), math.cos(angle)]
        ])
    def rot_y(angle):
        return np.array([
            [math.cos(angle), 0, math.sin(angle)],
            [0, 1, 0],
            [-math.sin(angle), 0, math.cos(angle)]
        ])
    def rot_z(angle):
        return np.array([
            [math.cos(angle), -math.sin(angle), 0],
            [math.sin(angle), math.cos(angle), 0],
            [0, 0, 1]
        ])
    R_target = rot_z(rz) @ rot_y(ry) @ rot_x(rx)

    # Compute R1 and R2 matrices
    R1 = rot_y(theta1)
    R2 = rot_z(theta2)

    # Compute R_remaining to solve for theta3
    Rz_pi2 = rot_z(math.pi / 2)
    R_remaining = R2.T @ R1.T @ R_target @ Rz_pi2.T

    # Extract theta3 from R_remaining
    theta3 = math.atan2(R_remaining[0, 2], R_remaining[0, 0])

    return (theta1, theta2, theta3)
```

### Explanation
1. **Position Calculation**:
   - **Theta2** is derived from the y-coordinate using the inverse cosine function, adjusted for the link's offset.
   - **Theta1** is computed using the x and z coordinates by solving a system of linear equations derived from the geometric configuration of the manipulator.

2. **Orientation Calculation**:
   - The target orientation is converted into a rotation matrix using the provided roll, pitch, and yaw angles.
   - The remaining rotation needed after accounting for theta1 and theta2 is computed. This remaining rotation matrix is used to solve for theta3 by extracting the angle from the matrix elements.

This approach ensures that both the position and orientation of the TCP are achieved using the calculated joint angles, leveraging trigonometric identities and matrix operations for accuracy.