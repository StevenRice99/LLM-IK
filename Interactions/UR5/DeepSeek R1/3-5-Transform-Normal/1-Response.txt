To solve the inverse kinematics for the given 3-DOF manipulator, we need to determine the joint angles (q1, q2, q3) that position and orient the tool center point (TCP) at the desired target. The solution involves solving for the joint angles using both position and orientation constraints.

### Approach
1. **Position Analysis**:
   - **q2 Calculation**: The y-coordinate equation is used to solve for q2 using the target y-position.
   - **q1 Calculation**: Using the x and z coordinates, solve the system of equations derived from the forward kinematics to find q1.

2. **Orientation Analysis**:
   - **Rotation Matrices**: Construct the target rotation matrix from the given orientation angles (roll, pitch, yaw).
   - **q3 Calculation**: Using the derived joint angles q1 and q2, compute the required rotation matrix and solve for q3 to match the target orientation.

### Solution Code
```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    rx_target, ry_target, rz_target = r

    # Solve for q2 using the y-coordinate equation
    y_offset = y_target - 0.093
    if abs(y_offset) > 0.0823:
        raise ValueError("Target y is out of reach")
    q2 = np.arccos(y_offset / 0.0823)
    q2_solutions = [q2, -q2]

    solutions = []
    for q2 in q2_solutions:
        # Solve for q1 using x and z coordinates
        A = -0.0823 * np.sin(q2)
        B = 0.09465
        denominator = A**2 * 0.0823 + B**2 * (-0.09465)
        if np.isclose(denominator, 0):
            continue

        cos_q1_num = 0.0823 * x_target * np.sin(q2) - 0.09465 * z_target
        sin_q1_num = -0.0823 * z_target * np.sin(q2) - 0.09465 * x_target
        cos_q1 = cos_q1_num / (-denominator)
        sin_q1 = sin_q1_num / (-denominator)
        q1 = np.arctan2(sin_q1, cos_q1)

        # Compute R_target from target orientation
        cx, sx = np.cos(rx_target), np.sin(rx_target)
        cy, sy = np.cos(ry_target), np.sin(ry_target)
        cz, sz = np.cos(rz_target), np.sin(rz_target)
        Rx = np.array([[1, 0, 0], [0, cx, -sx], [0, sx, cx]])
        Ry = np.array([[cy, 0, sy], [0, 1, 0], [-sy, 0, cy]])
        Rz = np.array([[cz, -sz, 0], [sz, cz, 0], [0, 0, 1]])
        R_target = Rz @ Ry @ Rx

        # Compute required R_Y(q3)
        R_Yq1 = np.array([[np.cos(q1), 0, np.sin(q1)], [0, 1, 0], [-np.sin(q1), 0, np.cos(q1)]])
        R_Zq2 = np.array([[np.cos(q2), -np.sin(q2), 0], [np.sin(q2), np.cos(q2), 0], [0, 0, 1]])
        R_z_pi2_inv = np.array([[0, 1, 0], [-1, 0, 0], [0, 0, 1]])

        R_required = R_Yq1.T @ R_Zq2.T @ R_target @ R_z_pi2_inv

        # Extract q3 from R_required
        cos_q3 = R_required[0, 0]
        sin_q3 = R_required[0, 2]
        q3 = np.arctan2(sin_q3, cos_q3)

        solutions.append((q1, q2, q3))

    # Select the valid solution (checking for joint limits if necessary)
    for sol in solutions:
        q1, q2, q3 = sol
        if (-6.2831853 <= q1 <= 6.2831853 and
            -6.2831853 <= q2 <= 6.2831853 and
            -6.2831853 <= q3 <= 6.2831853):
            return sol

    return solutions[0] if solutions else (0.0, 0.0, 0.0)
```

### Explanation
1. **Position Calculation**:
   - **q2** is derived from the y-component of the target position, considering the link offset.
   - **q1** is computed using the x and z components, solving a system of equations derived from the forward kinematics.

2. **Orientation Calculation**:
   - The target rotation matrix is constructed from the given Euler angles (roll, pitch, yaw).
   - Using the inverse kinematics approach, the required rotation matrix for q3 is derived and solved to match the target orientation.

This approach ensures that both the position and orientation of the TCP are achieved using the closed-form solution for the joint angles.