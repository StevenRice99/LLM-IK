To solve the inverse kinematics for the 2 degrees-of-freedom serial manipulator, we need to determine the joint angles (joint1 and joint2) that will position the TCP at the desired position `p` and orientation `r`. Given the details of the manipulator, we can break down the problem into two parts: solving for joint1 and then solving for joint2.

### Step 1: Solve for Joint1
From the existing code 1, we can see that joint1 can be solved using the `atan2` function based on the x and y coordinates of the target position. This is because joint1 rotates around the Z-axis, affecting the x and y coordinates of the TCP.

### Step 2: Solve for Joint2
After determining joint1, we can use the existing code 2 to solve for joint2. This involves calculating the angle based on the x and z coordinates of the target position, considering the rotation around the Y-axis.

### Implementation
We will use the existing functions to solve for joint1 and joint2. Here's how we can implement the `inverse_kinematics` function:

```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    # Solve for joint1 using existing code 1
    x, y, z = p
    joint1 = math.atan2(-x, y)
    
    # Solve for joint2 using existing code 2
    # Adjust the target position based on joint1
    # Since joint2 rotates around Y-axis, we need to consider the x and z coordinates
    # after compensating for joint1 rotation
    # Assuming the length of the first link is 0.13585 (from the details)
    length_link1 = 0.13585
    # Calculate the new x and z coordinates after joint1 rotation
    x_new = x * math.cos(joint1) - y * math.sin(joint1)
    z_new = z - length_link1
    joint2 = -math.atan2(-x_new, z_new)
    
    return joint1, joint2
```

### Explanation
1. **Joint1 Calculation**: We use the `atan2` function to calculate the angle for joint1 based on the x and y coordinates of the target position. This angle represents the rotation around the Z-axis.
2. **Joint2 Calculation**: After determining joint1, we adjust the target position by rotating it back by joint1 to find the new x and z coordinates. We then use these adjusted coordinates to calculate joint2 using the `atan2` function, representing the rotation around the Y-axis.

This approach ensures that we correctly position the TCP at the desired location by sequentially solving for each joint angle.