To solve the inverse kinematics for the 2 degrees-of-freedom serial manipulator, we need to determine the joint angles \(\theta_1\) and \(\theta_2\) that will position the TCP at the desired position \(p = [x, y, z]\) with the desired orientation \(r = [\phi, \theta, \psi]\).

### Step-by-Step Solution:

1. **Define the Problem:**
   - **Revolute 1:** Rotates around the Z-axis.
   - **Revolute 2:** Rotates around the Y-axis.
   - **TCP Position:** \([0, -0.1197, 0.425]\) relative to Revolute 2.

2. **Forward Kinematics:**
   - The position of the TCP in world coordinates can be expressed as:
     \[
     \mathbf{p} = \mathbf{R}_1(\theta_1) \cdot \mathbf{R}_2(\theta_2) \cdot \mathbf{p}_{\text{TCP}}
     \]
   - Where \(\mathbf{R}_1(\theta_1)\) is the rotation matrix for Revolute 1, and \(\mathbf{R}_2(\theta_2)\) is the rotation matrix for Revolute 2.

3. **Inverse Kinematics:**
   - We need to solve for \(\theta_1\) and \(\theta_2\) such that the TCP reaches the desired position \(p = [x, y, z]\).

4. **Solving for \(\theta_1\):**
   - The first joint \(\theta_1\) can be found by projecting the desired position onto the XY plane and calculating the angle:
     \[
     \theta_1 = \text{atan2}(y, x)
     \]

5. **Solving for \(\theta_2\):**
   - After determining \(\theta_1\), we can find \(\theta_2\) by considering the remaining distance in the Z direction and the length of the second link.

### Python Implementation:

```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    x, y, z = p
    phi, theta, psi = r
    
    # Calculate theta1 (rotation around Z-axis)
    theta1 = math.atan2(y, x)
    
    # Calculate theta2 (rotation around Y-axis)
    # The TCP position relative to Revolute 2 is [0, -0.1197, 0.425]
    # We need to find theta2 such that the TCP reaches the desired z position
    # The z position after rotation is: 0.425 * cos(theta2) - 0.1197 * sin(theta2)
    # We solve for theta2 in the equation: 0.425 * cos(theta2) - 0.1197 * sin(theta2) = z
    # This can be rewritten as: A * cos(theta2) + B * sin(theta2) = C
    # Where A = 0.425, B = -0.1197, C = z
    A = 0.425
    B = -0.1197
    C = z
    
    # Solve for theta2 using the atan2 method
    theta2 = math.atan2(B, A) - math.atan2(C, math.sqrt(A**2 + B**2 - C**2))
    
    return theta1, theta2
```

### Explanation:
- **theta1:** This is calculated using the `atan2` function to determine the angle in the XY plane.
- **theta2:** This is calculated by solving the trigonometric equation derived from the TCP position relative to Revolute 2. The equation is solved using the `atan2` function to find the appropriate angle.

This solution assumes that the target position is reachable and does not check for joint limits or unreachable positions.