To solve the inverse kinematics for the 2-DOF serial manipulator, we need to determine the joint angles \( \theta_1 \) and \( \theta_2 \) that will position the TCP at the desired position \( p = [x, y, z] \) with the desired orientation \( r = [\phi, \theta, \psi] \).

### Step 1: Forward Kinematics
The forward kinematics of the manipulator can be derived as follows:

1. **Revolute Joint 1 (Rotation around Z-axis):**
   - The transformation matrix \( T_1 \) for the first joint is:
     \[
     T_1 = \begin{bmatrix}
     \cos(\theta_1) & -\sin(\theta_1) & 0 & 0 \\
     \sin(\theta_1) & \cos(\theta_1) & 0 & 0 \\
     0 & 0 & 1 & 0 \\
     0 & 0 & 0 & 1
     \end{bmatrix}
     \]

2. **Revolute Joint 2 (Rotation around Y-axis):**
   - The transformation matrix \( T_2 \) for the second joint is:
     \[
     T_2 = \begin{bmatrix}
     \cos(\theta_2) & 0 & \sin(\theta_2) & 0 \\
     0 & 1 & 0 & 0.13585 \\
     -\sin(\theta_2) & 0 & \cos(\theta_2) & 0 \\
     0 & 0 & 0 & 1
     \end{bmatrix}
     \]

3. **TCP Transformation:**
   - The transformation matrix \( T_{TCP} \) for the TCP is:
     \[
     T_{TCP} = \begin{bmatrix}
     1 & 0 & 0 & 0 \\
     0 & 1 & 0 & -0.1197 \\
     0 & 0 & 1 & 0.425 \\
     0 & 0 & 0 & 1
     \end{bmatrix}
     \]

The overall transformation matrix \( T \) is:
\[
T = T_1 \cdot T_2 \cdot T_{TCP}
\]

### Step 2: Inverse Kinematics
To find \( \theta_1 \) and \( \theta_2 \), we need to solve the following equations derived from the forward kinematics:

1. **Position Equations:**
   \[
   x = \cos(\theta_1) \cdot (0.13585 \cdot \cos(\theta_2) - 0.1197 \cdot \sin(\theta_2)) + \sin(\theta_1) \cdot 0.425
   \]
   \[
   y = \sin(\theta_1) \cdot (0.13585 \cdot \cos(\theta_2) - 0.1197 \cdot \sin(\theta_2)) - \cos(\theta_1) \cdot 0.425
   \]
   \[
   z = 0.13585 \cdot \sin(\theta_2) + 0.1197 \cdot \cos(\theta_2)
   \]

2. **Orientation Equations:**
   The orientation of the TCP is determined by the combined rotations of \( \theta_1 \) and \( \theta_2 \). The orientation can be represented by the rotation matrix \( R \):
   \[
   R = R_z(\theta_1) \cdot R_y(\theta_2)
   \]
   where \( R_z(\theta_1) \) is the rotation matrix around the Z-axis and \( R_y(\theta_2) \) is the rotation matrix around the Y-axis.

### Step 3: Solving for \( \theta_1 \) and \( \theta_2 \)
We can solve the position equations to find \( \theta_1 \) and \( \theta_2 \). The orientation equations can be used to verify the solution.

### Step 4: Implementation
The inverse kinematics solution can be implemented in Python as follows:

```python
import numpy as np
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    x, y, z = p
    phi, theta, psi = r

    # Solve for theta2 using the z equation
    A = 0.13585
    B = 0.1197
    C = z
    theta2 = math.atan2(C, math.sqrt(A**2 + B**2 - C**2)) - math.atan2(B, A)

    # Solve for theta1 using the x and y equations
    D = A * math.cos(theta2) - B * math.sin(theta2)
    theta1 = math.atan2(y, x) - math.atan2(0.425, D)

    return theta1, theta2
```

### Explanation:
- **theta2** is calculated using the z equation, which involves the arctangent function to find the angle that satisfies the position constraint.
- **theta1** is calculated using the x and y equations, which involve the arctangent function to find the angle that satisfies the position constraint.

This solution assumes that the target position and orientation are reachable, and it provides the joint angles \( \theta_1 \) and \( \theta_2 \) needed to position the TCP at the desired location.