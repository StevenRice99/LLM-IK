To solve the inverse kinematics for the 3 degrees-of-freedom serial manipulator, we need to determine the joint angles (theta1, theta2, theta3) that will position the TCP at the desired location (x, y, z). We can use the existing solutions as a starting point and extend them to solve for the entire chain.

### Step-by-Step Solution

1. **Solve for theta1 and theta2 using Existing Code 1:**
   - The existing code 1 solves for theta1 and theta2 given a position (x, y, z). This code assumes that the last link is the position being solved for. We can use this to find the angles for the first two joints.

2. **Adjust the position for the third joint:**
   - After finding theta1 and theta2, we need to adjust the target position to account for the third joint. The third joint affects the position of the TCP, so we need to subtract the contribution of the third joint from the target position.

3. **Solve for theta3 using Existing Code 2:**
   - The existing code 2 solves for theta given a position (x, y, z). We can use this to find the angle for the third joint after adjusting the target position.

### Implementation

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    
    # Solve for theta1 and theta2 using Existing Code 1
    theta2 = math.acos((z - 0.39225) / 0.425)
    sin_theta2 = math.sin(theta2)
    cos_theta2 = math.cos(theta2)
    K = 0.425 * sin_theta2
    L = 0.01615
    denominator = K ** 2 + L ** 2
    cos_theta1 = (K * x + L * y) / denominator
    sin_theta1 = (-L * x + K * y) / denominator
    theta1 = math.atan2(sin_theta1, cos_theta1)
    
    # Adjust the position for the third joint
    adjusted_x = x - 0.425 * sin_theta2 * cos_theta1
    adjusted_y = y - 0.425 * sin_theta2 * sin_theta1
    adjusted_z = z - 0.425 * cos_theta2 - 0.39225
    
    # Solve for theta3 using Existing Code 2
    theta3 = math.atan2(adjusted_x, adjusted_z)
    
    return (theta1, theta2, theta3)
```

### Explanation

1. **theta1 and theta2 Calculation:**
   - We use the existing code 1 to calculate theta1 and theta2. The target position is adjusted by subtracting the TCP offset (0.39225) from the z-coordinate.

2. **Position Adjustment:**
   - After finding theta1 and theta2, we adjust the target position to account for the third joint. This is done by subtracting the contribution of the first two joints from the target position.

3. **theta3 Calculation:**
   - We use the existing code 2 to calculate theta3. The adjusted position is used to find the angle for the third joint.

This solution provides a closed-form analytical solution for the inverse kinematics of the 3 degrees-of-freedom serial manipulator.