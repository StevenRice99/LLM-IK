To solve the inverse kinematics for the given 3-DOF serial manipulator, we need to determine the joint angles \( \theta_1, \theta_2, \theta_3 \) that will position the TCP at the desired target position \( p = (x, y, z) \).

### Step 1: Understanding the Robot Structure
The robot consists of three revolute joints:
1. **Revolute 1**: Rotates around the Z-axis.
2. **Revolute 2**: Rotates around the Y-axis.
3. **Revolute 3**: Rotates around the Y-axis.

The positions of the joints and the TCP are given in local coordinates relative to their parent links.

### Step 2: Forward Kinematics
The forward kinematics can be expressed as:
\[
\begin{aligned}
x &= (L_2 \cos(\theta_2) + L_3 \cos(\theta_2 + \theta_3)) \cos(\theta_1), \\
y &= (L_2 \cos(\theta_2) + L_3 \cos(\theta_2 + \theta_3)) \sin(\theta_1), \\
z &= L_1 + L_2 \sin(\theta_2) + L_3 \sin(\theta_2 + \theta_3),
\end{aligned}
\]
where:
- \( L_1 = 0 \) (since the first joint is at the origin),
- \( L_2 = 0.13585 \) (length of the second link),
- \( L_3 = 0.425 \) (length of the third link),
- \( L_{\text{TCP}} = 0.39225 \) (length from the third joint to the TCP).

### Step 3: Solving for \( \theta_1 \)
The angle \( \theta_1 \) can be directly determined from the target position \( (x, y, z) \):
\[
\theta_1 = \arctan2(y, x)
\]

### Step 4: Solving for \( \theta_2 \) and \( \theta_3 \)
We can solve for \( \theta_2 \) and \( \theta_3 \) by considering the projection of the target position onto the X-Y plane and the Z-axis.

Let \( r = \sqrt{x^2 + y^2} \) be the distance from the origin to the target in the X-Y plane. The Z-coordinate of the target is \( z \).

The equations for \( \theta_2 \) and \( \theta_3 \) are:
\[
\begin{aligned}
r &= L_2 \cos(\theta_2) + L_3 \cos(\theta_2 + \theta_3), \\
z &= L_2 \sin(\theta_2) + L_3 \sin(\theta_2 + \theta_3).
\end{aligned}
\]

These equations can be solved using trigonometric identities and algebraic manipulation.

### Step 5: Implementing the Solution in Python
The inverse kinematics solution can be implemented as follows:

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    
    # Step 1: Solve for theta1
    theta1 = np.arctan2(y, x)
    
    # Step 2: Solve for theta2 and theta3
    r = np.sqrt(x**2 + y**2)
    L2 = 0.13585
    L3 = 0.425
    L_TCP = 0.39225
    
    # Adjust z for the TCP offset
    z_eff = z - L_TCP
    
    # Using the law of cosines to solve for theta3
    D = (r**2 + z_eff**2 - L2**2 - L3**2) / (2 * L2 * L3)
    theta3 = np.arctan2(np.sqrt(1 - D**2), D)
    
    # Using the law of sines to solve for theta2
    theta2 = np.arctan2(z_eff, r) - np.arctan2(L3 * np.sin(theta3), L2 + L3 * np.cos(theta3))
    
    return theta1, theta2, theta3
```

### Explanation:
- **theta1**: Calculated using `arctan2(y, x)` to determine the angle in the X-Y plane.
- **theta3**: Calculated using the law of cosines to find the angle between the second and third links.
- **theta2**: Calculated using the law of sines to find the angle of the second link relative to the X-Y plane.

This solution assumes that the target position is reachable and does not handle cases where the target is out of the robot's workspace.