To solve the inverse kinematics for the 3-DOF serial manipulator, we need to determine the joint angles (θ₁, θ₂, θ₃) that will position the TCP at the desired position `p` and orientation `r`. The manipulator consists of three revolute joints, each with a specific axis of rotation and link lengths.

### Step-by-Step Solution:

1. **Joint 1 (θ₁):**
   - The first joint rotates around the Z-axis. The position of the TCP in the XY plane is influenced by θ₁.
   - We can use the `inverse_kinematics` function from **EXISTING 1** to solve for θ₁ based on the target position `p`.

2. **Joint 2 (θ₂):**
   - The second joint rotates around the Y-axis. The position of the TCP in the XZ plane is influenced by θ₂.
   - We can use the `inverse_kinematics` function from **EXISTING 2** to solve for θ₂ based on the target position `p`.

3. **Joint 3 (θ₃):**
   - The third joint also rotates around the Y-axis. The position of the TCP in the XZ plane is influenced by θ₃.
   - We can use the `inverse_kinematics` function from **EXISTING 3** to solve for θ₃ based on the target position `p`.

### Implementation:

```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    x, y, z = p
    
    # Solve for θ₁ (Joint 1)
    theta1 = math.atan2(-x, y)
    
    # Solve for θ₂ (Joint 2)
    theta2 = math.atan2(x, z)
    
    # Solve for θ₃ (Joint 3)
    theta3 = math.atan2(x, z)
    
    return (theta1, theta2, theta3)
```

### Explanation:
- **θ₁ (Joint 1):** The angle is calculated using `atan2(-x, y)` to determine the rotation around the Z-axis that aligns the manipulator with the target position in the XY plane.
- **θ₂ (Joint 2):** The angle is calculated using `atan2(x, z)` to determine the rotation around the Y-axis that aligns the manipulator with the target position in the XZ plane.
- **θ₃ (Joint 3):** The angle is calculated using `atan2(x, z)` to determine the rotation around the Y-axis that aligns the manipulator with the target position in the XZ plane.

This solution assumes that the target position `p` is reachable and does not account for joint limits or singularities. The orientation `r` is not directly used in this solution, as the problem focuses on positioning the TCP. If orientation is critical, additional steps would be required to align the TCP's orientation with the target orientation.

### Next Steps:
To verify the solution, you can call the `TEST_SOLUTION` function with the target position and orientation to see if the calculated joint angles correctly position the TCP.

```plaintext
TEST_SOLUTION x y z rx ry rz
```