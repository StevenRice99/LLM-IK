To solve the inverse kinematics for the given 3-DOF serial manipulator, we need to determine the joint angles \( \theta_1, \theta_2, \theta_3 \) that will position the TCP at the desired position \( p = [x, y, z] \) and orientation \( r = [\phi, \theta, \psi] \).

### Step 1: Understanding the Robot Structure
The robot has three revolute joints:
1. **Revolute 1**: Rotates around the Z-axis.
2. **Revolute 2**: Rotates around the Y-axis.
3. **Revolute 3**: Rotates around the Y-axis.

The TCP is located at the end of the third link.

### Step 2: Forward Kinematics
The forward kinematics can be derived using the Denavit-Hartenberg (DH) parameters or by directly composing the transformations. However, since we are solving the inverse kinematics, we will work backward from the desired TCP position and orientation.

### Step 3: Solving for \( \theta_1 \)
The first joint rotates around the Z-axis, so it directly affects the x and y coordinates of the TCP. We can solve for \( \theta_1 \) using the arctangent function:

\[
\theta_1 = \text{atan2}(y, x)
\]

### Step 4: Solving for \( \theta_2 \) and \( \theta_3 \)
After determining \( \theta_1 \), we can project the TCP position onto the plane defined by the second and third joints. Letâ€™s denote the projected position as \( p' = [x', y', z'] \).

The second and third joints rotate around the Y-axis, so we can use the law of cosines to solve for \( \theta_2 \) and \( \theta_3 \).

Given the lengths of the links:
- \( L_1 = 0.13585 \) (length of the second link)
- \( L_2 = 0.425 \) (length of the third link)
- \( L_3 = 0.39225 \) (length of the TCP offset)

We can write the following equations:

\[
x' = \sqrt{x^2 + y^2}
\]
\[
z' = z - L_1
\]

The distance \( d \) from the second joint to the TCP is:

\[
d = \sqrt{x'^2 + z'^2}
\]

Using the law of cosines, we can solve for \( \theta_3 \):

\[
\theta_3 = \text{acos}\left(\frac{L_2^2 + L_3^2 - d^2}{2 \cdot L_2 \cdot L_3}\right)
\]

Then, we can solve for \( \theta_2 \):

\[
\theta_2 = \text{atan2}(z', x') - \text{atan2}(L_3 \cdot \sin(\theta_3), L_2 + L_3 \cdot \cos(\theta_3))
\]

### Step 5: Implementing the Solution
Now, we can implement the solution in the `inverse_kinematics` function:

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    phi, theta, psi = r
    
    # Solve for theta1
    theta1 = np.arctan2(y, x)
    
    # Project the position onto the plane defined by the second and third joints
    x_prime = np.sqrt(x**2 + y**2)
    z_prime = z - 0.13585
    
    # Distance from the second joint to the TCP
    d = np.sqrt(x_prime**2 + z_prime**2)
    
    # Solve for theta3 using the law of cosines
    L2 = 0.425
    L3 = 0.39225
    theta3 = np.arccos((L2**2 + L3**2 - d**2) / (2 * L2 * L3))
    
    # Solve for theta2
    theta2 = np.arctan2(z_prime, x_prime) - np.arctan2(L3 * np.sin(theta3), L2 + L3 * np.cos(theta3))
    
    return theta1, theta2, theta3
```

### Step 6: Final Notes
This solution assumes that the target position and orientation are reachable. The function returns the joint angles \( \theta_1, \theta_2, \theta_3 \) in radians.