To solve the inverse kinematics for the given 4-DOF serial manipulator, we will break down the problem step by step. The goal is to find the joint angles \( \theta_1, \theta_2, \theta_3, \theta_4 \) that position the TCP at the target position \( p = (x, y, z) \).

### Step 1: Understanding the Robot Structure
The robot has four revolute joints:
- **Revolute 1**: Rotates around the Z-axis.
- **Revolute 2**: Rotates around the Y-axis.
- **Revolute 3**: Rotates around the Y-axis.
- **Revolute 4**: Rotates around the Y-axis.

The positions of the joints relative to their parent links are:
- **Revolute 1**: \( [0, 0, 0] \)
- **Revolute 2**: \( [0, 0.13585, 0] \)
- **Revolute 3**: \( [0, -0.1197, 0.425] \)
- **Revolute 4**: \( [0, 0, 0.39225] \)
- **TCP**: \( [0, 0.093, 0] \)

### Step 2: Forward Kinematics
The forward kinematics can be represented as a series of transformations:
1. **Revolute 1**: Rotation around Z-axis by \( \theta_1 \).
2. **Revolute 2**: Translation by \( [0, 0.13585, 0] \) and rotation around Y-axis by \( \theta_2 \).
3. **Revolute 3**: Translation by \( [0, -0.1197, 0.425] \) and rotation around Y-axis by \( \theta_3 \).
4. **Revolute 4**: Translation by \( [0, 0, 0.39225] \) and rotation around Y-axis by \( \theta_4 \).
5. **TCP**: Translation by \( [0, 0.093, 0] \).

### Step 3: Inverse Kinematics
We will solve for the joint angles \( \theta_1, \theta_2, \theta_3, \theta_4 \) such that the TCP reaches the target position \( p = (x, y, z) \).

#### Step 3.1: Solve for \( \theta_1 \)
The first joint rotates around the Z-axis, so \( \theta_1 \) can be found using the arctangent of the x and y coordinates of the target position:
\[
\theta_1 = \arctan2(y, x)
\]

#### Step 3.2: Solve for \( \theta_2, \theta_3, \theta_4 \)
After determining \( \theta_1 \), we can project the target position onto the plane perpendicular to the Z-axis. The remaining problem is a 3-DOF planar manipulator with joints rotating around the Y-axis.

We can use the geometric approach to solve for \( \theta_2, \theta_3, \theta_4 \). The key is to consider the distances and angles between the joints and the target position.

### Step 4: Implementation
We will implement the solution in Python using the `numpy` library for mathematical operations.

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    
    # Step 1: Solve for theta1
    theta1 = np.arctan2(y, x)
    
    # Step 2: Project the target position onto the plane perpendicular to the Z-axis
    r = np.sqrt(x**2 + y**2)
    z_target = z
    
    # Step 3: Solve for theta2, theta3, theta4 using geometric approach
    # Define the lengths of the links
    L1 = 0.13585
    L2 = 0.425
    L3 = 0.39225
    L4 = 0.093
    
    # The target position relative to the second joint
    r_target = r
    z_target_rel = z_target - L1
    
    # Solve for theta3 using the law of cosines
    D = (r_target**2 + z_target_rel**2 - L2**2 - L3**2) / (2 * L2 * L3)
    theta3 = np.arctan2(np.sqrt(1 - D**2), D)
    
    # Solve for theta2 using the law of sines
    alpha = np.arctan2(z_target_rel, r_target)
    beta = np.arctan2(L3 * np.sin(theta3), L2 + L3 * np.cos(theta3))
    theta2 = alpha - beta
    
    # Solve for theta4
    theta4 = - (theta2 + theta3)
    
    return theta1, theta2, theta3, theta4
```

### Explanation:
- **Step 1**: We calculate \( \theta_1 \) using the arctangent of the x and y coordinates.
- **Step 2**: We project the target position onto the plane perpendicular to the Z-axis.
- **Step 3**: We use the geometric approach to solve for \( \theta_2, \theta_3, \theta_4 \) using the law of cosines and the law of sines.

This solution assumes that the target position is reachable and does not handle singularities or multiple solutions.