To solve the inverse kinematics for the 4-DOF serial manipulator, we need to determine the joint angles that will position the TCP at the desired position `p` and orientation `r`. We can break this problem down into steps, using the existing solutions for sub-chains as a starting point.

### Step 1: Solve for Joint 1 (θ₁)
The first joint is a revolute joint around the Z-axis. The existing solution for joint 1 calculates θ₁ based on the target position `p`:

```python
theta1 = math.atan2(-p[0], p[1])
```

### Step 2: Solve for Joint 2 (θ₂)
The second joint is a revolute joint around the Y-axis. The existing solution for joint 2 calculates θ₂ based on the target position `p`:

```python
theta2 = math.atan2(p[0], p[2])
```

### Step 3: Solve for Joint 3 (θ₃)
The third joint is also a revolute joint around the Y-axis. The existing solution for joint 3 calculates θ₃ based on the target position `p`:

```python
theta3 = math.atan2(p[0], p[2])
```

### Step 4: Solve for Joint 4 (θ₄)
The fourth joint is a revolute joint around the Y-axis. The existing solution for joint 4 calculates θ₄ based on the target position `p`:

```python
theta4 = math.atan2(p[0], p[2])
```

### Step 5: Combine the Solutions
Now, we can combine these solutions to form the complete inverse kinematics function. We will also consider the orientation `r` to ensure the TCP reaches the desired orientation.

### Final Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    x, y, z = p
    rx, ry, rz = r
    
    # Solve for joint 1 (θ₁)
    theta1 = math.atan2(-x, y)
    
    # Solve for joint 2 (θ₂)
    theta2 = math.atan2(x, z)
    
    # Solve for joint 3 (θ₃)
    theta3 = math.atan2(x, z)
    
    # Solve for joint 4 (θ₄)
    theta4 = math.atan2(x, z)
    
    return theta1, theta2, theta3, theta4
```

### Explanation
- **Joint 1 (θ₁)**: The angle is calculated based on the target position `p` using `atan2(-x, y)` to determine the rotation around the Z-axis.
- **Joint 2 (θ₂)**: The angle is calculated based on the target position `p` using `atan2(x, z)` to determine the rotation around the Y-axis.
- **Joint 3 (θ₃)**: The angle is calculated based on the target position `p` using `atan2(x, z)` to determine the rotation around the Y-axis.
- **Joint 4 (θ₄)**: The angle is calculated based on the target position `p` using `atan2(x, z)` to determine the rotation around the Y-axis.

This solution assumes that the target position and orientation are reachable and does not include any checks for unreachable targets. The orientation `r` is not directly used in this solution, but it can be incorporated if needed by adjusting the joint angles to match the desired orientation.