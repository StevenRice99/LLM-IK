To solve the inverse kinematics for the given 4-DOF serial manipulator, we need to determine the joint angles that will position the TCP at the desired position `p` and orientation `r`. The manipulator consists of four revolute joints, with the first joint rotating around the Z-axis and the subsequent joints rotating around the Y-axis.

### Step 1: Define the DH Parameters
First, we need to define the Denavit-Hartenberg (DH) parameters for the manipulator. The DH parameters are as follows:

| Link | θ (Joint Angle) | d (Offset) | a (Length) | α (Twist) |
|------|-----------------|------------|------------|-----------|
| 1    | θ1              | 0          | 0          | 0         |
| 2    | θ2              | 0.13585    | 0          | -π/2      |
| 3    | θ3              | -0.1197    | 0.425      | 0         |
| 4    | θ4              | 0          | 0.39225    | 0         |

### Step 2: Compute the Transformation Matrices
The transformation matrix for each link can be computed using the DH parameters. The general form of the transformation matrix is:

\[
T_i = \begin{bmatrix}
\cos(\theta_i) & -\sin(\theta_i)\cos(\alpha_i) & \sin(\theta_i)\sin(\alpha_i) & a_i\cos(\theta_i) \\
\sin(\theta_i) & \cos(\theta_i)\cos(\alpha_i) & -\cos(\theta_i)\sin(\alpha_i) & a_i\sin(\theta_i) \\
0 & \sin(\alpha_i) & \cos(\alpha_i) & d_i \\
0 & 0 & 0 & 1
\end{bmatrix}
\]

### Step 3: Compute the Forward Kinematics
The forward kinematics can be computed by multiplying the transformation matrices of each link:

\[
T_{04} = T_{01} \cdot T_{12} \cdot T_{23} \cdot T_{34}
\]

### Step 4: Solve for the Joint Angles
To solve for the joint angles, we need to equate the forward kinematics to the desired position and orientation. This involves solving a system of nonlinear equations. We can use symbolic computation to solve for the joint angles.

### Step 5: Implement the Solution in Python
We will use SymPy to solve the inverse kinematics problem. Here is the implementation:

```python
import numpy as np
import sympy as sp

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    # Define symbolic variables for joint angles
    theta1, theta2, theta3, theta4 = sp.symbols('theta1 theta2 theta3 theta4')
    
    # Define DH parameters
    d1 = 0
    d2 = 0.13585
    d3 = -0.1197
    d4 = 0.39225
    a1 = 0
    a2 = 0
    a3 = 0.425
    a4 = 0
    alpha1 = 0
    alpha2 = -sp.pi/2
    alpha3 = 0
    alpha4 = 0
    
    # Define transformation matrices
    T01 = sp.Matrix([
        [sp.cos(theta1), -sp.sin(theta1)*sp.cos(alpha1), sp.sin(theta1)*sp.sin(alpha1), a1*sp.cos(theta1)],
        [sp.sin(theta1), sp.cos(theta1)*sp.cos(alpha1), -sp.cos(theta1)*sp.sin(alpha1), a1*sp.sin(theta1)],
        [0, sp.sin(alpha1), sp.cos(alpha1), d1],
        [0, 0, 0, 1]
    ])
    
    T12 = sp.Matrix([
        [sp.cos(theta2), -sp.sin(theta2)*sp.cos(alpha2), sp.sin(theta2)*sp.sin(alpha2), a2*sp.cos(theta2)],
        [sp.sin(theta2), sp.cos(theta2)*sp.cos(alpha2), -sp.cos(theta2)*sp.sin(alpha2), a2*sp.sin(theta2)],
        [0, sp.sin(alpha2), sp.cos(alpha2), d2],
        [0, 0, 0, 1]
    ])
    
    T23 = sp.Matrix([
        [sp.cos(theta3), -sp.sin(theta3)*sp.cos(alpha3), sp.sin(theta3)*sp.sin(alpha3), a3*sp.cos(theta3)],
        [sp.sin(theta3), sp.cos(theta3)*sp.cos(alpha3), -sp.cos(theta3)*sp.sin(alpha3), a3*sp.sin(theta3)],
        [0, sp.sin(alpha3), sp.cos(alpha3), d3],
        [0, 0, 0, 1]
    ])
    
    T34 = sp.Matrix([
        [sp.cos(theta4), -sp.sin(theta4)*sp.cos(alpha4), sp.sin(theta4)*sp.sin(alpha4), a4*sp.cos(theta4)],
        [sp.sin(theta4), sp.cos(theta4)*sp.cos(alpha4), -sp.cos(theta4)*sp.sin(alpha4), a4*sp.sin(theta4)],
        [0, sp.sin(alpha4), sp.cos(alpha4), d4],
        [0, 0, 0, 1]
    ])
    
    # Compute the total transformation matrix
    T04 = T01 * T12 * T23 * T34
    
    # Extract the position and orientation from the transformation matrix
    position = T04[:3, 3]
    orientation = T04[:3, :3]
    
    # Define the target position and orientation
    target_position = sp.Matrix(p)
    target_orientation = sp.Matrix(r)
    
    # Solve for the joint angles
    solution = sp.nsolve((position - target_position, orientation - target_orientation), (theta1, theta2, theta3, theta4), (0, 0, 0, 0))
    
    # Return the joint angles
    return tuple(solution)
```

### Explanation:
1. **Symbolic Variables**: We define symbolic variables for the joint angles `theta1`, `theta2`, `theta3`, and `theta4`.
2. **DH Parameters**: We define the DH parameters for each link.
3. **Transformation Matrices**: We compute the transformation matrices for each link using the DH parameters.
4. **Total Transformation Matrix**: We compute the total transformation matrix `T04` by multiplying the individual transformation matrices.
5. **Position and Orientation**: We extract the position and orientation from the total transformation matrix.
6. **Target Position and Orientation**: We define the target position and orientation.
7. **Solve for Joint Angles**: We solve the system of equations to find the joint angles that achieve the target position and orientation.
8. **Return Joint Angles**: We return the joint angles as a tuple.

This solution uses symbolic computation to solve the inverse kinematics problem, ensuring that the joint angles are computed accurately.