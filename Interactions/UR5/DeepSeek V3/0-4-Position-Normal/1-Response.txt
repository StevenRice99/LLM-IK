To solve the inverse kinematics for the given 5-DOF serial manipulator, we need to determine the joint angles that will position the TCP at the desired target position \( p = (x, y, z) \). The manipulator consists of five revolute joints, and the TCP is located at the end of the fifth link.

### Step-by-Step Solution:

1. **Joint 1 (Revolute 1):**
   - This joint rotates around the Z-axis.
   - The position of the TCP in the XY plane depends on the angle of this joint.
   - We can calculate the angle \( \theta_1 \) using the arctangent function:
     \[
     \theta_1 = \arctan2(y, x)
     \]

2. **Joint 2 (Revolute 2):**
   - This joint rotates around the Y-axis.
   - The position of the TCP in the XZ plane depends on the angle of this joint.
   - We can calculate the angle \( \theta_2 \) using the arctangent function:
     \[
     \theta_2 = \arctan2(z, \sqrt{x^2 + y^2})
     \]

3. **Joint 3 (Revolute 3):**
   - This joint also rotates around the Y-axis.
   - The position of the TCP in the XZ plane depends on the angle of this joint.
   - We can calculate the angle \( \theta_3 \) using the arctangent function:
     \[
     \theta_3 = \arctan2(z - L_2 \sin(\theta_2), \sqrt{x^2 + y^2} - L_2 \cos(\theta_2))
     \]
     where \( L_2 \) is the length of the second link.

4. **Joint 4 (Revolute 4):**
   - This joint also rotates around the Y-axis.
   - The position of the TCP in the XZ plane depends on the angle of this joint.
   - We can calculate the angle \( \theta_4 \) using the arctangent function:
     \[
     \theta_4 = \arctan2(z - L_2 \sin(\theta_2) - L_3 \sin(\theta_3), \sqrt{x^2 + y^2} - L_2 \cos(\theta_2) - L_3 \cos(\theta_3))
     \]
     where \( L_3 \) is the length of the third link.

5. **Joint 5 (Revolute 5):**
   - This joint rotates around the Z-axis.
   - The orientation of the TCP depends on the angle of this joint.
   - We can calculate the angle \( \theta_5 \) using the arctangent function:
     \[
     \theta_5 = \arctan2(\text{orientation}_y, \text{orientation}_x)
     \]

### Python Implementation:

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x, y, z = p
    
    # Joint 1
    theta1 = np.arctan2(y, x)
    
    # Joint 2
    L2 = 0.13585
    theta2 = np.arctan2(z, np.sqrt(x**2 + y**2))
    
    # Joint 3
    L3 = 0.425
    theta3 = np.arctan2(z - L2 * np.sin(theta2), np.sqrt(x**2 + y**2) - L2 * np.cos(theta2))
    
    # Joint 4
    L4 = 0.39225
    theta4 = np.arctan2(z - L2 * np.sin(theta2) - L3 * np.sin(theta3), np.sqrt(x**2 + y**2) - L2 * np.cos(theta2) - L3 * np.cos(theta3))
    
    # Joint 5
    theta5 = 0.0  # Assuming no specific orientation requirement
    
    return theta1, theta2, theta3, theta4, theta5
```

### Explanation:
- **Joint 1:** The angle \( \theta_1 \) is calculated using the arctangent of the y and x coordinates of the target position.
- **Joint 2:** The angle \( \theta_2 \) is calculated using the arctangent of the z coordinate and the distance in the XY plane.
- **Joint 3:** The angle \( \theta_3 \) is calculated by considering the position of the TCP relative to the second link.
- **Joint 4:** The angle \( \theta_4 \) is calculated by considering the position of the TCP relative to the third link.
- **Joint 5:** The angle \( \theta_5 \) is set to 0.0, assuming no specific orientation requirement.

This solution provides the joint angles needed to position the TCP at the desired target position.