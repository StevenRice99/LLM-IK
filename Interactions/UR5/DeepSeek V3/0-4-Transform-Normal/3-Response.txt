The error occurs because the value of `D` in the calculation of `theta3` is outside the valid domain of the `acos` function, which requires `D` to be in the range `[-1, 1]`. This can happen due to numerical inaccuracies or invalid inputs. To fix this, we need to ensure that `D` is clamped to the valid range before passing it to `acos`.

Here’s the corrected code:

```python
import numpy as np
from math import atan2, acos, sin, cos

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x, y, z = p
    roll, pitch, yaw = r
    
    # Step 1: Calculate wrist center position
    R = np.array([
        [cos(yaw) * cos(pitch), cos(yaw) * sin(pitch) * sin(roll) - sin(yaw) * cos(roll), cos(yaw) * sin(pitch) * cos(roll) + sin(yaw) * sin(roll)],
        [sin(yaw) * cos(pitch), sin(yaw) * sin(pitch) * sin(roll) + cos(yaw) * cos(roll), sin(yaw) * sin(pitch) * cos(roll) - cos(yaw) * sin(roll)],
        [-sin(pitch), cos(pitch) * sin(roll), cos(pitch) * cos(roll)]
    ])
    tcp_offset = np.array([0, 0, 0.09465])
    w = np.array([x, y, z]) - R @ tcp_offset
    
    # Step 2: Solve for θ₁
    theta1 = atan2(w[1], w[0])
    
    # Step 3: Solve for θ₂ and θ₃
    wx_prime = np.sqrt(w[0]**2 + w[1]**2)
    wy_prime = w[2]
    
    L2 = 0.13585
    L3 = 0.425
    L4 = 0.39225
    
    D = (wx_prime**2 + wy_prime**2 - L2**2 - L3**2) / (2 * L2 * L3)
    # Clamp D to the valid range [-1, 1] to avoid domain errors
    D = max(min(D, 1.0), -1.0)
    theta3 = acos(D)
    
    theta2 = atan2(wy_prime, wx_prime) - atan2(L3 * sin(theta3), L2 + L3 * cos(theta3))
    
    # Step 4: Solve for θ₄
    theta4 = pitch - theta2 - theta3
    
    # Step 5: Solve for θ₅
    theta5 = yaw - theta1
    
    return (theta1, theta2, theta3, theta4, theta5)
```

### Explanation of Fix
1. **Clamping `D`**: The value of `D` is clamped to the range `[-1, 1]` using `max(min(D, 1.0), -1.0)`. This ensures that `acos(D)` does not encounter a domain error.
2. **Numerical Stability**: This clamping accounts for any numerical inaccuracies that might cause `D` to slightly exceed the valid range.

This should resolve the `ValueError: math domain error` issue.