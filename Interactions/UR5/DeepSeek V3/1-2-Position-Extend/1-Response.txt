To solve the inverse kinematics for the 2 degrees-of-freedom serial manipulator, we need to determine the joint angles \(\theta_1\) and \(\theta_2\) that will position the TCP at the desired target position \(p = (x, y, z)\).

### Step-by-Step Solution:

1. **Define the Problem:**
   - The manipulator has two revolute joints, both rotating around the Y-axis.
   - The first joint is at the origin \([0, 0, 0]\).
   - The second joint is at \([0, -0.1197, 0.425]\) relative to the first joint.
   - The TCP is at \([0, 0, 0.39225]\) relative to the second joint.

2. **Forward Kinematics:**
   - The position of the TCP in world coordinates can be expressed as:
     \[
     \begin{aligned}
     x &= (L_1 \sin(\theta_1) + L_2 \sin(\theta_1 + \theta_2)) \cos(\theta_1), \\
     y &= -0.1197 + (L_1 \cos(\theta_1) + L_2 \cos(\theta_1 + \theta_2)) \sin(\theta_1), \\
     z &= (L_1 \cos(\theta_1) + L_2 \cos(\theta_1 + \theta_2)) \cos(\theta_1),
     \end{aligned}
     \]
     where \(L_1 = 0.425\) and \(L_2 = 0.39225\).

3. **Inverse Kinematics:**
   - We can solve for \(\theta_1\) and \(\theta_2\) using the following approach:
     - First, calculate the distance from the origin to the target point:
       \[
       d = \sqrt{x^2 + z^2}
       \]
     - Use the law of cosines to find \(\theta_2\):
       \[
       \cos(\theta_2) = \frac{d^2 - L_1^2 - L_2^2}{2 L_1 L_2}
       \]
       \[
       \theta_2 = \pm \arccos\left(\frac{d^2 - L_1^2 - L_2^2}{2 L_1 L_2}\right)
       \]
     - Then, solve for \(\theta_1\):
       \[
       \theta_1 = \arctan2(x, z) - \arctan2(L_2 \sin(\theta_2), L_1 + L_2 \cos(\theta_2))
       \]

4. **Implement the Solution:**
   - The Python function will compute \(\theta_1\) and \(\theta_2\) using the above equations.

### Python Function:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
    x, y, z = p
    L1 = 0.425
    L2 = 0.39225
    
    # Calculate the distance from the origin to the target point
    d = math.sqrt(x**2 + z**2)
    
    # Calculate theta2 using the law of cosines
    cos_theta2 = (d**2 - L1**2 - L2**2) / (2 * L1 * L2)
    theta2 = math.acos(cos_theta2)
    
    # Calculate theta1
    alpha = math.atan2(z, x)
    beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
    theta1 = alpha - beta
    
    return theta1, theta2
```

### Explanation:
- The function first calculates the distance \(d\) from the origin to the target point.
- It then uses the law of cosines to find \(\theta_2\).
- Finally, it calculates \(\theta_1\) by adjusting the angle \(\alpha\) (the angle from the origin to the target) by \(\beta\) (the angle from the first link to the second link).

This solution assumes that the target position is reachable, as per the instructions.