To solve the inverse kinematics for the given 3-DOF serial manipulator, we need to determine the joint angles \( \theta_1, \theta_2, \theta_3 \) that will position the TCP at the desired target position \( p = (x, y, z) \).

### Step 1: Understanding the Robot Structure
The robot consists of three revolute joints, all rotating around the Y-axis. The positions of the joints and the TCP are given in local coordinates relative to their parent links. The TCP is offset from the last joint.

### Step 2: Forward Kinematics
The forward kinematics equations can be derived by considering the transformations between the links. The position of the TCP in world coordinates can be expressed as:

\[
\begin{aligned}
x &= (L_2 \cos(\theta_2) + L_3 \cos(\theta_2 + \theta_3)) \cos(\theta_1), \\
y &= L_1 + L_2 \sin(\theta_2) + L_3 \sin(\theta_2 + \theta_3), \\
z &= (L_2 \cos(\theta_2) + L_3 \cos(\theta_2 + \theta_3)) \sin(\theta_1),
\end{aligned}
\]

where:
- \( L_1 = 0.1197 \) (distance from joint 1 to joint 2 along the Y-axis),
- \( L_2 = 0.425 \) (distance from joint 2 to joint 3 along the Z-axis),
- \( L_3 = 0.39225 \) (distance from joint 3 to TCP along the Z-axis).

### Step 3: Solving for \( \theta_1 \)
From the forward kinematics equations, we can solve for \( \theta_1 \) using the x and z coordinates:

\[
\theta_1 = \arctan2(z, x)
\]

### Step 4: Solving for \( \theta_2 \) and \( \theta_3 \)
We can solve for \( \theta_2 \) and \( \theta_3 \) by considering the distance from the origin to the TCP in the XZ plane:

\[
r = \sqrt{x^2 + z^2}
\]

The position of the TCP in the XZ plane is given by:

\[
r = L_2 \cos(\theta_2) + L_3 \cos(\theta_2 + \theta_3)
\]

The Y-coordinate of the TCP is given by:

\[
y = L_1 + L_2 \sin(\theta_2) + L_3 \sin(\theta_2 + \theta_3)
\]

We can solve these equations using trigonometric identities and the law of cosines.

### Step 5: Implementing the Solution
The inverse kinematics solution can be implemented in Python as follows:

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    L1 = 0.1197
    L2 = 0.425
    L3 = 0.39225
    
    # Step 1: Solve for theta1
    theta1 = np.arctan2(z, x)
    
    # Step 2: Solve for theta2 and theta3
    r = np.sqrt(x**2 + z**2)
    y_prime = y - L1
    
    # Using the law of cosines to solve for theta3
    cos_theta3 = (r**2 + y_prime**2 - L2**2 - L3**2) / (2 * L2 * L3)
    theta3 = np.arccos(cos_theta3)
    
    # Using the law of sines to solve for theta2
    alpha = np.arctan2(y_prime, r)
    beta = np.arctan2(L3 * np.sin(theta3), L2 + L3 * np.cos(theta3))
    theta2 = alpha - beta
    
    return theta1, theta2, theta3
```

### Step 6: Verification
To verify the solution, we can use the `FORWARD_KINEMATICS` function to check if the computed joint angles position the TCP at the desired target position.

```python
FORWARD_KINEMATICS theta1 theta2 theta3
```

This will return the position and orientation of all links in world space, allowing us to verify the accuracy of the inverse kinematics solution.