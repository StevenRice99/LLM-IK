To solve the inverse kinematics for the 3-DOF serial manipulator, we need to determine the joint angles (θ₁, θ₂, θ₃) that will position the TCP at the desired position `p` and orientation `r`. Given the structure of the manipulator, we can break down the problem step by step.

### Step 1: Solve for θ₁
The first joint (Revolute 1) rotates around the Y-axis. The position of the TCP in the X-Z plane is influenced by θ₁. We can use the `atan2` function to determine θ₁ based on the X and Z coordinates of the target position.

### Step 2: Solve for θ₂ and θ₃
After determining θ₁, we can transform the target position into the coordinate frame of the second joint. This allows us to solve for θ₂ and θ₃ using geometric relationships.

### Step 3: Implement the Solution
We will implement the solution in the `inverse_kinematics` function.

Here is the completed code:

```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    x, y, z = p
    
    # Solve for θ₁ (joint 1)
    theta1 = math.atan2(x, z)
    
    # Transform the target position into the coordinate frame of joint 2
    # The position of joint 2 in world space is [0, -0.1197, 0.425]
    # After rotating by θ₁, the new position is:
    x_prime = x * math.cos(theta1) + z * math.sin(theta1)
    z_prime = -x * math.sin(theta1) + z * math.cos(theta1)
    
    # The position of the TCP relative to joint 2 is [0, 0.093, 0]
    # So the target position relative to joint 2 is:
    x_tcp = x_prime
    y_tcp = y + 0.1197 - 0.093
    z_tcp = z_prime - 0.425
    
    # Solve for θ₂ and θ₃ using geometric relationships
    # The distance from joint 2 to the TCP is sqrt(x_tcp^2 + z_tcp^2)
    d = math.sqrt(x_tcp**2 + z_tcp**2)
    
    # Using the law of cosines, we can solve for θ₃
    a = 0.39225  # Length of link 3
    b = 0.425    # Length of link 2
    cos_theta3 = (a**2 + b**2 - d**2) / (2 * a * b)
    theta3 = math.acos(cos_theta3)
    
    # Solve for θ₂ using the law of sines
    sin_theta3 = math.sin(theta3)
    theta2 = math.atan2(z_tcp, x_tcp) - math.atan2(b * sin_theta3, a + b * cos_theta3)
    
    return theta1, theta2, theta3
```

### Explanation:
1. **θ₁ Calculation**: We use `atan2(x, z)` to determine the angle of the first joint.
2. **Coordinate Transformation**: We transform the target position into the coordinate frame of the second joint by rotating by θ₁.
3. **θ₂ and θ₃ Calculation**: We use geometric relationships (law of cosines and law of sines) to solve for θ₂ and θ₃ based on the transformed position.

This solution assumes that the target position is reachable and does not check for joint limits or singularities.