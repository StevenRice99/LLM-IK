To solve the inverse kinematics for the given 3-DOF serial manipulator, we need to determine the joint angles \( \theta_1, \theta_2, \theta_3 \) that will position the TCP at the desired position \( p = [x, y, z] \) and orientation \( r = [r_x, r_y, r_z] \).

### Step 1: Understanding the Robot Structure
The robot has three revolute joints, all rotating around the Y-axis. The positions and orientations of the links are given in local space relative to their parent link. The TCP is offset from the last joint.

### Step 2: Forward Kinematics
The forward kinematics equations can be derived as follows:

1. **Joint 1**: Rotates around the Y-axis by \( \theta_1 \).
2. **Joint 2**: Translates by \( [0, -0.1197, 0.425] \) and then rotates around the Y-axis by \( \theta_2 \).
3. **Joint 3**: Translates by \( [0, 0, 0.39225] \) and then rotates around the Y-axis by \( \theta_3 \).
4. **TCP**: Translates by \( [0, 0.093, 0] \).

The position of the TCP in world coordinates can be expressed as:
\[
\text{TCP} = R_y(\theta_1) \cdot T_1 \cdot R_y(\theta_2) \cdot T_2 \cdot R_y(\theta_3) \cdot T_3 \cdot T_{\text{TCP}}
\]
where \( R_y(\theta) \) is the rotation matrix around the Y-axis, and \( T_1, T_2, T_3, T_{\text{TCP}} \) are the translation matrices.

### Step 3: Inverse Kinematics
To solve for \( \theta_1, \theta_2, \theta_3 \), we need to invert the forward kinematics equations. Given the structure of the robot, we can use geometric methods to solve for the joint angles.

1. **Solve for \( \theta_1 \)**:
   \[
   \theta_1 = \arctan2(x, z)
   \]
   This aligns the robot in the direction of the target position.

2. **Solve for \( \theta_2 \) and \( \theta_3 \)**:
   The problem reduces to a 2D planar problem in the XZ plane. We can use the law of cosines to solve for \( \theta_2 \) and \( \theta_3 \).

   Let \( L_1 = 0.425 \) and \( L_2 = 0.39225 \). The distance from the origin to the target in the XZ plane is:
   \[
   d = \sqrt{x^2 + z^2}
   \]
   Using the law of cosines:
   \[
   \cos(\theta_3) = \frac{d^2 - L_1^2 - L_2^2}{2 L_1 L_2}
   \]
   \[
   \theta_3 = \arccos\left(\frac{d^2 - L_1^2 - L_2^2}{2 L_1 L_2}\right)
   \]
   Then, \( \theta_2 \) can be found using:
   \[
   \theta_2 = \arctan2(z, x) - \arctan2(L_2 \sin(\theta_3), L_1 + L_2 \cos(\theta_3))
   \]

### Step 4: Implementation
The inverse kinematics solution can be implemented in Python as follows:

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    rx, ry, rz = r
    
    # Solve for theta1
    theta1 = np.arctan2(x, z)
    
    # Solve for theta2 and theta3
    L1 = 0.425
    L2 = 0.39225
    d = np.sqrt(x**2 + z**2)
    
    cos_theta3 = (d**2 - L1**2 - L2**2) / (2 * L1 * L2)
    theta3 = np.arccos(cos_theta3)
    
    alpha = np.arctan2(z, x)
    beta = np.arctan2(L2 * np.sin(theta3), L1 + L2 * np.cos(theta3))
    theta2 = alpha - beta
    
    return theta1, theta2, theta3
```

This function calculates the joint angles \( \theta_1, \theta_2, \theta_3 \) required to reach the target position \( p \) and orientation \( r \).