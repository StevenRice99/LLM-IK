To solve the inverse kinematics for the given 5-DOF serial manipulator, we need to determine the joint angles that will position the TCP at the desired target position \( p = (x, y, z) \). The manipulator consists of five revolute joints, each with a specific axis of rotation and link lengths.

### Step-by-Step Solution:

1. **Joint 1 (Revolute 1):**
   - **Axis:** Y-axis
   - **Position:** [0, 0, 0]
   - **Orientation:** [0, 0, 0]
   - **Solution:** The first joint rotates around the Y-axis. The angle \( \theta_1 \) can be determined by projecting the target position onto the XZ plane and calculating the angle between the projection and the X-axis.
   \[
   \theta_1 = \arctan2(z, x)
   \]

2. **Joint 2 (Revolute 2):**
   - **Axis:** Y-axis
   - **Position:** [0, -0.1197, 0.425]
   - **Orientation:** [0, 0, 0]
   - **Solution:** The second joint also rotates around the Y-axis. The angle \( \theta_2 \) can be determined by considering the vertical distance and the horizontal distance after accounting for the first joint's rotation.

3. **Joint 3 (Revolute 3):**
   - **Axis:** Y-axis
   - **Position:** [0, 0, 0.39225]
   - **Orientation:** [0, 0, 0]
   - **Solution:** The third joint rotates around the Y-axis. The angle \( \theta_3 \) is determined by the remaining distance to the target after accounting for the first two joints.

4. **Joint 4 (Revolute 4):**
   - **Axis:** Z-axis
   - **Position:** [0, 0.093, 0]
   - **Orientation:** [0, 0, 0]
   - **Solution:** The fourth joint rotates around the Z-axis. The angle \( \theta_4 \) is determined by the orientation required to align the TCP with the target position.

5. **Joint 5 (Revolute 5):**
   - **Axis:** Y-axis
   - **Position:** [0, 0, 0.09465]
   - **Orientation:** [0, 0, 0]
   - **Solution:** The fifth joint rotates around the Y-axis. The angle \( \theta_5 \) is determined by the final orientation required to position the TCP at the target.

### Implementation:

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    x, y, z = p
    
    # Joint 1: Rotate around Y-axis
    theta1 = np.arctan2(z, x)
    
    # Joint 2: Rotate around Y-axis
    # Calculate the distance in the XZ plane after Joint 1 rotation
    r = np.sqrt(x**2 + z**2)
    # Calculate the vertical distance after Joint 1 rotation
    h = y - (-0.1197)
    # Calculate the angle using the law of cosines
    a = 0.425
    b = 0.39225
    c = np.sqrt(r**2 + h**2)
    alpha = np.arccos((a**2 + c**2 - b**2) / (2 * a * c))
    theta2 = np.arctan2(h, r) - alpha
    
    # Joint 3: Rotate around Y-axis
    # Calculate the angle using the law of cosines
    beta = np.arccos((a**2 + b**2 - c**2) / (2 * a * b))
    theta3 = np.pi - beta
    
    # Joint 4: Rotate around Z-axis
    # The orientation of the TCP is fixed, so theta4 is 0
    theta4 = 0.0
    
    # Joint 5: Rotate around Y-axis
    # The orientation of the TCP is fixed, so theta5 is 0
    theta5 = 0.0
    
    return theta1, theta2, theta3, theta4, theta5
```

### Explanation:
- **Joint 1:** The angle \( \theta_1 \) is calculated using the `arctan2` function to determine the rotation around the Y-axis.
- **Joint 2:** The angle \( \theta_2 \) is calculated using the law of cosines to determine the rotation around the Y-axis after accounting for the first joint's rotation.
- **Joint 3:** The angle \( \theta_3 \) is calculated using the law of cosines to determine the rotation around the Y-axis after accounting for the first two joints' rotations.
- **Joint 4 and Joint 5:** The angles \( \theta_4 \) and \( \theta_5 \) are set to 0 because the orientation of the TCP is fixed.

This solution assumes that the target position is reachable and does not include any checks for unreachable positions.