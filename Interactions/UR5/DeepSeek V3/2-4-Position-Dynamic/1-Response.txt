To solve the inverse kinematics for the 3-DOF serial manipulator, we need to determine the joint angles \(\theta_1\), \(\theta_2\), and \(\theta_3\) that will position the TCP at the desired target position \(p = (x, y, z)\).

### Step-by-Step Solution:

1. **Joint 1 (\(\theta_1\))**:
   - The first joint rotates around the Y-axis. The angle \(\theta_1\) can be determined by projecting the target position onto the XZ plane and calculating the angle between the projection and the Z-axis.
   - This is already solved in **Existing 1**:
     \[
     \theta_1 = \text{atan2}(x, z)
     \]

2. **Joint 2 (\(\theta_2\))**:
   - The second joint also rotates around the Y-axis. After determining \(\theta_1\), we can transform the target position into the coordinate frame of the second joint.
   - The transformed position \(p'\) in the second joint's frame can be calculated by rotating the original position by \(-\theta_1\) around the Y-axis.
   - The angle \(\theta_2\) can then be determined by projecting the transformed position onto the XZ plane and calculating the angle between the projection and the Z-axis.

3. **Joint 3 (\(\theta_3\))**:
   - The third joint rotates around the Z-axis. After determining \(\theta_1\) and \(\theta_2\), we can transform the target position into the coordinate frame of the third joint.
   - The transformed position \(p''\) in the third joint's frame can be calculated by rotating the original position by \(-\theta_1\) and \(-\theta_2\) around the Y-axis.
   - The angle \(\theta_3\) can then be determined by projecting the transformed position onto the XY plane and calculating the angle between the projection and the X-axis.

### Implementation:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
    x, y, z = p
    
    # Solve for theta1 (rotation around Y-axis)
    theta1 = math.atan2(x, z)
    
    # Transform the target position into the second joint's frame
    x_prime = x * math.cos(-theta1) - z * math.sin(-theta1)
    z_prime = x * math.sin(-theta1) + z * math.cos(-theta1)
    
    # Solve for theta2 (rotation around Y-axis)
    theta2 = math.atan2(x_prime, z_prime - 0.39225)
    
    # Transform the target position into the third joint's frame
    x_double_prime = x_prime * math.cos(-theta2) - (z_prime - 0.39225) * math.sin(-theta2)
    y_double_prime = y - 0.093
    
    # Solve for theta3 (rotation around Z-axis)
    theta3 = math.atan2(y_double_prime, x_double_prime)
    
    return (theta1, theta2, theta3)
```

### Explanation:
- **theta1**: Calculated using `atan2(x, z)` to determine the rotation around the Y-axis.
- **theta2**: After transforming the target position into the second joint's frame, `atan2(x_prime, z_prime - 0.39225)` is used to determine the rotation around the Y-axis.
- **theta3**: After transforming the target position into the third joint's frame, `atan2(y_double_prime, x_double_prime)` is used to determine the rotation around the Z-axis.

This solution assumes that the target position is reachable and does not check for joint limits or singularities.