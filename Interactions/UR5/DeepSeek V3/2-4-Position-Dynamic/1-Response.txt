To solve the inverse kinematics for the 3 degrees-of-freedom serial manipulator, we need to determine the joint angles (θ1, θ2, θ3) that will position the TCP at the desired location (x, y, z). We can use the existing solutions as a starting point and extend them to solve for all three joints.

### Step-by-Step Solution

1. **Joint 3 (θ3):**
   - The existing code 1 provides a solution for joint 3. It calculates θ3 based on the x and z coordinates of the target position.
   - We will use this solution to find θ3.

2. **Joints 1 and 2 (θ1, θ2):**
   - The existing code 2 provides a solution for joints 1 and 2. It calculates θ1 and θ2 based on the x, y, and z coordinates of the target position.
   - We will use this solution to find θ1 and θ2.

### Implementation

We will first call the existing code 1 to solve for θ3 and then use the existing code 2 to solve for θ1 and θ2.

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
    x, y, z = p
    
    # Solve for θ3 using existing code 1
    theta3 = math.atan2(x, z)
    
    # Solve for θ1 and θ2 using existing code 2
    A = 0.093
    B = 0.09465
    cosθ2 = y / A
    sinθ2 = math.sqrt(1 - cosθ2 ** 2)
    M = [[-A * sinθ2, B], [B, A * sinθ2]]
    det_M = -A * sinθ2 * (A * sinθ2) - B * B
    if det_M == 0:
        raise ValueError('Matrix is singular; target position is not reachable.')
    inv_det_M = 1.0 / det_M
    inv_M = [[inv_det_M * (A * sinθ2), -inv_det_M * B], [-inv_det_M * B, inv_det_M * (-A * sinθ2)]]
    cosθ1 = inv_M[0][0] * x + inv_M[0][1] * z
    sinθ1 = inv_M[1][0] * x + inv_M[1][1] * z
    cosθ1 = max(min(cosθ1, 1.0), -1.0)
    sinθ1 = max(min(sinθ1, 1.0), -1.0)
    theta1 = math.atan2(sinθ1, cosθ1)
    theta2 = math.acos(cosθ2)
    
    return (theta1, theta2, theta3)
```

### Explanation

1. **θ3 Calculation:**
   - We use `math.atan2(x, z)` to calculate θ3, which is the angle between the x and z coordinates of the target position.

2. **θ1 and θ2 Calculation:**
   - We use the existing code 2 to calculate θ1 and θ2. This involves solving a system of equations to find the angles that position the TCP at the desired location.

### Final Answer

The `inverse_kinematics` function will return the joint angles (θ1, θ2, θ3) needed to position the TCP at the desired location (x, y, z).