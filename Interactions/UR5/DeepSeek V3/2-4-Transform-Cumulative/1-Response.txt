To solve the inverse kinematics for the 3-DOF serial manipulator, we need to determine the joint angles (θ₁, θ₂, θ₃) that will position the TCP at the desired position `p` and orientation `r`. The manipulator consists of three revolute joints with the following properties:

1. **Revolute 1**: Rotates around the Y-axis.
2. **Revolute 2**: Rotates around the Y-axis.
3. **Revolute 3**: Rotates around the Z-axis.

The TCP is located at the end of the third link.

### Step-by-Step Solution:

1. **Joint 1 (θ₁)**:
   - The first joint rotates around the Y-axis. The position of the TCP in the XZ plane is influenced by θ₁.
   - We can use the `inverse_kinematics` function from **EXISTING 1** to solve for θ₁ based on the X and Z coordinates of the target position.

2. **Joint 2 (θ₂)**:
   - The second joint also rotates around the Y-axis. The position of the TCP in the XZ plane is influenced by both θ₁ and θ₂.
   - After determining θ₁, we can calculate the remaining position in the XZ plane and use the `inverse_kinematics` function from **EXISTING 2** to solve for θ₂.

3. **Joint 3 (θ₃)**:
   - The third joint rotates around the Z-axis. The orientation of the TCP is influenced by θ₃.
   - We can use the `inverse_kinematics` function from **EXISTING 3** to solve for θ₃ based on the desired orientation.

### Implementation:

```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    x, y, z = p
    rx, ry, rz = r
    
    # Solve for θ₁ (Joint 1)
    theta1 = math.atan2(x, z)
    
    # Solve for θ₂ (Joint 2)
    # After θ₁ is determined, the remaining position in the XZ plane is:
    x_prime = x - 0.39225 * math.sin(theta1)
    z_prime = z - 0.39225 * math.cos(theta1)
    theta2 = math.atan2(x_prime, z_prime)
    
    # Solve for θ₃ (Joint 3)
    # The orientation is influenced by θ₃
    theta3 = math.atan2(math.sin(rz), math.cos(rz))
    
    return theta1, theta2, theta3
```

### Explanation:

- **θ₁**: We calculate the angle using `atan2(x, z)` to determine the rotation around the Y-axis that aligns the TCP with the target position in the XZ plane.
  
- **θ₂**: After accounting for the rotation of θ₁, we calculate the remaining position in the XZ plane and use `atan2(x_prime, z_prime)` to determine the rotation around the Y-axis for the second joint.

- **θ₃**: We calculate the angle using `atan2(sin(rz), cos(rz))` to determine the rotation around the Z-axis that aligns the TCP with the desired orientation.

This solution assumes that the target position and orientation are reachable, and it provides the joint angles needed to achieve the desired TCP position and orientation.