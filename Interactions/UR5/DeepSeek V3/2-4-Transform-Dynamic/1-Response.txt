To solve the inverse kinematics for the given 3-DOF serial manipulator, we need to determine the joint angles (θ₁, θ₂, θ₃) that will position the TCP at the desired position `p` and orientation `r`. The manipulator consists of three revolute joints with specific axes and link lengths.

### Step-by-Step Solution:

1. **Joint 1 (θ₁):**
   - The first joint rotates around the Y-axis.
   - The position of the TCP in the X-Z plane is influenced by θ₁.
   - We can use the `inverse_kinematics` function from **EXISTING 1** to solve for θ₁.

2. **Joint 2 (θ₂):**
   - The second joint also rotates around the Y-axis.
   - The position of the TCP in the X-Z plane is influenced by θ₂.
   - We can use the `inverse_kinematics` function from **EXISTING 2** to solve for θ₂.

3. **Joint 3 (θ₃):**
   - The third joint rotates around the Z-axis.
   - The orientation of the TCP is influenced by θ₃.
   - We can use the `inverse_kinematics` function from **EXISTING 3** to solve for θ₃.

### Implementation:

```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    x, y, z = p
    rx, ry, rz = r
    
    # Solve for θ₁ (Joint 1)
    theta1 = math.atan2(x, z)
    
    # Solve for θ₂ (Joint 2)
    # Adjust the position for θ₁
    x_prime = x * math.cos(theta1) + z * math.sin(theta1)
    z_prime = -x * math.sin(theta1) + z * math.cos(theta1)
    theta2 = math.atan2(x_prime, z_prime - 0.39225)
    
    # Solve for θ₃ (Joint 3)
    # Adjust the orientation for θ₁ and θ₂
    theta3 = rz - (theta1 + theta2)
    
    return theta1, theta2, theta3
```

### Explanation:

- **θ₁ (Joint 1):** We calculate the angle needed to align the TCP in the X-Z plane using `atan2(x, z)`.
- **θ₂ (Joint 2):** We adjust the position for θ₁ and then calculate the angle needed to align the TCP in the X-Z plane using `atan2(x_prime, z_prime - 0.39225)`.
- **θ₃ (Joint 3):** We adjust the orientation for θ₁ and θ₂ and then calculate the angle needed to align the TCP's orientation using `rz - (theta1 + theta2)`.

This solution assumes that the target position and orientation are reachable and does not include any checks for joint limits or unreachable targets.