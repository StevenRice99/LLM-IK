To solve the inverse kinematics for the given 3-DOF serial manipulator, we need to determine the joint angles that will position the TCP at the desired position `p` and orientation `r`. The manipulator consists of three revolute joints: two rotating around the Y-axis and one rotating around the Z-axis.

### Step-by-Step Solution:

1. **Identify the DH Parameters:**
   - **Link 1:** 
     - Position: [0, 0, 0]
     - Orientation: [0, 0, 0]
     - Axis: Y
   - **Link 2:** 
     - Position: [0, 0, 0.39225]
     - Orientation: [0, 0, 0]
     - Axis: Y
   - **Link 3:** 
     - Position: [0, 0.093, 0]
     - Orientation: [0, 0, 0]
     - Axis: Z
   - **TCP:** 
     - Position: [0, 0, 0.09465]
     - Orientation: [0, 0, 0]

2. **Calculate the Position of the TCP:**
   - The TCP position in the world frame can be expressed as a function of the joint angles. We need to solve for the joint angles that will place the TCP at the desired position `p`.

3. **Solve for Joint Angles:**
   - **Joint 1 (θ1):** This joint rotates around the Y-axis. The position of the TCP in the X-Z plane is influenced by θ1.
   - **Joint 2 (θ2):** This joint also rotates around the Y-axis. The position of the TCP along the Z-axis is influenced by θ2.
   - **Joint 3 (θ3):** This joint rotates around the Z-axis. The orientation of the TCP is influenced by θ3.

4. **Mathematical Formulation:**
   - The position of the TCP can be expressed as:
     \[
     \begin{aligned}
     x &= (L_2 \cos(\theta_1) + L_3 \cos(\theta_1 + \theta_2)) \cos(\theta_3) \\
     y &= (L_2 \cos(\theta_1) + L_3 \cos(\theta_1 + \theta_2)) \sin(\theta_3) \\
     z &= L_1 + L_2 \sin(\theta_1) + L_3 \sin(\theta_1 + \theta_2)
     \end{aligned}
     \]
   - Where:
     - \( L_1 = 0.39225 \) (length of Link 2)
     - \( L_2 = 0.093 \) (length of Link 3)
     - \( L_3 = 0.09465 \) (length of TCP)

5. **Solve for θ1, θ2, and θ3:**
   - We can solve the above equations for θ1, θ2, and θ3 using trigonometric identities and algebraic manipulation.

### Python Implementation:

```python
import numpy as np
import sympy as sp

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    x, y, z = p
    roll, pitch, yaw = r
    
    # Link lengths
    L1 = 0.39225
    L2 = 0.093
    L3 = 0.09465
    
    # Solve for θ1
    theta1 = np.arctan2(z - L1, np.sqrt(x**2 + y**2))
    
    # Solve for θ2
    d = np.sqrt(x**2 + y**2 + (z - L1)**2)
    theta2 = np.arccos((d**2 - L2**2 - L3**2) / (2 * L2 * L3))
    
    # Solve for θ3
    theta3 = np.arctan2(y, x)
    
    return theta1, theta2, theta3
```

### Explanation:
- **θ1:** Calculated using the arctangent of the Z position relative to the X-Y plane.
- **θ2:** Calculated using the law of cosines based on the distance from the base to the TCP.
- **θ3:** Calculated using the arctangent of the Y position relative to the X position.

This solution assumes that the target position and orientation are reachable and does not include any checks for unreachable targets.