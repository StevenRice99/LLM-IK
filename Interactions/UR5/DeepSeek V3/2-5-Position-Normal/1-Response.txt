To solve the inverse kinematics for the given 4-DOF serial manipulator, we need to determine the joint angles \( \theta_1, \theta_2, \theta_3, \theta_4 \) that will position the TCP at the desired target position \( p = (x, y, z) \).

### Step-by-Step Solution:

1. **Coordinate Frames and Transformations:**
   - The manipulator has four revolute joints with axes of rotation as follows:
     - Joint 1: Y-axis
     - Joint 2: Y-axis
     - Joint 3: Z-axis
     - Joint 4: Y-axis
   - The TCP is located at the end of the fourth link.

2. **Forward Kinematics:**
   - The position of the TCP in world coordinates can be derived by applying the transformations corresponding to each joint angle and link length.

3. **Inverse Kinematics:**
   - We need to solve for \( \theta_1, \theta_2, \theta_3, \theta_4 \) such that the TCP reaches the target position \( p = (x, y, z) \).

### Analytical Solution:

1. **Solve for \( \theta_1 \):**
   - The first joint rotates around the Y-axis, so \( \theta_1 \) can be determined by the projection of the target position onto the XZ plane:
     \[
     \theta_1 = \arctan2(x, z)
     \]

2. **Solve for \( \theta_2 \):**
   - After rotating by \( \theta_1 \), the problem reduces to a 3-DOF manipulator in the YZ plane.
   - The second joint rotates around the Y-axis, so \( \theta_2 \) can be determined by the distance from the origin to the target in the YZ plane:
     \[
     d = \sqrt{y^2 + (z \cos \theta_1 - x \sin \theta_1)^2}
     \]
     \[
     \theta_2 = \arctan2(y, z \cos \theta_1 - x \sin \theta_1)
     \]

3. **Solve for \( \theta_3 \):**
   - The third joint rotates around the Z-axis, so \( \theta_3 \) can be determined by the orientation of the TCP in the XY plane:
     \[
     \theta_3 = \arctan2(y, x)
     \]

4. **Solve for \( \theta_4 \):**
   - The fourth joint rotates around the Y-axis, so \( \theta_4 \) can be determined by the final orientation of the TCP:
     \[
     \theta_4 = \arctan2(z \cos \theta_1 - x \sin \theta_1, y)
     \]

### Python Implementation:

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    
    # Solve for theta1
    theta1 = np.arctan2(x, z)
    
    # Solve for theta2
    d = np.sqrt(y**2 + (z * np.cos(theta1) - x * np.sin(theta1))**2)
    theta2 = np.arctan2(y, z * np.cos(theta1) - x * np.sin(theta1))
    
    # Solve for theta3
    theta3 = np.arctan2(y, x)
    
    # Solve for theta4
    theta4 = np.arctan2(z * np.cos(theta1) - x * np.sin(theta1), y)
    
    return theta1, theta2, theta3, theta4
```

This function calculates the joint angles \( \theta_1, \theta_2, \theta_3, \theta_4 \) required to position the TCP at the target position \( p = (x, y, z) \). The solution is derived using geometric relationships and trigonometric functions.