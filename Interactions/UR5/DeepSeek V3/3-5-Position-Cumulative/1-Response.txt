To solve the inverse kinematics for the 3 degrees-of-freedom serial manipulator, we need to determine the joint angles \(\theta_1\), \(\theta_2\), and \(\theta_3\) that will position the TCP at the desired target position \(p = (x, y, z)\).

### Step-by-Step Solution:

1. **Joint 1 (\(\theta_1\))**:
   - The first joint rotates around the Y-axis. The angle \(\theta_1\) can be determined by projecting the target position onto the XZ plane and calculating the angle between the projection and the Z-axis.
   - Using the `inverse_kinematics` function from **EXISTING 1**, we can compute \(\theta_1\) as:
     \[
     \theta_1 = \text{atan2}(x, z)
     \]

2. **Joint 2 (\(\theta_2\))**:
   - The second joint rotates around the Z-axis. After determining \(\theta_1\), we can compute the position of the end of the second link in the XZ plane and then calculate \(\theta_2\) based on the remaining distance to the target.
   - Using the `inverse_kinematics` function from **EXISTING 3**, we can compute \(\theta_2\) as:
     \[
     \theta_2 = \text{atan2}(y, x)
     \]

3. **Joint 3 (\(\theta_3\))**:
   - The third joint rotates around the Y-axis. After determining \(\theta_1\) and \(\theta_2\), we can compute the position of the end of the third link and then calculate \(\theta_3\) based on the remaining distance to the target.
   - Using the `inverse_kinematics` function from **EXISTING 5**, we can compute \(\theta_3\) as:
     \[
     \theta_3 = \text{atan2}(x, z)
     \]

### Final Inverse Kinematics Function:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
    x, y, z = p
    
    # Joint 1: Rotates around Y-axis
    theta1 = math.atan2(x, z)
    
    # Joint 2: Rotates around Z-axis
    theta2 = math.atan2(y, x)
    
    # Joint 3: Rotates around Y-axis
    theta3 = math.atan2(x, z)
    
    return (theta1, theta2, theta3)
```

### Explanation:
- **Joint 1 (\(\theta_1\))**: The angle is calculated based on the projection of the target position onto the XZ plane.
- **Joint 2 (\(\theta_2\))**: The angle is calculated based on the projection of the target position onto the XY plane.
- **Joint 3 (\(\theta_3\))**: The angle is calculated based on the projection of the target position onto the XZ plane after accounting for the previous joints.

This solution assumes that the target position is reachable and does not include any checks for unreachable positions. The angles are returned in radians.