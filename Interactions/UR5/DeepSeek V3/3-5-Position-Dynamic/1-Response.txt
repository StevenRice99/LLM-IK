To solve the inverse kinematics for the 3 degrees-of-freedom serial manipulator, we need to determine the joint angles \(\theta_1\), \(\theta_2\), and \(\theta_3\) that will position the TCP at the desired target position \(p = (x, y, z)\).

### Step-by-Step Solution:

1. **Solve for \(\theta_1\):**
   - The first joint (Revolute 1) rotates around the Y-axis. The angle \(\theta_1\) can be determined by projecting the target position onto the XZ plane and calculating the angle between the projection and the Z-axis.
   - Using the `inverse_kinematics` function from **EXISTING 1**, we can compute \(\theta_1\) as:
     \[
     \theta_1 = \text{atan2}(x, z)
     \]

2. **Solve for \(\theta_2\) and \(\theta_3\):**
   - After determining \(\theta_1\), we need to solve for \(\theta_2\) and \(\theta_3\) to position the TCP correctly. This involves transforming the target position into a coordinate system where the second joint (Revolute 2) is the origin.
   - Using the `inverse_kinematics` function from **EXISTING 2**, we can compute \(\theta_2\) and \(\theta_3\) as:
     \[
     \theta_2 = \text{atan2}(-x', y')
     \]
     \[
     \theta_3 = 0.0
     \]
   - Here, \(x'\) and \(y'\) are the transformed coordinates after accounting for \(\theta_1\).

### Python Implementation:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
    x, y, z = p
    
    # Solve for theta1 using EXISTING 1
    theta1 = math.atan2(x, z)
    
    # Transform the target position to the coordinate system of the second joint
    # Assuming the second joint is at [0, 0.093, 0] after rotation by theta1
    x_prime = x * math.cos(theta1) + z * math.sin(theta1)
    y_prime = y - 0.093
    
    # Solve for theta2 and theta3 using EXISTING 2
    theta2 = math.atan2(-x_prime, y_prime)
    theta3 = 0.0
    
    return (theta1, theta2, theta3)
```

### Explanation:
- **Step 1:** We calculate \(\theta_1\) using the `atan2` function to determine the angle in the XZ plane.
- **Step 2:** We transform the target position to the coordinate system of the second joint by accounting for the rotation \(\theta_1\) and the offset of the second joint.
- **Step 3:** We calculate \(\theta_2\) using the `atan2` function on the transformed coordinates, and set \(\theta_3\) to 0.0 as it is not needed for this specific manipulator configuration.

This solution assumes that the target position is reachable and does not include any checks for unreachable positions.