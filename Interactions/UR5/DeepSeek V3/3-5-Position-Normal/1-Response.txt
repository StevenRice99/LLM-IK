To solve the inverse kinematics for the given 3-DOF serial manipulator, we need to determine the joint angles \( \theta_1, \theta_2, \theta_3 \) that will position the TCP at the desired target position \( p = (x, y, z) \).

### Step 1: Understand the Robot Structure
The robot consists of three revolute joints:
1. **Revolute 1**: Rotates around the Y-axis.
2. **Revolute 2**: Rotates around the Z-axis.
3. **Revolute 3**: Rotates around the Y-axis.

The positions and orientations of the links are given in local space relative to their parent link.

### Step 2: Define the Forward Kinematics
The forward kinematics can be derived by multiplying the transformation matrices for each joint. The transformation matrix for each joint is given by:
\[ T_i = \text{Translation}(d_i) \cdot \text{Rotation}(\theta_i) \]

Where:
- \( d_i \) is the position of the link relative to its parent.
- \( \theta_i \) is the joint angle.

### Step 3: Solve for Joint Angles
We need to solve for \( \theta_1, \theta_2, \theta_3 \) such that the TCP reaches the target position \( p = (x, y, z) \).

#### Step 3.1: Solve for \( \theta_1 \)
The first joint rotates around the Y-axis. The position of the TCP in the XZ plane is influenced by \( \theta_1 \). We can solve for \( \theta_1 \) using:
\[ \theta_1 = \arctan2(x, z) \]

#### Step 3.2: Solve for \( \theta_2 \)
The second joint rotates around the Z-axis. The position of the TCP in the XY plane is influenced by \( \theta_2 \). We can solve for \( \theta_2 \) using:
\[ \theta_2 = \arctan2(y, \sqrt{x^2 + z^2}) \]

#### Step 3.3: Solve for \( \theta_3 \)
The third joint rotates around the Y-axis. The position of the TCP in the XZ plane is influenced by \( \theta_3 \). We can solve for \( \theta_3 \) using:
\[ \theta_3 = \arctan2(x - l_1 \cos(\theta_1), z - l_1 \sin(\theta_1)) \]

Where \( l_1 \) is the length of the first link.

### Step 4: Implement the Solution in Python
Now, we can implement the solution in the `inverse_kinematics` function.

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
    x, y, z = p
    
    # Lengths of the links
    l1 = 0.093
    l2 = 0.09465
    l3 = 0.0823
    
    # Solve for theta1
    theta1 = np.arctan2(x, z)
    
    # Solve for theta2
    theta2 = np.arctan2(y, np.sqrt(x**2 + z**2))
    
    # Solve for theta3
    x_prime = x - l1 * np.cos(theta1)
    z_prime = z - l1 * np.sin(theta1)
    theta3 = np.arctan2(x_prime, z_prime)
    
    return theta1, theta2, theta3
```

### Step 5: Verify the Solution
To verify the solution, we can use the `TEST_SOLUTION` function to check if the computed joint angles position the TCP at the desired target position.

```python
TEST_SOLUTION x y z
```

This will return the position and orientation of all links in world space after testing the inverse kinematics solution.