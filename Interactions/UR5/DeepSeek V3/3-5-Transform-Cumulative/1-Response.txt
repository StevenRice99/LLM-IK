To solve the inverse kinematics for the 3-DOF serial manipulator, we need to determine the joint angles (θ₁, θ₂, θ₃) that will position the TCP at the desired position `p` and orientation `r`. The manipulator consists of three revolute joints with the following properties:

1. **Revolute 1**: Rotates around the Y-axis.
2. **Revolute 2**: Rotates around the Z-axis.
3. **Revolute 3**: Rotates around the Y-axis.

The TCP is located at the end of the third link, and its position and orientation are given relative to the third link.

### Step-by-Step Solution:

1. **Joint 1 (θ₁)**:
   - The first joint rotates around the Y-axis. The position of the TCP in the XZ plane is influenced by θ₁.
   - We can use the `inverse_kinematics` function from **EXISTING 1** to solve for θ₁ based on the X and Z coordinates of the target position.

2. **Joint 2 (θ₂)**:
   - The second joint rotates around the Z-axis. The position of the TCP in the XY plane is influenced by θ₂.
   - We can use the `inverse_kinematics` function from **EXISTING 2** to solve for θ₂ based on the X and Y coordinates of the target position.

3. **Joint 3 (θ₃)**:
   - The third joint rotates around the Y-axis. The orientation of the TCP is influenced by θ₃.
   - We can use the `inverse_kinematics` function from **EXISTING 3** to solve for θ₃ based on the X and Z coordinates of the target orientation.

### Implementation:

```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    px, py, pz = p
    rx, ry, rz = r
    
    # Solve for θ₁ (Joint 1) using EXISTING 1
    theta1 = math.atan2(px, pz)
    
    # Solve for θ₂ (Joint 2) using EXISTING 2
    theta2 = math.atan2(py, px)
    
    # Solve for θ₃ (Joint 3) using EXISTING 3
    theta3 = math.atan2(rx, rz)
    
    return (theta1, theta2, theta3)
```

### Explanation:

- **θ₁**: The angle is calculated using `atan2(px, pz)`, which determines the rotation around the Y-axis to align the TCP with the target position in the XZ plane.
- **θ₂**: The angle is calculated using `atan2(py, px)`, which determines the rotation around the Z-axis to align the TCP with the target position in the XY plane.
- **θ₃**: The angle is calculated using `atan2(rx, rz)`, which determines the rotation around the Y-axis to align the TCP with the target orientation.

This solution assumes that the target position and orientation are reachable, and it provides the joint angles in radians.