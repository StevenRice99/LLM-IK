To solve the inverse kinematics for the 3-DOF serial manipulator, we need to determine the joint angles (θ₁, θ₂, θ₃) that will position the TCP at the desired position `p` and orientation `r`. The manipulator consists of three revolute joints with the following properties:

- **Revolute 1**: Rotates around the Y-axis.
- **Revolute 2**: Rotates around the Z-axis.
- **Revolute 3**: Rotates around the Y-axis.

The TCP is located at the end of the third link.

### Step 1: Solve for θ₁ (Joint 1)
The first joint rotates around the Y-axis. The position of the TCP in the XZ plane is influenced by θ₁. We can use the `inverse_kinematics` function from **EXISTING 1** to solve for θ₁.

```python
theta1 = math.atan2(px, pz)
```

### Step 2: Solve for θ₂ (Joint 2)
The second joint rotates around the Z-axis. The position of the TCP in the XY plane is influenced by θ₂. We can use the `inverse_kinematics` function from **EXISTING 2** to solve for θ₂.

```python
theta2 = math.atan2(py, px)
```

### Step 3: Solve for θ₃ (Joint 3)
The third joint rotates around the Y-axis. The position of the TCP in the XZ plane is influenced by θ₃. We can use the `inverse_kinematics` function from **EXISTING 3** to solve for θ₃.

```python
theta3 = math.atan2(px, pz)
```

### Step 4: Combine the Solutions
Now, we combine the solutions for θ₁, θ₂, and θ₃ to form the complete inverse kinematics solution.

### Final Code
```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    px, py, pz = p
    rx, ry, rz = r
    
    # Solve for theta1 (Joint 1)
    theta1 = math.atan2(px, pz)
    
    # Solve for theta2 (Joint 2)
    theta2 = math.atan2(py, px)
    
    # Solve for theta3 (Joint 3)
    theta3 = math.atan2(px, pz)
    
    return (theta1, theta2, theta3)
```

### Explanation
- **θ₁**: This angle is determined by the position of the TCP in the XZ plane. We use `atan2(px, pz)` to find the angle.
- **θ₂**: This angle is determined by the position of the TCP in the XY plane. We use `atan2(py, px)` to find the angle.
- **θ₃**: This angle is determined by the position of the TCP in the XZ plane. We use `atan2(px, pz)` to find the angle.

This solution assumes that the target position and orientation are reachable, and it provides the joint angles needed to position the TCP at the desired location and orientation.