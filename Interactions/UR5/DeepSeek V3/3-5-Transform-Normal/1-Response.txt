To solve the inverse kinematics for the given 3-DOF serial manipulator, we need to determine the joint angles (θ₁, θ₂, θ₃) that will position the TCP at the desired position `p = [x, y, z]` and orientation `r = [roll, pitch, yaw]`.

### Step 1: Understand the Robot Structure
The robot has three revolute joints:
- **Revolute 1**: Rotates around the Y-axis.
- **Revolute 2**: Rotates around the Z-axis.
- **Revolute 3**: Rotates around the Y-axis.

The TCP is offset from the last joint by `[0, 0.0823, 0]`.

### Step 2: Define the Forward Kinematics
The forward kinematics can be derived by multiplying the transformation matrices of each joint. The transformation matrix for each joint is given by:

\[ T_i = \begin{bmatrix}
\cos(\theta_i) & -\sin(\theta_i) & 0 & a_i \\
\sin(\theta_i) & \cos(\theta_i) & 0 & b_i \\
0 & 0 & 1 & c_i \\
0 & 0 & 0 & 1
\end{bmatrix} \]

Where:
- \( \theta_i \) is the joint angle.
- \( [a_i, b_i, c_i] \) is the position of the joint relative to its parent.

### Step 3: Solve for Joint Angles
We need to solve for \( \theta_1, \theta_2, \theta_3 \) such that the TCP reaches the desired position and orientation.

#### Step 3.1: Solve for \( \theta_1 \)
The first joint rotates around the Y-axis. The position of the TCP in the XY plane is influenced by \( \theta_1 \). We can solve for \( \theta_1 \) using the arctangent function:

\[ \theta_1 = \arctan2(y, x) \]

#### Step 3.2: Solve for \( \theta_2 \)
The second joint rotates around the Z-axis. The position of the TCP in the XZ plane is influenced by \( \theta_2 \). We can solve for \( \theta_2 \) using the arctangent function:

\[ \theta_2 = \arctan2(z, \sqrt{x^2 + y^2}) \]

#### Step 3.3: Solve for \( \theta_3 \)
The third joint rotates around the Y-axis. The orientation of the TCP is influenced by \( \theta_3 \). We can solve for \( \theta_3 \) using the desired yaw angle:

\[ \theta_3 = \text{yaw} - \theta_1 \]

### Step 4: Implement the Solution in Python
Now, we can implement the solution in the `inverse_kinematics` function.

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
    x, y, z = p
    roll, pitch, yaw = r
    
    # Solve for theta1
    theta1 = np.arctan2(y, x)
    
    # Solve for theta2
    theta2 = np.arctan2(z, np.sqrt(x**2 + y**2))
    
    # Solve for theta3
    theta3 = yaw - theta1
    
    return theta1, theta2, theta3
```

### Step 5: Verify the Solution
To verify the solution, we can use the `TEST_SOLUTION` function to check if the computed joint angles position the TCP at the desired position and orientation.

```python
TEST_SOLUTION x y z roll pitch yaw
```

This will return the position and orientation of all links in world space after testing the inverse kinematics solution.