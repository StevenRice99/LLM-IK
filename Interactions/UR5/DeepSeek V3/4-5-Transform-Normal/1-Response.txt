To solve the inverse kinematics for the given 2-DOF serial manipulator, we need to determine the joint angles (θ₁ and θ₂) that will position the TCP at the desired position \( p = (x, y, z) \) and orientation \( r = (r_x, r_y, r_z) \).

### Step 1: Understand the Robot Structure
- **Revolute 1**: Rotates around the Z-axis.
- **Revolute 2**: Rotates around the Y-axis.
- **TCP**: Located at [0, 0.0823, 0] relative to the second link.

### Step 2: Define the Forward Kinematics
The position of the TCP in world coordinates can be derived using the following transformations:
1. **Rotation by θ₁ around the Z-axis**:
   \[
   R_z(θ₁) = \begin{bmatrix}
   \cos(θ₁) & -\sin(θ₁) & 0 \\
   \sin(θ₁) & \cos(θ₁) & 0 \\
   0 & 0 & 1
   \end{bmatrix}
   \]
2. **Translation by [0, 0, 0.09465]**:
   \[
   T_1 = \begin{bmatrix}
   1 & 0 & 0 & 0 \\
   0 & 1 & 0 & 0 \\
   0 & 0 & 1 & 0.09465 \\
   0 & 0 & 0 & 1
   \end{bmatrix}
   \]
3. **Rotation by θ₂ around the Y-axis**:
   \[
   R_y(θ₂) = \begin{bmatrix}
   \cos(θ₂) & 0 & \sin(θ₂) \\
   0 & 1 & 0 \\
   -\sin(θ₂) & 0 & \cos(θ₂)
   \end{bmatrix}
   \]
4. **Translation by [0, 0.0823, 0]**:
   \[
   T_2 = \begin{bmatrix}
   1 & 0 & 0 & 0 \\
   0 & 1 & 0 & 0.0823 \\
   0 & 0 & 1 & 0 \\
   0 & 0 & 0 & 1
   \end{bmatrix}
   \]

The overall transformation matrix \( T \) is:
\[
T = R_z(θ₁) \cdot T_1 \cdot R_y(θ₂) \cdot T_2
\]

### Step 3: Solve for θ₁ and θ₂
Given the target position \( p = (x, y, z) \), we can set up the following equations based on the transformation matrix:

1. **Position Equations**:
   \[
   x = \cos(θ₁) \cdot (\cos(θ₂) \cdot 0 + \sin(θ₂) \cdot 0.0823) - \sin(θ₁) \cdot 0
   \]
   \[
   y = \sin(θ₁) \cdot (\cos(θ₂) \cdot 0 + \sin(θ₂) \cdot 0.0823) + \cos(θ₁) \cdot 0
   \]
   \[
   z = 0.09465 + \cos(θ₂) \cdot 0 - \sin(θ₂) \cdot 0.0823
   \]

2. **Orientation Equations**:
   The orientation of the TCP is given by the rotation matrix \( R_z(θ₁) \cdot R_y(θ₂) \). We can match this to the desired orientation \( r = (r_x, r_y, r_z) \).

### Step 4: Implement the Solution in Python
We will use the above equations to solve for θ₁ and θ₂.

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    x, y, z = p
    r_x, r_y, r_z = r
    
    # Solve for θ₂ using the z position equation
    z_offset = z - 0.09465
    θ₂ = np.arcsin(-z_offset / 0.0823)
    
    # Solve for θ₁ using the x and y position equations
    θ₁ = np.arctan2(y, x)
    
    return θ₁, θ₂
```

### Explanation:
- **θ₂**: We solve for θ₂ using the z position equation. The z position is influenced by the rotation around the Y-axis (θ₂).
- **θ₁**: We solve for θ₁ using the x and y position equations. The x and y positions are influenced by the rotation around the Z-axis (θ₁).

This solution assumes that the target position is reachable and does not check for joint limits or singularities.