The problem requires finding joint angles `theta1` and `theta2` for a 2-DOF robot such that the robot's end-effector reaches a target position `p` and orientation `r`. The robot's structure is a Z-axis rotation (`theta1`) followed by a Y-axis rotation (`theta2`) at a fixed offset, and then a fixed offset to the TCP. The orientation of the robot's end-effector is determined by `RotZ(theta1) * RotY(theta2)`.

The target orientation `r` is given as `(rx, ry, rz)` in radians, representing roll, pitch, and yaw.
The relationship between the robot's joint angles and the achieved Euler angles (ZYX convention: yaw, pitch, roll) is:
-   Achieved roll = 0
-   Achieved pitch = `theta2`
-   Achieved yaw = `theta1`

For the robot to achieve the target orientation `r = (rx, ry, rz)`:

1.  **If `rx` (target roll) is close to 0:**
    The target orientation implies no significant roll. Thus, we can directly map:
    `theta1 = rz` (target yaw)
    `theta2 = ry` (target pitch)

2.  **If `rx` (target roll) is close to `pi` (or `-pi`):**
    This indicates that the target frame is rotated by `pi` around its X-axis compared to a zero-roll frame.
    The ZYX Euler angles `(rz, ry, rx=pi)` correspond to a rotation matrix `R = RotZ(rz) * RotY(ry) * RotX(pi)`.
    We need to find `theta1, theta2` such that `RotZ(theta1) * RotY(theta2) = R`.
    It can be shown that this decomposition yields:
    `theta1 = rz + pi`
    `theta2 = pi - ry`
    (These angles will then be normalized).

After determining these intermediate `theta1` and `theta2` values, they must be normalized to the standard range `[-pi, pi]`, as joint angles are typically represented this way and the feedback's "correct" values are in this range. A common and robust method for normalization is `atan2(sin(angle), cos(angle))`.

The problem statement guarantees that all targets are reachable, implying that joint angles derived this way will also satisfy the positional target `p`. The feedback consistently shows that solutions derived from this logic are extremely close to the "correct" values, with discrepancies at the ULP (Unit in the Last Place) level, likely due to minute differences in floating-point arithmetic or constants (like Pi) between the Python environment and the test system.

The solution implements this logic:
- Check `rx` to decide between the two cases.
- Calculate intermediate `theta1` and `theta2`.
- Normalize these angles using `atan2(sin(angle), cos(angle))`.

```python
import math

def normalize_angle_atan2(angle: float) -> float:
    """Normalize an angle to the range [-pi, pi] using atan2."""
    return math.atan2(math.sin(angle), math.cos(angle))

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    The joint angles are primarily determined by the target orientation 'r'.
    The problem guarantees that such angles will also achieve position 'p'.
    
    :param p: The position to reach in the form [x, y, z]. (Its reachability is guaranteed)
    :param r: The orientation to reach in radians in the form [rx, ry, rz] (roll, pitch, yaw).
    :return: A tuple of the joint values (joint1, joint2), normalized to [-pi, pi].
    """
    rx, ry, rz = r

    # Tolerance for checking if roll is 0 or pi.
    # Based on feedback, r[0] can be exactly math.pi.
    geom_epsilon = 1e-9 

    theta1_intermediate: float
    theta2_intermediate: float

    # Case 1: Target roll rx is close to 0
    if abs(rx) < geom_epsilon:
        theta1_intermediate = rz
        theta2_intermediate = ry
    # Case 2: Target roll rx is close to pi (or -pi)
    elif abs(rx - math.pi) < geom_epsilon or abs(rx + math.pi) < geom_epsilon:
        theta1_intermediate = rz + math.pi
        theta2_intermediate = math.pi - ry
    else:
        # Fallback for unexpected roll values, though problem implies rx should be 0 or pi.
        # Defaulting to the roll = 0 interpretation as a robust measure.
        # This branch should ideally not be hit if inputs adhere to expected patterns.
        theta1_intermediate = rz
        theta2_intermediate = ry
        
    # Normalize the calculated intermediate angles to the range [-pi, pi]
    theta1_solution = normalize_angle_atan2(theta1_intermediate)
    theta2_solution = normalize_angle_atan2(theta2_intermediate)
        
    return (theta1_solution, theta2_solution)

```