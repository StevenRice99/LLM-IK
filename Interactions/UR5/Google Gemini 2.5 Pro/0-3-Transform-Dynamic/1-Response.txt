To derive the inverse kinematics solution for the 4-DOF serial manipulator, we will combine analytical solutions for sub-problems. The robot has a Z-axis rotation for Joint 1, followed by three consecutive Y-axis rotations for Joints 2, 3, and 4.

1.  **Solve for Joint 1 (j1):**
    Joint 1 rotates around the world Z-axis. We can determine `j1` by projecting the target TCP position `(px, py, pz)` onto the XY plane. We aim to rotate Frame 0 (world) by `j1` to get Frame 1, such that the target's projection lies on one of the axes of Frame 1. Following `EXISTING 1` (`atan2(-x, y)`), if we set `j1 = atan2(-px, py)`, the X-coordinate of the target in Frame 1 (`px_f1`) becomes 0. The Y-coordinate in Frame 1 (`py_f1`) becomes `sqrt(px^2 + py^2)`, and `pz_f1` remains `pz`.

2.  **Transform Target to J2's Planar Sub-arm:**
    Joint 2 is located at `[0, 0.13585, 0]` relative to Joint 1. Joints 2, 3, and 4, along with their connecting links, form a 3R planar manipulator that effectively operates in the XZ-plane of Frame 1 (which is J2's base frame before J2 rotates).
    The links involved are:
    *   Link from J2 to J3: Z-component `L1 = 0.425`. Y-offset (along J2's Y-axis) is `-0.1197`.
    *   Link from J3 to J4: Z-component `L2 = 0.39225`. Y-offset is `0`.
    *   TCP offset from J4: Y-offset (along J4's Y-axis) is `0.093`.

    The target for this planar arm is the origin of Joint 4 (`P_J4_origin`).
    In Frame 1, `P_target_f1 = (0, sqrt(px^2+py^2), pz)`.
    The Y-offsets along the Y-axes of J1, J2, J4 sum up: `0.13585 (J2_offset) - 0.1197 (J3_offset_in_J2) + 0.093 (TCP_offset_in_J4) = 0.10915`.
    For the target to be reachable with the `j1` strategy, `py_f1 = sqrt(px^2+py^2)` must equal this fixed sum `0.10915`. The problem statement guarantees reachability, so this condition is assumed.
    The position of J4's origin, relative to J2's origin, in J2's XZ plane (which aligns with Frame 1's XZ plane) is:
    *   `x_planar_target = px_f1 = 0`
    *   `z_planar_target = pz_f1 = pz` (world `pz`)

3.  **Solve for Joint 3 (j3):**
    `j3` is the "elbow" joint of the 2-link planar arm formed by effective lengths `L1` and `L2` aiming for `(x_planar_target, z_planar_target)`.
    Using the law of cosines: `d_sq = x_planar_target^2 + z_planar_target^2 = pz^2`.
    `cos(j3) = (d_sq - L1^2 - L2^2) / (2 * L1 * L2)`.
    We choose `j3 = acos(cos(j3))`, which gives `j3` in `[0, pi]`.

4.  **Solve for Joint 2 (j2):**
    With `j3` known, `j2` can be found using geometric relations for the 2-link arm.
    Let `C = L1 + L2*cos(j3)` and `D = L2*sin(j3)`.
    The coordinates of J4's origin in J2's frame are:
    `x_J4 = C*cos(j2) - D*sin(j2)`
    `z_J4 = C*sin(j2) + D*cos(j2)` (if j2 is angle from Z-axis, or similar formulation)
    Alternatively, using the formulation from `EXISTING 2` where `(x_target, z_target)` are inputs:
    `sin(j2) = (C*x_planar_target - D*z_planar_target) / (C^2+D^2)`
    `cos(j2) = (D*x_planar_target + C*z_planar_target) / (C^2+D^2)`
    Since `x_planar_target = 0`, this simplifies to:
    `sin(j2) = (-D*pz) / (C^2+D^2)`
    `cos(j2) = (C*pz) / (C^2+D^2)`
    `j2 = atan2(-D*pz, C*pz)`. Note that `C^2+D^2 = d_sq = pz^2` (if `pz != 0`).

5.  **Solve for Joint 4 (j4):**
    `j4` is determined by the target orientation.
    The target orientation in world frame is `R_target_world`, derived from input `r=(roll, pitch, yaw)`. Assume `R_target_world = Rz(yaw)Ry(pitch)Rx(roll)`.
    Transform this to J2's base frame (Frame 1): `R_j2_base = R_01(j1)^T * R_target_world`.
    The rotation of the planar arm (J2, J3, J4) around the Y-axis is `Ry(j2+j3+j4)`.
    The `(0,0)` element of `R_j2_base` is `cos(j2+j3+j4)` and the `(0,2)` element is `sin(j2+j3+j4)`.
    So, `sum_angles = j2+j3+j4 = atan2(R_j2_base[0,2], R_j2_base[0,0])`.
    Therefore, `j4 = sum_angles - j2 - j3`.

All joint angles will be normalized to the range `[-pi, pi]`.

```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [roll, pitch, yaw] (Rx, Ry, Rz).
              This implies R_target_world = Rz(yaw)Ry(pitch)Rx(roll).
    :return: A tuple of the joint values (j1, j2, j3, j4).
    """
    px, py, pz_world = p
    roll, pitch, yaw = r

    # Robot parameters (lengths for the planar sub-arm J2-J3-J4)
    L1 = 0.425  # Effective length of Link 3 (J2-J3 segment)
    L2 = 0.39225 # Effective length of Link 4 (J3-J4 segment)

    # Step 1: Calculate j1
    j1 = math.atan2(-px, py)
    cj1 = math.cos(j1)
    sj1 = math.sin(j1)

    # Target for the planar arm (J2, J3, J4) is J4's origin, in J2's XZ plane.
    # J2's X-axis aligns with Frame_1's X-axis. J2's Z-axis aligns with Frame_1's Z-axis.
    # After j1 rotation, target's x-coordinate in Frame_1 (px_f1) is 0.
    # So, x_planar_target for J4's origin (relative to J2's origin) is 0.
    # z_planar_target for J4's origin is pz_world.
    x_planar_target = 0.0
    z_planar_target = pz_world

    # Step 2: Solve for j3
    d_sq = x_planar_target**2 + z_planar_target**2
    
    cos_j3_num = d_sq - L1**2 - L2**2
    cos_j3_den = 2 * L1 * L2

    if abs(cos_j3_den) < 1e-12: # Should not happen if L1, L2 > 0
        if abs(cos_j3_num) < 1e-12: # d_sq = L1^2 + L2^2 (e.g. j3 = pi/2)
            cos_j3 = 0.0
        else: # Problematic, implies L1 or L2 is zero or target unreachable
              # However, problem assumes reachability.
            cos_j3 = np.clip(cos_j3_num / (cos_j3_den + 1e-12), -1.0, 1.0) # Avoid literal div by zero
    else:
        cos_j3 = np.clip(cos_j3_num / cos_j3_den, -1.0, 1.0)
    
    j3 = math.acos(cos_j3) # j3 is in [0, pi]

    # Step 3: Solve for j2
    s_j3 = math.sin(j3)
    C_val = L1 + L2 * math.cos(j3) # math.cos(j3) is same as pre-clipped cos_j3 if j3 from acos(cos_j3)
    D_val = L2 * s_j3
    
    denom_j2 = C_val**2 + D_val**2 # This should be d_sq if d_sq is not zero.
                                  # If d_sq is zero (pz_world=0), then L1 must be equal to L2 for reachability, and j3=pi.
                                  # In that case C_val=L1-L2=0, D_val=0, so denom_j2=0.
                                  # Since L1 != L2, pz_world cannot be 0. So d_sq > 0 and denom_j2 > 0.
    
    if abs(denom_j2) < 1e-9:
        # This case implies d_sq is near zero, which means pz_world is near zero.
        # As L1 != L2, (0,0) for the planar arm is not reachable unless L1=L2=0.
        # Smallest d is |L1-L2|. So denom_j2 should be at least (|L1-L2|)^2.
        # This path should ideally not be taken due to reachability assumption.
        # If it were, j2 might be based on orientation or set to a default.
        # For robustness if pz_world is extremely small, leading to C_val*pz_world and D_val*pz_world being tiny.
        # If pz_world is exactly 0, then sin_j2_val and cos_j2_val would be 0/0 if denom_j2 is also 0.
        # But since L1!=L2, pz_world!=0, so denom_j2 = pz_world^2 != 0.
        sin_j2_val = 0.0 # Fallback, though unlikely to be needed
        cos_j2_val = 1.0 # Fallback
    else:
        sin_j2_val = (C_val * x_planar_target - D_val * z_planar_target) / denom_j2
        cos_j2_val = (D_val * x_planar_target + C_val * z_planar_target) / denom_j2
        
    j2 = math.atan2(sin_j2_val, cos_j2_val)

    # Step 4: Calculate j4 using orientation
    cr_world, sr_world = math.cos(roll), math.sin(roll)
    cp_world, sp_world = math.cos(pitch), math.sin(pitch)
    cy_world, sy_world = math.cos(yaw), math.sin(yaw)

    R_target_world = np.array([
        [cy_world*cp_world, cy_world*sp_world*sr_world - sy_world*cr_world, cy_world*sp_world*cr_world + sy_world*sr_world],
        [sy_world*cp_world, sy_world*sp_world*sr_world + cy_world*cr_world, sy_world*sp_world*cr_world - cy_world*sr_world],
        [-sp_world,         cp_world*sr_world,                             cp_world*cr_world]
    ])

    R_01_T = np.array([
        [cj1,  sj1, 0],
        [-sj1, cj1, 0],
        [0,    0,   1]
    ])
    
    R_j2_base = R_01_T @ R_target_world
    
    sum_j2_j3_j4 = math.atan2(R_j2_base[0,2], R_j2_base[0,0])
    
    j4 = sum_j2_j3_j4 - j2 - j3
    
    # Normalize angles to [-pi, pi]
    j1 = (j1 + math.pi) % (2 * math.pi) - math.pi
    j2 = (j2 + math.pi) % (2 * math.pi) - math.pi
    # j3 is already in [0, pi]. Normalizing (j3+pi)%(2pi)-pi:
    # if j3=0 -> (pi)%(2pi)-pi = 0. if j3=pi -> (2pi)%(2pi)-pi = -pi.
    # To keep j3 in [0,pi] as per acos, or accept [-pi,0] for the other half.
    # Standard normalization is fine.
    j3 = (j3 + math.pi) % (2 * math.pi) - math.pi 
    j4 = (j4 + math.pi) % (2 * math.pi) - math.pi

    return j1, j2, j3, j4
```