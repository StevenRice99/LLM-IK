The inverse kinematics solution is derived geometrically.
1.  **Target Rotation and Wrist Center**:
    The input orientation `r = (roll, pitch, yaw)` is converted to a 3x3 rotation matrix `R_target` (assuming ZYX Euler: `Rz(yaw)Ry(pitch)Rx(roll)`).
    The wrist center `P_wc = (pwx, pwy, pwz)` is found by subtracting the TCP's offset (`TCP_offset_y` along Link 4's Y-axis) from the target position `p`, using `R_target`.
    `P_wc = p - R_target * [0, TCP_offset_y, 0]^T`.

2.  **Joint 1 (q1) and Sum of Y-axis Rotations (q_sum_angles)**:
    The robot's structure `Base -> Rz(q1) -> ... -> Ry(q2)Ry(q3)Ry(q4) -> TCP` means the overall orientation from base to Link 4 (to which TCP is fixed) is `R_L4_base = Rz(q1) * Ry(q2+q3+q4)`. Since `R_target` is the orientation of Link 4:
    `R_target = Rz(q1) * Ry(q_sum_angles)`, where `q_sum_angles = q2 + q3 + q4`.
    Comparing with the structure `[[c1*c_sum, -s1, c1*s_sum], [s1*c_sum, c1, s1*s_sum], [-s_sum, 0, c_sum]]`:
    *   `q1 = atan2(-r12, r22)` (from `r12 = -sin(q1)` and `r22 = cos(q1)`, assuming `r32=0`).
    *   `q_sum_angles = atan2(-r31, r33)` (from `r31 = -sin(q_sum_angles)` and `r33 = cos(q_sum_angles)`).

3.  **Planar Inverse Kinematics for q2, q3**:
    Transform `P_wc` into Frame 1 (the frame after `q1` rotation, origin at base): `P_wc_F1 = Rz(-q1) * P_wc`.
    The components of `P_wc_F1` relevant for the planar arm formed by links `l2z` and `l3z` are `vx_planar = P_wc_F1.x` and `vz_planar = P_wc_F1.z`. (The J2 origin is at `(0,L0y,0)` in F1; `vx_planar` and `vz_planar` are effectively coordinates of `P_wc` relative to J2's XZ plane).
    Using the law of cosines on the planar triangle (sides `l2z`, `l3z`, and hypotenuse `sqrt(vx_planar^2 + vz_planar^2)`):
    `cos(q3) = (vx_planar^2 + vz_planar^2 - l2z^2 - l3z^2) / (2 * l2z * l3z)`.
    This `cos(q3)` value is clamped to `[-1, 1]`. This yields two solutions for `q3`:
    *   `q3_A = acos(cos_q3_clamped)` (typically "elbow up/positive")
    *   `q3_B = -acos(cos_q3_clamped)` (typically "elbow down/negative")

4.  **Solving for q2**:
    For each `q3` solution (`q3_val`, using `cos_q3_clamped`):
    Let `X_arm = l3z * sin(q3_val)` and `Z_arm = l2z + l3z * cos_q3_clamped`.
    The planar equations are:
    `vx_planar = cos(q2)*X_arm + sin(q2)*Z_arm`
    `vz_planar = -sin(q2)*X_arm + cos(q2)*Z_arm`
    Solving for `sin(q2)` and `cos(q2)`:
    `sin_q2 = (vx_planar*Z_arm - vz_planar*X_arm) / (X_arm^2 + Z_arm^2)`
    `cos_q2 = (vx_planar*X_arm + vz_planar*Z_arm) / (X_arm^2 + Z_arm^2)`
    `q2 = atan2(sin_q2, cos_q2)`.
    (Denominator `X_arm^2 + Z_arm^2` is `vx_planar^2 + vz_planar^2`).

5.  **Solving for q4**:
    For each set `(q2, q3)`, `q4 = q_sum_angles - q2 - q3`.

6.  **Solution Selection**:
    Two sets of `(q1, q2, q3, q4)` are generated. A common heuristic is to choose the solution where `q4` (normalized to `[-pi, pi]`) has the smallest absolute value. In case of a tie (or near-equality within a small epsilon), the solution derived from `q3_A` (non-negative `q3`) is preferred.

This provides a complete, closed-form analytical solution.

```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    px, py, pz = p
    rx_in, ry_in, rz_in = r # roll, pitch, yaw (ZYX Euler)

    # Link parameters
    # L0y = 0.13585 # Offset from J1 frame to J2 origin (not directly in planar IK equations here)
    l2z = 0.425    # Length of link segment from J2 to J3 projected on J2's Z-axis
    l3z = 0.39225  # Length of link segment from J3 to J4 (wrist) projected on J3's Z-axis
    TCP_offset_y = 0.093

    # 1. Calculate R_target from r_angles (Rz(yaw)Ry(pitch)Rx(roll))
    crx = math.cos(rx_in)
    srx = math.sin(rx_in)
    cry = math.cos(ry_in)
    sry = math.sin(ry_in)
    crz = math.cos(rz_in)
    srz = math.sin(rz_in)

    r11 = crz * cry
    r12 = crz * sry * srx - srz * crx
    # r13 = crz * sry * crx + srz * srx
    # r21 = srz * cry # Not needed for q1
    r22 = srz * sry * srx + crz * crx
    # r23 = srz * sry * crx - crz * srx
    r31 = -sry
    r32 = cry * srx # Should be close to 0 for the Rz(q1)Ry(q_sum) model
    r33 = cry * crx
    
    # 2. Calculate Wrist Center P_wc (origin of Link 4 frame)
    pwx = px - r12 * TCP_offset_y
    pwy = py - r22 * TCP_offset_y
    pwz = pz - r32 * TCP_offset_y

    # 3. Solve for q1 and q_sum_angles = q2+q3+q4
    q1 = math.atan2(-r12, r22)
    q_sum_angles = math.atan2(-r31, r33)

    # 4. Transform P_wc to Frame 1 (after q1 rotation) and define planar coords for J2, J3
    c1 = math.cos(q1)
    s1 = math.sin(q1)
    
    pwx_F1 = c1 * pwx + s1 * pwy
    # pwy_F1 = -s1 * pwx + c1 * pwy # For consistency check with L0y, l2y
    pwz_F1 = pwz

    vx_planar = pwx_F1 
    vz_planar = pwz_F1 

    # 5. Solve for cos(q3)
    cos_q3_num = vx_planar**2 + vz_planar**2 - l2z**2 - l3z**2
    cos_q3_den = 2 * l2z * l3z
    
    if abs(cos_q3_den) < 1e-12: # Avoid division by zero if l2z or l3z is zero (not the case here)
        cos_q3_clamped = 2.0 # Force out of range if denominator is zero
    else:
        cos_q3_clamped = cos_q3_num / cos_q3_den

    if cos_q3_clamped > 1.0: cos_q3_clamped = 1.0
    elif cos_q3_clamped < -1.0: cos_q3_clamped = -1.0
    
    q3_A = math.acos(cos_q3_clamped)
    q3_B = -math.acos(cos_q3_clamped)

    # Helper function to calculate q2, q4 for a given q3 branch
    def _solve_q2_q4_for_branch(q3_val, current_cos_q3_clamped):
        s3 = math.sin(q3_val)
        c3 = current_cos_q3_clamped 

        X_arm = l3z * s3
        Z_arm = l2z + l3z * c3
        
        den_q2_calc = vx_planar**2 + vz_planar**2 # This is X_arm^2 + Z_arm^2
        if abs(den_q2_calc) < 1e-12: # Wrist center on J2 axis
            s2_val = 0.0 # q2 is indeterminate, choose 0 by convention
            c2_val = 1.0 
        else:
            s2_val = (vx_planar * Z_arm - vz_planar * X_arm) / den_q2_calc
            c2_val = (vx_planar * X_arm + vz_planar * Z_arm) / den_q2_calc
        
        q2_val = math.atan2(s2_val, c2_val)
        q4_val = q_sum_angles - q2_val - q3_val
        return q2_val, q4_val

    # Calculate solutions for both branches
    q2_A, q4_A = _solve_q2_q4_for_branch(q3_A, cos_q3_clamped)
    norm_abs_q4_A = abs(math.atan2(math.sin(q4_A), math.cos(q4_A)))

    q2_B, q4_B = _solve_q2_q4_for_branch(q3_B, cos_q3_clamped)
    norm_abs_q4_B = abs(math.atan2(math.sin(q4_B), math.cos(q4_B)))

    # 6. Select best solution
    # Prefer solution A (q3 >= 0) if |normalized_q4| are equal or very close.
    epsilon = 1e-9 
    if norm_abs_q4_A <= norm_abs_q4_B + epsilon:
        final_q2, final_q3, final_q4 = q2_A, q3_A, q4_A
    else:
        final_q2, final_q3, final_q4 = q2_B, q3_B, q4_B
        
    return (q1, final_q2, final_q3, final_q4)
```