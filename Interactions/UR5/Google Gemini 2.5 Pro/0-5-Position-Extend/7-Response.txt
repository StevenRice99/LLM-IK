The problem requires a closed-form analytical solution for the inverse kinematics of a 6-DOF robot (Z-Y-Y-Y-Z-Y) to position its TCP. We are provided with an existing 5-DOF solver (Z-Y-Y-Y-Z) that positions a point `E`, which corresponds to the origin of our Link 6 if our actual `θ5` (the 5th joint, a Z-rotation) were zero. The 6th joint `θ6` (Y-axis) is 0 in all correct solutions and, due to the TCP offset being along Link 6's Y-axis, `θ6` does not affect the TCP position.

Let `P_TCP_desired` be the target TCP position.
The `EXISTING` solver calculates `θ1, θ2, θ3, θ4` to position a virtual point `P_V`. This `P_V` is the world position of our Link 6's origin if `θ5` were 0.
The relationship between `P_TCP_desired` and `P_V` is:
`P_TCP_desired = P_V + R_04 * DeltaP_L4`
where `R_04` is the rotation matrix from the world frame to Link 4's frame (determined by `θ1, θ2, θ3, θ4`).
`DeltaP_L4 = R_Z(θ5) * V_combined - V_combined_at_theta5_zero`
`V_combined = [0, 0.0823, 0.09465]^T` (vector from L5 origin to TCP in L5's frame, if L5 frame axes are aligned with L4 after `θ4` and before `θ5` rotation, and `V_combined` is expressed in this L5 frame that will be rotated by `θ5`).
`V_combined_at_theta5_zero = [0, 0.0823, 0.09465]^T`.
So, `DeltaP_L4 = [-A*sin(θ5), A*(cos(θ5)-1), 0]^T`, where `A = 0.0823`.
The target for the `EXISTING` solver is `P_V_target = P_TCP_desired - R_04 * DeltaP_L4`.

To determine `θ5`, we use the relationship:
`P_TCP_desired - P_L5_origin = R_04 * R_Z(θ5) * V_L5_to_TCP_in_L5_frame_rotated_by_theta5`
where `P_L5_origin` is the world position of Link 5's origin (calculated via FK from `θ1..θ4`), and `V_L5_to_TCP_in_L5_frame_rotated_by_theta5 = [0, A, B]^T` (with `A=0.0823, B=0.09465`).
This leads to `R_04^T * (P_TCP_desired - P_L5_origin) = [-A*sin(θ5), A*cos(θ5), B]^T`.
From this, `θ5 = atan2(-LHS[0]/A, LHS[1]/A) = atan2(-LHS[0], LHS[1])`, where `LHS = R_04^T * (P_TCP_desired - P_L5_origin)`.

We use an iterative approach:
1.  Initialize `θ5`. Calculate initial `θ1..θ4` by calling `EXISTING_IK` with `P_V_target` computed using an initial `R_04` (e.g., identity) and initial `θ5`.
2.  Loop for a fixed number of iterations:
    a.  Update `R_04` based on current `θ1..θ4`.
    b.  Calculate `DeltaP_L4` using current `θ5`.
    c.  Calculate `P_V_target = P_TCP_desired - R_04 * DeltaP_L4`.
    d.  Call `EXISTING_IK(P_V_target)` to get new `θ1..θ4`.
    e.  Perform FK with new `θ1..θ4` to get the new `P_L5_origin` and new `R_04`.
    f.  Calculate `LHS = R_04^T * (P_TCP_desired - P_L5_origin)`.
    g.  Update `θ5 = atan2(-LHS[0], LHS[1])`.
3.  Final angles are `(θ1, θ2, θ3, θ4, θ5, 0.0)`.

```python
import math
import numpy as np

# Helper functions for rotation matrices
def rot_z_matrix(angle_rad: float) -> np.ndarray:
    c = math.cos(angle_rad)
    s = math.sin(angle_rad)
    return np.array([
        [c, -s, 0.0],
        [s,  c, 0.0],
        [0.0,  0.0, 1.0]
    ], dtype=float)

def rot_y_matrix(angle_rad: float) -> np.ndarray:
    c = math.cos(angle_rad)
    s = math.sin(angle_rad)
    return np.array([
        [c,  0.0, s],
        [0.0,  1.0, 0.0],
        [-s, 0.0, c]
    ], dtype=float)

# Normalization function
def normalize_angle(angle: float) -> float:
    while angle > math.pi:
        angle -= 2 * math.pi
    while angle < -math.pi:
        angle += 2 * math.pi
    return angle

class KinematicsSolver:
    # Link offsets
    d_L1_L2 = np.array([0.0, 0.13585, 0.0])
    d_L2_L3 = np.array([0.0, -0.1197, 0.425])
    d_L3_L4 = np.array([0.0, 0.0, 0.39225])
    d_L4_L5_origin = np.array([0.0, 0.093, 0.0]) # To L5 origin

    # TCP related constants
    A_const = 0.0823  # Component related to L5_Y and L6_Y offsets
    B_const = 0.09465 # L5_Z to L6_Z offset component

    def existing_inverse_kinematics(self, p_target_j6: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
        # This is the <EXISTING> 5-DOF IK solver.
        x_w, y_w, z_w = p_target_j6
        d2_y_link2_offset = 0.13585 # This is d_L1_L2[1]
        y_chain_offset_in_j2_frame = -0.1197 + 0.093 # y-offset from J2's XZ plane to effective J5 origin projection
        
        L1_planar = 0.425    # d_L2_L3[2]
        L2_planar = 0.39225  # d_L3_L4[2]
        L3_planar = 0.09465  # This is B_const, offset from J5 origin to target E of existing solver

        delta_for_t1_calc = y_chain_offset_in_j2_frame + d2_y_link2_offset
        r_xy_world = math.hypot(x_w, y_w)
        phi_xy_world = math.atan2(-x_w, y_w)
        
        arg_acos = 0.0
        if r_xy_world < 1e-9:
            arg_acos = 0.0 if abs(delta_for_t1_calc) < 1e-9 else (1.0 if delta_for_t1_calc > 0 else -1.0)
        else:
            arg_acos = delta_for_t1_calc / r_xy_world
        
        arg_acos = max(-1.0, min(1.0, arg_acos))
        gamma_angle = math.acos(arg_acos)
        t1_candidates = [normalize_angle(phi_xy_world + gamma_angle), normalize_angle(phi_xy_world - gamma_angle)]
        best_solution_params = (float('inf'), 0.0, 0.0, 0.0, 0.0)

        for t1_val in t1_candidates:
            c1 = math.cos(t1_val)
            s1 = math.sin(t1_val)
            x_target_j2_frame = c1 * x_w + s1 * y_w
            y_coord_j2_frame = -s1 * x_w + c1 * y_w - d2_y_link2_offset
            z_target_j2_frame = z_w
            psi_angle_j2_xz = math.atan2(x_target_j2_frame, z_target_j2_frame)

            for T_orientation_L3_link in (psi_angle_j2_xz, normalize_angle(psi_angle_j2_xz + math.pi)):
                xw_planar_target = x_target_j2_frame - L3_planar * math.sin(T_orientation_L3_link)
                zw_planar_target = z_target_j2_frame - L3_planar * math.cos(T_orientation_L3_link)
                dist_sq_planar_target = xw_planar_target**2 + zw_planar_target**2
                
                epsilon_reach_sq = 1e-9 
                if not ( (L1_planar - L2_planar)**2 - epsilon_reach_sq <= dist_sq_planar_target <= (L1_planar + L2_planar)**2 + epsilon_reach_sq ):
                     if not (math.isclose(dist_sq_planar_target, (L1_planar+L2_planar)**2, rel_tol=1e-7, abs_tol=1e-7) or \
                             math.isclose(dist_sq_planar_target, (L1_planar-L2_planar)**2, rel_tol=1e-7, abs_tol=1e-7)):
                        continue
                
                den_cos_beta = 2 * L1_planar * L2_planar
                if abs(den_cos_beta) < 1e-12: continue
                cos_beta_angle = (dist_sq_planar_target - L1_planar**2 - L2_planar**2) / den_cos_beta
                cos_beta_angle = max(-1.0, min(1.0, cos_beta_angle))
                
                for sign_beta in (+1.0, -1.0):
                    beta_val = sign_beta * math.acos(cos_beta_angle) # This is t3
                    alpha_val = math.atan2(xw_planar_target, zw_planar_target)
                    den_delta_calc = L1_planar + L2_planar * math.cos(beta_val)
                    num_delta_calc = L2_planar * math.sin(beta_val)
                    delta_val = math.atan2(num_delta_calc, den_delta_calc)
                    
                    t2_val = normalize_angle(alpha_val - delta_val)
                    t3_val = normalize_angle(beta_val)
                    t4_val = normalize_angle(T_orientation_L3_link - (t2_val + t3_val))
                    
                    x_fk_check = L1_planar*math.sin(t2_val) + L2_planar*math.sin(t2_val+t3_val) + L3_planar*math.sin(t2_val+t3_val+t4_val)
                    z_fk_check = L1_planar*math.cos(t2_val) + L2_planar*math.cos(t2_val+t3_val) + L3_planar*math.cos(t2_val+t3_val+t4_val)
                    current_err_sq_val = (x_fk_check - x_target_j2_frame)**2 + \
                                         (z_fk_check - z_target_j2_frame)**2 + \
                                         (y_coord_j2_frame - y_chain_offset_in_j2_frame)**2
                    if current_err_sq_val < best_solution_params[0]:
                        best_solution_params = (current_err_sq_val, t1_val, t2_val, t3_val, t4_val)
        
        _, final_t1, final_t2, final_t3, final_t4 = best_solution_params
        final_t5_existing = 0.0 # Existing solver's 5th joint is always 0
        return (final_t1, final_t2, final_t3, final_t4, final_t5_existing)

    def _fk_to_L5_origin_and_R04(self, th1, th2, th3, th4):
        p_j1_origin = np.array([0.,0.,0.])
        R_W_1 = rot_z_matrix(th1)
        p_j2_origin = p_j1_origin + R_W_1 @ self.d_L1_L2 # d_L1_L2 is in L1's frame (post-th1 rot)
        
        R_W_2 = R_W_1 @ rot_y_matrix(th2)
        p_j3_origin = p_j2_origin + R_W_2 @ self.d_L2_L3 # d_L2_L3 is in L2's frame (post-th2 rot)
        
        R_W_3 = R_W_2 @ rot_y_matrix(th3)
        p_j4_origin = p_j3_origin + R_W_3 @ self.d_L3_L4 # d_L3_L4 is in L3's frame (post-th3 rot)
        
        R_04 = R_W_3 @ rot_y_matrix(th4) # R_04 is R_W_4
        p_L5_origin = p_j4_origin + R_04 @ self.d_L4_L5_origin # d_L4_L5 is in L4's frame (post-th4 rot)
        return p_L5_origin, R_04

    def inverse_kinematics(self, p_tcp_target_tuple: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
        p_tcp_desired_np = np.array(p_tcp_target_tuple, dtype=float)
        
        # Initial guesses
        th5 = 0.0
        # Initial R04: from a first pass for existing_IK
        # For this first pass, P_V_target = P_TCP_desired (assuming th5=0, so DeltaP_L4=0)
        th1, th2, th3, th4, _ = self.existing_inverse_kinematics(p_tcp_target_tuple)
        _, R04 = self._fk_to_L5_origin_and_R04(th1, th2, th3, th4)

        N_ITERATIONS = 15 # Number of fixed iterations

        for _ in range(N_ITERATIONS):
            s5 = math.sin(th5)
            c5 = math.cos(th5)
            
            # DeltaP_L4 = R_Z(θ5) * V_combined - V_combined_at_theta5_zero
            # V_combined = [0, A_const, B_const]^T
            # R_Z(θ5)*V_combined = [-A_const*s5, A_const*c5, B_const]^T
            # V_combined_at_theta5_zero = [0, A_const, B_const]^T
            # DeltaP_L4 (vector in L4 frame) = [-A_const*s5, A_const*c5 - A_const, 0.0]
            delta_P_L4_frame = np.array([-self.A_const * s5, self.A_const * (c5 - 1.0), 0.0])
            
            p_V_target = p_tcp_desired_np - R04 @ delta_P_L4_frame
            
            th1, th2, th3, th4, _ = self.existing_inverse_kinematics(tuple(p_V_target.tolist()))
            
            p_L5_origin, R04 = self._fk_to_L5_origin_and_R04(th1, th2, th3, th4)
            
            vec_Ptcp_minus_PL5_world = p_tcp_desired_np - p_L5_origin
            LHS_vec_L4_frame = R04.T @ vec_Ptcp_minus_PL5_world
            
            # We expect LHS_vec_L4_frame to be R_Z(th5_new) * [0, A_const, B_const]^T
            # LHS_vec_L4_frame[0] = -A_const * sin(th5_new)
            # LHS_vec_L4_frame[1] =  A_const * cos(th5_new)
            # LHS_vec_L4_frame[2] should be B_const
            
            # Update th5
            # If A_const is zero, this would be problematic, but it's 0.0823.
            s5_new_component = -LHS_vec_L4_frame[0]
            c5_new_component = LHS_vec_L4_frame[1]
            th5 = math.atan2(s5_new_component, c5_new_component)

        th6_final = 0.0

        return (normalize_angle(th1),
                normalize_angle(th2),
                normalize_angle(th3),
                normalize_angle(th4),
                normalize_angle(th5),
                normalize_angle(th6_final))

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    solver = KinematicsSolver()
    return solver.inverse_kinematics(p)

```