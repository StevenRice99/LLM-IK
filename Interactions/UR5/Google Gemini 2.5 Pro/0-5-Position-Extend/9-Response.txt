The core of the problem is to adapt a 5-DOF inverse kinematics (IK) solver for a Z-Y-Y-Y-Z chain to solve for a 6-DOF Z-Y-Y-Y-Z-Y chain where the 6th joint (`θ6`, Y-axis) is fixed at 0. The 5th joint (`θ5`, Z-axis) is active.

Let `P_TCP_desired` be the target TCP position.
The existing 5-DOF solver positions a point `P_V`, which is the origin of our Link 6 if our actual `θ5` were 0.
The relationship between `P_TCP_desired` and `P_V` is:
`P_TCP_desired = P_V + R_04 @ X_L4`
where `R_04` is the rotation from the world frame to Link 4's frame (determined by `θ1, θ2, θ3, θ4`).
The vector `X_L4` is the displacement from `P_V` to `P_TCP_desired`, expressed in Link 4's frame.

Let:
*   `P_L5_origin` be the world position of Link 5's origin.
*   `A_const = 0.0823` (Y-component of TCP offset from Link 6 origin, in Link 6's frame).
*   `B_const = 0.09465` (Z-component of Link 6 origin from Link 5 origin, in Link 5's frame).
The vector from Link 5 origin to the TCP, expressed in Link 5's frame (before `θ5` rotation, assuming L5 frame axes are aligned with L4's after `θ4` rotation) is `V_L5_TCP_local = [0, A_const, B_const]^T`.
After rotation by `θ5` (around Z-axis of L5), this vector becomes `V_L5_TCP_rotated = R_Z(θ5) @ V_L5_TCP_local = [-A_const*sin(θ5), A_const*cos(θ5), B_const]^T`.
So, `P_TCP_desired = P_L5_origin + R_04 @ V_L5_TCP_rotated`.

The existing solver targets `P_V = P_L5_origin + R_04 @ [0, 0, B_const]^T` (this is L6 origin if `θ5=0`).
From this, `P_L5_origin = P_V - R_04 @ [0, 0, B_const]^T`.
Substituting into the TCP equation:
`P_TCP_desired = (P_V - R_04 @ [0,0,B_const]^T) + R_04 @ [-A_const*sin(θ5), A_const*cos(θ5), B_const]^T`
`P_TCP_desired = P_V + R_04 @ ([-A_const*sin(θ5), A_const*cos(θ5), B_const]^T - [0,0,B_const]^T)`
`P_TCP_desired = P_V + R_04 @ [-A_const*sin(θ5), A_const*cos(θ5), 0]^T`.
Let `X_L4_calc = [-A_const*sin(θ5), A_const*cos(θ5), 0]^T`.
So, the target for the existing solver should be `P_V_target = P_TCP_desired - R_04 @ X_L4_calc`.

The iterative algorithm:
1.  Initialize `θ5 = 0.0`.
2.  Make an initial guess for `θ1...θ4` by calling `existing_inverse_kinematics(P_TCP_desired)` (implicitly assuming `R_04` is Identity and `X_L4_calc` is zero for this first call's target).
3.  Loop for a fixed number of iterations (e.g., 15):
    a.  Calculate `P_L5_origin` and `R_04` using the current `θ1...θ4` via forward kinematics.
    b.  Calculate `X_L4_calc = [-A_const*sin(θ5), A_const*cos(θ5), 0]^T`.
    c.  Set `P_V_target = P_TCP_desired - R_04 @ X_L4_calc`.
    d.  Call `(θ1, θ2, θ3, θ4, _) = existing_inverse_kinematics(P_V_target)`. These become the new current `θ1...θ4`.
    e.  Recalculate `P_L5_origin` and `R_04` using the new `θ1...θ4`.
    f.  The vector from `P_L5_origin` to `P_TCP_desired` in Link 4's frame is `LHS_L4 = R_04^T @ (P_TCP_desired - P_L5_origin)`.
    g.  We expect `LHS_L4 = R_Z(θ5_new) @ V_L5_TCP_local = [-A_const*sin(θ5_new), A_const*cos(θ5_new), B_const]^T`.
    h.  Update `θ5 = atan2(-LHS_L4[0], LHS_L4[1])`.
4.  The final joint angles are `(θ1, θ2, θ3, θ4, θ5, 0.0)`.

A crucial correction from the previous attempt is in step 3.b: the `X_L4_calc` term was `[-A_const*s5, A_const*(c5-1.0), 0.0]`, which has been corrected to `[-A_const*s5, A_const*c5, 0.0]`.

```python
import math
import numpy as np

# Helper functions for rotation matrices
def rot_z_matrix(angle_rad: float) -> np.ndarray:
    c = math.cos(angle_rad)
    s = math.sin(angle_rad)
    return np.array([
        [c, -s, 0.0],
        [s,  c, 0.0],
        [0.0,  0.0, 1.0]
    ], dtype=float)

def rot_y_matrix(angle_rad: float) -> np.ndarray:
    c = math.cos(angle_rad)
    s = math.sin(angle_rad)
    return np.array([
        [c,  0.0, s],
        [0.0,  1.0, 0.0],
        [-s, 0.0, c]
    ], dtype=float)

# Normalization function
def normalize_angle(angle: float) -> float:
    while angle > math.pi:
        angle -= 2 * math.pi
    while angle < -math.pi:
        angle += 2 * math.pi
    return angle

class KinematicsSolver:
    # Link offsets from URDF (parent to child frame)
    d_J1_to_J2 = np.array([0.0, 0.13585, 0.0])      # Position of Revolute 2
    d_J2_to_J3 = np.array([0.0, -0.1197, 0.425])    # Position of Revolute 3
    d_J3_to_J4 = np.array([0.0, 0.0, 0.39225])      # Position of Revolute 4
    d_J4_to_J5 = np.array([0.0, 0.093, 0.0])        # Position of Revolute 5 (L5_origin)
    
    # TCP related constants
    # Vector from J5_origin to J6_origin in J5's frame (before th5 rotation)
    d_J5_to_J6 = np.array([0.0, 0.0, 0.09465])      # Position of Revolute 6
    # Vector from J6_origin to TCP in J6's frame (before th6 rotation, th6=0)
    d_J6_to_TCP = np.array([0.0, 0.0823, 0.0])      # Position of TCP

    # Combined vector from J5_origin to TCP in J5's frame (before th5 rotation)
    # V_J5_TCP_local = d_J5_to_J6 + d_J6_to_TCP (since R_Z(th5) is applied to J5 frame, and J6 frame is initially aligned)
    # This is not quite right if d_J6_to_TCP is in J6's frame which is rotated by th5 from J5's Z.
    # Let's use A_const and B_const as defined by the geometry relative to J5 frame after th5.
    A_const = d_J6_to_TCP[1] # 0.0823
    B_const = d_J5_to_J6[2] # 0.09465
    # Vector from J5_origin to TCP, expressed in J5's frame *before* th5 rotation:
    V_J5_TCP_pre_th5 = np.array([0.0, A_const, B_const])


    def existing_inverse_kinematics(self, p_target_j6_origin: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
        # This is the <EXISTING> 5-DOF IK solver.
        # It positions the origin of Link 6 (assuming its internal theta5 is 0).
        x_w, y_w, z_w = p_target_j6_origin
        
        # Constants from existing solver's geometry interpretation
        d2_y_link2_offset = self.d_J1_to_J2[1] # 0.13585
        # y_chain_offset: y-coord of J5_origin in J2_frame, used for planar solver setup
        y_chain_offset_in_j2_frame = self.d_J2_to_J3[1] + self.d_J4_to_J5[1] # -0.1197 + 0.093

        L1_planar = self.d_J2_to_J3[2]   # 0.425
        L2_planar = self.d_J3_to_J4[2]   # 0.39225
        L3_planar = self.d_J5_to_J6[2]   # 0.09465 (This is B_const)

        delta_for_t1_calc = y_chain_offset_in_j2_frame + d2_y_link2_offset
        r_xy_world = math.hypot(x_w, y_w)
        phi_xy_world = math.atan2(-x_w, y_w) # Existing solver uses this convention
        
        arg_acos = 0.0
        if r_xy_world < 1e-9:
            arg_acos = 0.0 if abs(delta_for_t1_calc) < 1e-9 else (1.0 if delta_for_t1_calc > 0 else -1.0)
        else:
            arg_acos = delta_for_t1_calc / r_xy_world
        
        arg_acos = max(-1.0, min(1.0, arg_acos))
        gamma_angle = math.acos(arg_acos)
        t1_candidates = [normalize_angle(phi_xy_world + gamma_angle), normalize_angle(phi_xy_world - gamma_angle)]
        best_solution_params = (float('inf'), 0.0, 0.0, 0.0, 0.0)

        for t1_val in t1_candidates:
            c1 = math.cos(t1_val); s1 = math.sin(t1_val)
            x_target_j2_frame = c1 * x_w + s1 * y_w
            y_coord_j2_frame = -s1 * x_w + c1 * y_w - d2_y_link2_offset
            z_target_j2_frame = z_w
            psi_angle_j2_xz = math.atan2(x_target_j2_frame, z_target_j2_frame)

            for T_orientation_L3_link in (psi_angle_j2_xz, normalize_angle(psi_angle_j2_xz + math.pi)):
                xw_planar_target = x_target_j2_frame - L3_planar * math.sin(T_orientation_L3_link)
                zw_planar_target = z_target_j2_frame - L3_planar * math.cos(T_orientation_L3_link)
                dist_sq_planar_target = xw_planar_target**2 + zw_planar_target**2
                
                epsilon_reach_sq = 1e-9 
                if not ( (L1_planar - L2_planar)**2 - epsilon_reach_sq <= dist_sq_planar_target <= (L1_planar + L2_planar)**2 + epsilon_reach_sq ):
                     if not (math.isclose(dist_sq_planar_target, (L1_planar+L2_planar)**2, rel_tol=1e-7, abs_tol=1e-7) or \
                             math.isclose(dist_sq_planar_target, (L1_planar-L2_planar)**2, rel_tol=1e-7, abs_tol=1e-7)):
                        continue
                
                den_cos_beta = 2 * L1_planar * L2_planar
                if abs(den_cos_beta) < 1e-12: continue
                cos_beta_angle = (dist_sq_planar_target - L1_planar**2 - L2_planar**2) / den_cos_beta
                cos_beta_angle = max(-1.0, min(1.0, cos_beta_angle))
                
                for sign_beta in (+1.0, -1.0):
                    beta_val = sign_beta * math.acos(cos_beta_angle)
                    alpha_val = math.atan2(xw_planar_target, zw_planar_target)
                    den_delta_calc = L1_planar + L2_planar * math.cos(beta_val)
                    num_delta_calc = L2_planar * math.sin(beta_val)
                    delta_val = math.atan2(num_delta_calc, den_delta_calc)
                    t2_val = normalize_angle(alpha_val - delta_val); t3_val = normalize_angle(beta_val)
                    t4_val = normalize_angle(T_orientation_L3_link - (t2_val + t3_val))
                    
                    x_fk_check = L1_planar*math.sin(t2_val) + L2_planar*math.sin(t2_val+t3_val) + L3_planar*math.sin(t2_val+t3_val+t4_val)
                    z_fk_check = L1_planar*math.cos(t2_val) + L2_planar*math.cos(t2_val+t3_val) + L3_planar*math.cos(t2_val+t3_val+t4_val)
                    current_err_sq_val = (x_fk_check - x_target_j2_frame)**2 + \
                                         (z_fk_check - z_target_j2_frame)**2 + \
                                         (y_coord_j2_frame - y_chain_offset_in_j2_frame)**2
                    if current_err_sq_val < best_solution_params[0]:
                        best_solution_params = (current_err_sq_val, t1_val, t2_val, t3_val, t4_val)
        
        _, final_t1, final_t2, final_t3, final_t4 = best_solution_params
        return (final_t1, final_t2, final_t3, final_t4, 0.0) # Existing solver's th5 is 0

    def _fk_to_J5_origin_and_R04(self, th1, th2, th3, th4):
        # Calculates position of J5_origin (Link 5 origin) and R_0_4 (world to J4 frame rotation)
        p_J1_w = np.array([0.,0.,0.])
        R_0_1 = rot_z_matrix(th1)
        p_J2_w = p_J1_w + R_0_1 @ self.d_J1_to_J2
        
        R_0_2 = R_0_1 @ rot_y_matrix(th2)
        p_J3_w = p_J2_w + R_0_2 @ self.d_J2_to_J3
        
        R_0_3 = R_0_2 @ rot_y_matrix(th3)
        p_J4_w = p_J3_w + R_0_3 @ self.d_J3_to_J4
        
        R_0_4 = R_0_3 @ rot_y_matrix(th4)
        p_J5_origin_w = p_J4_w + R_0_4 @ self.d_J4_to_J5
        return p_J5_origin_w, R_0_4

    def inverse_kinematics(self, p_tcp_target_tuple: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
        p_tcp_desired_np = np.array(p_tcp_target_tuple, dtype=float)
        
        th5 = 0.0 # Initial guess for theta5
        # Initial guess for th1-th4: call existing_IK with P_TCP_desired as target for P_V
        # This implicitly assumes R04=I and th5=0 for the offset term in P_V_target calculation for this first call.
        th1, th2, th3, th4, _ = self.existing_inverse_kinematics(p_tcp_target_tuple)

        N_ITERATIONS = 15

        for _ in range(N_ITERATIONS):
            # 3.a. Calculate current P_J5_origin and R_0_4 from current th1-th4
            p_J5_origin_curr, R_0_4_curr = self._fk_to_J5_origin_and_R04(th1, th2, th3, th4)
            
            # 3.b. Calculate X_L4_calc = R_Z(th5) @ [0, A_const, 0]^T (vector from P_V to P_TCP in L4 frame)
            #    P_V_target = P_TCP_desired - R_0_4_curr @ X_L4_calc
            s5 = math.sin(th5); c5 = math.cos(th5)
            X_L4_calc = np.array([-self.A_const * s5, self.A_const * c5, 0.0])
            
            # 3.c. Set P_V_target for existing_IK
            p_V_target_np = p_tcp_desired_np - (R_0_4_curr @ X_L4_calc)
            
            # 3.d. Call existing_IK to get new th1-th4
            th1, th2, th3, th4, _ = self.existing_inverse_kinematics(tuple(p_V_target_np.tolist()))
            
            # 3.e. Recalculate P_J5_origin and R_0_4 with new th1-th4
            p_J5_origin_new, R_0_4_new = self._fk_to_J5_origin_and_R04(th1, th2, th3, th4)
            
            # 3.f. Vector from new P_J5_origin to P_TCP_desired, in J4's frame
            LHS_J4_frame = R_0_4_new.T @ (p_tcp_desired_np - p_J5_origin_new)
            
            # 3.g. We expect LHS_J4_frame = R_Z(th5_new) @ V_J5_TCP_pre_th5
            #      V_J5_TCP_pre_th5 = [0, A_const, B_const]^T
            #      R_Z(th5_new) @ V_J5_TCP_pre_th5 = [-A_const*s5_new, A_const*c5_new, B_const]^T
            # 3.h. Update th5
            # LHS_J4_frame[0] = -A_const * sin(th5_new)
            # LHS_J4_frame[1] =  A_const * cos(th5_new)
            # (LHS_J4_frame[2] should be B_const, can be used as a check)
            if self.A_const == 0: # Avoid division by zero if A_const is zero
                 th5 = 0.0 # Or handle appropriately, e.g. if B_const is also 0, th5 is indeterminate
            else:
                 s5_component_num = -LHS_J4_frame[0] 
                 c5_component_num =  LHS_J4_frame[1]
                 th5 = math.atan2(s5_component_num, c5_component_num)


        th6_final = 0.0 # Given by problem spec / feedback

        return (normalize_angle(th1),
                normalize_angle(th2),
                normalize_angle(th3),
                normalize_angle(th4),
                normalize_angle(th5),
                normalize_angle(th6_final))

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    solver = KinematicsSolver()
    return solver.inverse_kinematics(p)

```