The problem requires a closed-form analytical solution for the inverse kinematics of a 6-DOF manipulator to reach a target TCP position. Joint `q6` is specified to be 0. This leaves 5 joints (`q1` to `q5`) to control 3D position, resulting in 2 degrees of redundancy. To find a unique analytical solution, we must make choices for two of these joints or parameters.

We will adopt the following strategy:
1.  Set `q6 = 0` (given).
2.  Set `q4 = 0` (choice for one degree of redundancy).
3.  Strategically choose `q5` to ensure the solvability of `q1`.
4.  Solve for `q1`, `q2`, and `q3` based on these choices.

**Nomenclature & Parameters:**
*   Link offsets (from URDF details):
    *   `d1 = 0.13585` (J1 to J2: Y-offset in J1's frame after `q1`)
    *   `a2 = -0.1197` (J2 to J3: Y-offset in J2's frame after `q2`)
    *   `d2_z = 0.425` (J2 to J3: Z-offset in J2's frame after `q2`)
    *   `d3_z = 0.39225` (J3 to J4: Z-offset in J3's frame after `q3`)
    *   `a4_y = 0.093` (J4 to J5: Y-offset in J4's frame after `q4`)
    *   `d5_z = 0.09465` (J5 to J6: Z-offset in J5's frame after `q5`)
    *   `d_tcp_y = 0.0823` (J6 to TCP: Y-offset in J6's frame after `q6`)
*   Target TCP position: `(px, py, pz)`

**Derivation Steps:**

1.  **Effective TCP vector in J3's frame (`V_eff`):**
    With `q4=0` and `q6=0`, the vector from J3's origin to the TCP, expressed in J3's frame (before `Ry(q3)` rotation), is `V_eff = [V_eff_x, V_eff_y, V_eff_z]^T`.
    *   TCP position relative to J6 origin (J6 frame): `[0, d_tcp_y, 0]^T`.
    *   TCP position relative to J5 origin (J5 frame, after `Rz(q5)`): `P_TCP_in_J5 = Rz(q5)*[0, d_tcp_y, 0]^T + [0,0,d5_z]^T = [-d_tcp_y*sin(q5), d_tcp_y*cos(q5), d5_z]^T`.
    *   Since `q4=0`, `Ry(q4)` is identity. TCP position relative to J4 origin (J4 frame): `P_TCP_in_J4 = [0,a4_y,0]^T + P_TCP_in_J5 = [-d_tcp_y*sin(q5), a4_y + d_tcp_y*cos(q5), d5_z]^T`.
    *   `V_eff` (relative to J3 origin, in J3 frame, before `Ry(q3)`):
        *   `V_eff_x = -d_tcp_y*sin(q5)`
        *   `V_eff_y = a4_y + d_tcp_y*cos(q5)`
        *   `V_eff_z = d3_z + d5_z` (This component is constant as `d3_z` is offset J3 to J4, and `d5_z` is part of the wrist structure carried by J4).

2.  **Solve for `q5` and `q1`:**
    The Y-component of the arm's end (carrying `V_eff`) in J1's frame (before `q1` rotation, but after `d1` translation) is `Y_base = V_eff_y + a2 + d1`.
    `Y_base = (a4_y + d_tcp_y*cos(q5)) + a2 + d1`.
    Let `K_const_Y = a4_y + a2 + d1`. So, `Y_base = d_tcp_y*cos(q5) + K_const_Y`.
    From `px, py`: `py*cos(q1) - px*sin(q1) = Y_base`. If `R_xy = sqrt(px^2 + py^2)`, then `sin(atan2(py,px) - q1) = Y_base / R_xy`.
    Let `asin_arg = Y_base / R_xy`. We need `|asin_arg| <= 1`.
    `K_const_Y = 0.093 - 0.1197 + 0.13585 = 0.10915`.
    `d_tcp_y = 0.0823`.
    The range of `Y_base` (as `cos(q5)` varies from -1 to 1) is `[K_const_Y - d_tcp_y, K_const_Y + d_tcp_y] = [0.02685, 0.19145]`.
    Choose `cos(q5)` to make `q1` solvable:
    *   If `R_xy >= K_const_Y` (i.e., `R_xy >= 0.10915`): Choose `cos(q5) = 0` (`q5 = pi/2`). Then `Y_base = K_const_Y`. `asin_arg = K_const_Y / R_xy`, which is `(0, 1]`.
    *   If `K_const_Y - d_tcp_y <= R_xy < K_const_Y` (i.e., `0.02685 <= R_xy < 0.10915`): Choose `cos(q5) = (R_xy - K_const_Y) / d_tcp_y`. This makes `Y_base = R_xy`, so `asin_arg = 1`. `cos(q5)` will be in `[-1, 0)`.
    *   If `R_xy < K_const_Y - d_tcp_y` (i.e., `R_xy < 0.02685`): Choose `cos(q5) = -1` (`q5 = pi`). `Y_base = K_const_Y - d_tcp_y`. `asin_arg = Y_base / R_xy` will be `> 1` and clamped.
    Once `q5` is found, `sin(q5)` is also determined. `V_eff_x, V_eff_y, V_eff_z` are known.
    `q1 = atan2(py,px) - asin(clamp(Y_base / R_xy, -1.0, 1.0))`.

3.  **Solve for `q2, q3`:**
    The target for the J2-J3 part of the arm, in J1's frame after `q1` rotation and `d1` translation (i.e., in the frame where J2 rotates) is:
    `X_prime = px*cos(q1) + py*sin(q1)`
    `Z_prime = pz`
    The kinematic chain from J2 is `Ry(q2) * TransY(a2) * TransZ(d2_z) * Ry(q3) * V_eff`.
    The components `A = V_eff_x*cos(q3) + V_eff_z*sin(q3)` and `B_partial = -V_eff_x*sin(q3) + V_eff_z*cos(q3)` are results of `Ry(q3)*V_eff`.
    The point after `TransZ(d2_z)` and `TransY(a2)` relative to J2's rotation frame (before `Ry(q2)`) is:
    `P_J2_frame_x = A`
    `P_J2_frame_z = B_partial + d2_z`
    (Note: `a2` is a Y-offset, handled by `Y_base` for `q1`).
    So, `X_prime = P_J2_frame_x*cos(q2) + P_J2_frame_z*sin(q2)`
    `Z_prime = -P_J2_frame_x*sin(q2) + P_J2_frame_z*cos(q2)`
    This implies `X_prime^2 + Z_prime^2 = P_J2_frame_x^2 + P_J2_frame_z^2`.
    `X_prime^2 + Z_prime^2 = (V_eff_x*c3+V_eff_z*s3)^2 + (-V_eff_x*s3+V_eff_z*c3 + d2_z)^2`.
    Let `R_XZ_sq = X_prime^2 + Z_prime^2`.
    `R_XZ_sq = V_eff_x^2 + V_eff_z^2 + d2_z^2 + 2*d2_z*(V_eff_z*cos(q3) - V_eff_x*sin(q3))`.
    Let `K0 = V_eff_x^2 + V_eff_z^2 + d2_z^2`. `Kc = 2*d2_z*V_eff_z`. `Ks = -2*d2_z*V_eff_x`.
    `R_XZ_sq - K0 = Kc*cos(q3) + Ks*sin(q3)`.
    Solve for `q3`: `q3 = atan2(Ks, Kc) - acos(clamp((R_XZ_sq - K0) / sqrt(Ks^2+Kc^2), -1.0, 1.0))` (choosing one solution branch).
    Once `q3` is known, `P_J2_frame_x` and `P_J2_frame_z` are known.
    `q2 = atan2(P_J2_frame_z*X_prime - P_J2_frame_x*Z_prime, P_J2_frame_x*X_prime + P_J2_frame_z*Z_prime)`.

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    px, py, pz = p

    # Link parameters
    d1 = 0.13585
    a2 = -0.1197
    d2_z = 0.425
    d3_z = 0.39225
    a4_y = 0.093
    d5_z = 0.09465
    d_tcp_y = 0.0823

    # Clamp helper
    def clamp(value, min_val, max_val):
        return max(min_val, min(value, max_val))

    # Step 1: Fixed joints
    q4 = 0.0
    q6 = 0.0

    # Step 2: Determine q5 (and cos_q5, sin_q5)
    R_xy = math.sqrt(px**2 + py**2)
    K_const_Y = a4_y + a2 + d1  # Approx 0.10915
    
    cos_q5 = 0.0
    # Y_base must be in [K_const_Y - d_tcp_y, K_const_Y + d_tcp_y] = [0.02685, 0.19145]
    
    if R_xy >= K_const_Y: # Case 1: R_xy is relatively large
        cos_q5 = 0.0 # q5 = pi/2
    elif R_xy >= (K_const_Y - d_tcp_y) and abs(d_tcp_y) > 1e-9 : # Case 2: R_xy is intermediate
        cos_q5 = (R_xy - K_const_Y) / d_tcp_y
    else: # Case 3: R_xy is small (or d_tcp_y is zero and R_xy < K_const_Y)
        cos_q5 = -1.0 # q5 = pi
                  
    cos_q5 = clamp(cos_q5, -1.0, 1.0)
    q5 = math.acos(cos_q5)
    sin_q5 = math.sin(q5)

    # Effective TCP vector components in J3's frame (before Ry(q3))
    V_eff_x = -d_tcp_y * sin_q5
    V_eff_y_component = a4_y + d_tcp_y * cos_q5 # V_eff_y in the derivation
    V_eff_z = d3_z + d5_z # This is constant

    # Step 3: Solve for q1
    Y_base_for_q1 = V_eff_y_component + a2 + d1
    
    asin_arg_q1 = 0.0
    if R_xy > 1e-9: 
        asin_arg_q1 = Y_base_for_q1 / R_xy
    elif abs(Y_base_for_q1) < 1e-9: 
        asin_arg_q1 = 0.0
    # else: R_xy is zero, Y_base_for_q1 is not. asin_arg_q1 remains 0.0, will be clamped.
    
    q1 = math.atan2(py, px) - math.asin(clamp(asin_arg_q1, -1.0, 1.0))

    # Step 4: Calculate X_prime and Z_prime for q2,q3 subproblem
    cos_q1 = math.cos(q1)
    sin_q1 = math.sin(q1)
    X_prime = px * cos_q1 + py * sin_q1
    Z_prime = pz

    # Step 5: Solve for q3
    R_XZ_sq = X_prime**2 + Z_prime**2
    K0_q3 = V_eff_x**2 + V_eff_z**2 + d2_z**2
    Kc_q3 = 2 * d2_z * V_eff_z
    Ks_q3 = -2 * d2_z * V_eff_x
    
    D_val_q3 = R_XZ_sq - K0_q3
    den_sqrt_q3_sq = Ks_q3**2 + Kc_q3**2

    if den_sqrt_q3_sq < 1e-12: 
        if abs(D_val_q3) < 1e-9: 
            q3 = 0.0
        else: 
            q3 = 0.0 
    else:
        den_sqrt_q3 = math.sqrt(den_sqrt_q3_sq)
        acos_arg_q3 = clamp(D_val_q3 / den_sqrt_q3, -1.0, 1.0)
        phi_angle_q3 = math.acos(acos_arg_q3)
        atan_term_q3 = math.atan2(Ks_q3, Kc_q3)
        q3 = atan_term_q3 - phi_angle_q3 

    # Step 6: Solve for q2
    sin_q3 = math.sin(q3)
    cos_q3 = math.cos(q3)
    
    P_J2_frame_x = V_eff_x * cos_q3 + V_eff_z * sin_q3
    P_J2_frame_z = -V_eff_x * sin_q3 + V_eff_z * cos_q3 + d2_z
    
    # Denominator for atan2: P_J2_frame_x^2 + P_J2_frame_z^2, which should be R_XZ_sq
    if R_XZ_sq < 1e-9 : 
        q2 = 0.0 
    else:
        q2_num_atan = P_J2_frame_z * X_prime - P_J2_frame_x * Z_prime
        q2_den_atan = P_J2_frame_x * X_prime + P_J2_frame_z * Z_prime
        q2 = math.atan2(q2_num_atan, q2_den_atan)

    return (q1, q2, q3, q4, q5, q6)

```