To solve the inverse kinematics for the 3-DOF manipulator, we need to determine the joint angles \(\theta_1\), \(\theta_2\), and \(\theta_3\) that position the TCP at the desired target position \(p = (x, y, z)\). Here's the step-by-step approach:

### Step 1: Analyze the Kinematic Chain
The manipulator consists of three revolute joints:
1. **Revolute 1**: Rotates about the Z-axis.
2. **Revolute 2**: Rotates about the Y-axis.
3. **Revolute 3**: Rotates about the Y-axis.

The TCP is offset from the last joint by a fixed distance along the Z-axis.

### Step 2: Decompose the Problem
We can solve the inverse kinematics in stages:
1. Solve for \(\theta_1\) using the projection of the target position onto the X-Y plane.
2. Solve for \(\theta_2\) and \(\theta_3\) using the projection of the target position onto the X-Z plane.

### Step 3: Use Existing Solutions
The provided existing solutions already solve sub-problems for individual joints or sub-chains. We can combine these solutions to compute the full inverse kinematics.

### Step 4: Write the Code
Here is the complete implementation:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the links to for reaching position "p".
    """
    x, y, z = p

    # Solve for theta1 (rotation about Z-axis)
    theta1 = math.atan2(-x, y)

    # Adjust the target position to account for the offset of Revolute 2
    y_adjusted = y - 0.13585

    # Solve for theta2 and theta3 (rotations about Y-axis)
    L1 = 0.425  # Length of link 2
    L2 = 0.39225  # Length of link 3
    d = math.sqrt(x**2 + z**2)  # Distance in the X-Z plane
    cos_theta3 = (d**2 - L1**2 - L2**2) / (2 * L1 * L2)
    theta3 = math.acos(cos_theta3)

    # Determine the sign of theta3 based on the cross product
    cross_product = x * (L1 + L2 * math.cos(theta3)) - z * (L2 * math.sin(theta3))
    if cross_product < 0:
        theta3 = -theta3

    alpha = math.atan2(x, z)
    beta = math.atan2(L2 * math.sin(theta3), L1 + L2 * math.cos(theta3))
    theta2 = alpha - beta

    return (theta1, theta2, theta3)
```

### Explanation of the Code
1. **Theta1**: The angle \(\theta_1\) is computed using the arctangent of the X and Y coordinates of the target position.
2. **Theta2 and Theta3**: These angles are computed using the law of cosines and trigonometric relationships in the X-Z plane. The cross product is used to determine the correct sign of \(\theta_3\).

This implementation combines the provided solutions and extends them to compute the full inverse kinematics for the 3-DOF manipulator.