To solve the inverse kinematics for the full 3-DOF manipulator, we need to extend the provided solution for the first two joints to include the third joint. Here's the step-by-step plan:

1. **Decompose the Problem**:
   - The provided solution computes the angles for the first two joints (`theta1` and `theta2`) to position the end of the second link (just before the third joint) at a desired point.
   - The third joint (`theta3`) will then be used to align the TCP (Tool Center Point) with the target position.

2. **Compute the Third Joint**:
   - The third joint contributes to the final position of the TCP along the z-axis. The TCP is offset by `0.39225` along the z-axis from the end of the third link.
   - Using the target position `p` and the computed positions from the first two joints, we can solve for `theta3`.

3. **Update the Function**:
   - Extend the function to compute `theta3` after calculating `theta1` and `theta2`.

Now, I will complete the Python function to include the computation for `theta3`.
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the links to for reaching position "p".
    """
    # Target position
    x_d, y_d, z_d = p

    # Step 1: Solve for theta1 and theta2 using the provided solution
    cos_theta2 = (z_d - 0.39225) / 0.425  # Adjust for the TCP offset
    theta2 = math.acos(cos_theta2)
    A = 0.425 * math.sin(theta2)
    B = 0.01615
    denominator = A ** 2 + B ** 2
    C = (A * x_d + B * y_d) / denominator
    S = (-B * x_d + A * y_d) / denominator
    theta1 = math.atan2(S, C)

    # Step 2: Solve for theta3
    # The z-component of the TCP is affected by theta3
    z_reach = 0.425 * math.cos(theta2) + 0.39225  # Total z-reach from theta2 and TCP offset
    theta3 = math.atan2(z_d - z_reach, 0)  # Align the TCP along the z-axis

    return (theta1, theta2, theta3)
``` 

### Explanation:
1. **Theta1 and Theta2**:
   - These are computed using the provided solution, with an adjustment to account for the TCP offset along the z-axis (`0.39225`).

2. **Theta3**:
   - The third joint angle is calculated to align the TCP with the target position along the z-axis. This is done by considering the z-reach of the manipulator and the target z-coordinate.

This function should now compute the joint angles for all three joints to position the TCP at the desired target position `p`.