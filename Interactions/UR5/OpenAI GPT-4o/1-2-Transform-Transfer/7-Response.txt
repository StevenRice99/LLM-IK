It seems the forward kinematics results are consistent and provide the same output. Let us now proceed to complete the inverse kinematics function to solve for both position and orientation.

### Analysis
The given manipulator has two revolute joints, both rotating about the Y-axis. The task is to compute the joint angles \( \theta_1 \) and \( \theta_2 \) such that the end-effector reaches the desired position \( p \) and orientation \( r \).

### Steps to Solve
1. **Position Analysis**:
   - Use the provided solution for position-only inverse kinematics to compute \( \theta_1 \) and \( \theta_2 \) based on the target position \( p \).

2. **Orientation Analysis**:
   - Since the orientation of all links and the TCP is [0, 0, 0], the manipulator does not introduce any additional rotation. Thus, the orientation \( r \) does not affect the joint angles in this specific case.

3. **Combine Results**:
   - Return the computed joint angles \( \theta_1 \) and \( \theta_2 \).

Here is the completed Python function:

```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A tuple of the values to set the links to for reaching position "p" and orientation "r".
    """
    # Extract target position
    x_target, y_target, z_target = p
    
    # Link lengths
    d1 = 0.425
    d2 = 0.39225
    
    # Compute the distance to the target in the XZ plane
    r = math.sqrt(x_target ** 2 + z_target ** 2)
    
    # Compute theta2 using the law of cosines
    cos_theta2 = (r ** 2 - d1 ** 2 - d2 ** 2) / (2 * d1 * d2)
    sin_theta2 = math.sqrt(1 - cos_theta2 ** 2)
    theta2 = math.atan2(sin_theta2, cos_theta2)
    
    # Compute theta1
    phi = math.atan2(x_target, z_target)
    beta = math.atan2(d2 * sin_theta2, d1 + d2 * cos_theta2)
    theta1 = phi - beta
    
    # Return the joint angles
    return (theta1, theta2)
```

### Explanation
- The function first calculates the joint angles \( \theta_1 \) and \( \theta_2 \) based on the target position \( p \) using the provided position-only solution.
- Since the orientation \( r \) is [0, 0, 0] for all links, it does not influence the joint angles in this case.
- The function returns the computed joint angles as a tuple.

This solution assumes that the target position is always reachable, as stated in the instructions.