To solve the inverse kinematics for the 3-DOF manipulator, we need to determine the joint angles (θ1, θ2, θ3) that position the TCP at the desired target position \( p = (x, y, z) \). Here's the step-by-step breakdown:

1. **Joint 1 (θ1):**  
   Joint 1 rotates about the Y-axis. Its angle can be determined by projecting the target position \( p \) onto the XZ-plane and calculating the angle between the projection and the Z-axis.

2. **Joint 2 (θ2):**  
   Joint 2 also rotates about the Y-axis. Its angle can be determined by considering the position of the TCP relative to the second link's position and orientation.

3. **Joint 3 (θ3):**  
   Joint 3 rotates about the Y-axis and contributes to the final position of the TCP. Its angle can be determined by considering the position of the TCP relative to the third link's position and orientation.

I will now proceed to implement the solution for the inverse kinematics method.
```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    # Target position
    x, y, z = p

    # Step 1: Solve for θ1 (Joint 1)
    # Joint 1 rotates about the Y-axis, so we calculate the angle in the XZ-plane
    theta1 = -math.atan2(-x, z)

    # Step 2: Solve for θ2 (Joint 2)
    # Adjust the target position to account for the first link's offset
    d1 = 0.425  # Length of the first link along Z
    d2 = 0.1197  # Offset along Y
    z2 = z - d1  # Adjusted Z position
    y2 = y - d2  # Adjusted Y position
    theta2 = -math.atan2(-y2, z2)

    # Step 3: Solve for θ3 (Joint 3)
    # Adjust the target position to account for the second link's offset
    d3 = 0.39225  # Length of the second link along Z
    z3 = z2 - d3  # Adjusted Z position
    theta3 = math.atan2(x, z3)

    return theta1, theta2, theta3
``` 

This function calculates the joint angles \( \theta_1 \), \( \theta_2 \), and \( \theta_3 \) required to position the TCP at the target position \( p = (x, y, z) \). The calculations account for the link offsets and orientations as specified in the problem details.