To solve the inverse kinematics for the 3-DOF manipulator, we need to determine the joint angles (θ1, θ2, θ3) that position the TCP at the desired target position \( p = (x, y, z) \). Here's the step-by-step breakdown:

1. **Understand the structure**:
   - Revolute 1 rotates about the Y-axis.
   - Revolute 2 rotates about the Y-axis.
   - Revolute 3 rotates about the Z-axis.
   - The TCP is offset from the last joint by a fixed distance along the Z-axis.

2. **Break the problem into subproblems**:
   - First, calculate θ3 (rotation about the Z-axis) to align the TCP in the X-Z plane.
   - Then, calculate θ2 (rotation about the Y-axis) to position the TCP vertically.
   - Finally, calculate θ1 (rotation about the Y-axis) to align the TCP horizontally.

3. **Use the provided forward kinematics**:
   - The forward kinematics confirms the structure and offsets of the manipulator.

4. **Write the inverse kinematics function**:
   - Use trigonometric relationships to compute the joint angles.

Here is the completed Python function:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p

    # Constants based on the manipulator's structure
    d1 = 0.39225  # Distance from base to Revolute 2 along Z-axis
    d2 = 0.093    # Distance from Revolute 2 to Revolute 3 along Z-axis
    d3 = 0.09465  # Distance from Revolute 3 to TCP along Z-axis

    # Step 1: Calculate θ3 (rotation about Z-axis)
    z_prime = z - d1 - d3  # Adjusted Z position after accounting for offsets
    θ3 = math.atan2(x, z_prime)

    # Step 2: Calculate θ2 (rotation about Y-axis)
    r = math.sqrt(x**2 + z_prime**2)  # Distance in the X-Z plane
    θ2 = math.atan2(r, y) - math.atan2(d2, d3)

    # Step 3: Calculate θ1 (rotation about Y-axis)
    θ1 = math.atan2(y, z_prime)

    return (θ1, θ2, θ3)
```

### Explanation:
- **θ3**: Aligns the TCP in the X-Z plane by considering the projection of the target position onto this plane.
- **θ2**: Adjusts the vertical position of the TCP by considering the manipulator's link lengths and offsets.
- **θ1**: Aligns the TCP horizontally by considering the Y-Z plane.

This function assumes all target positions are reachable and uses trigonometric relationships to compute the joint angles.