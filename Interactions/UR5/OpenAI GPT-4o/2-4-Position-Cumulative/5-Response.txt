To solve the inverse kinematics for the 3-DOF manipulator, I will now complete the Python function step by step.

### Step-by-Step Plan:
1. **Understand the Target Position**: The target position `p` is given as `(x, y, z)`. The goal is to compute the joint angles `theta1`, `theta2`, and `theta3` that position the TCP at `p`.

2. **Break Down the Problem**:
   - Use the provided existing solutions for sub-chains to compute the joint angles incrementally.
   - Start with `theta1` (rotation of Revolute 1), then compute `theta2` (rotation of Revolute 2), and finally compute `theta3` (rotation of Revolute 3).

3. **Use Forward Kinematics**:
   - The forward kinematics results show how the TCP position is affected by the joint angles. This will help in verifying the solution.

4. **Write the Code**:
   - Use trigonometric relationships and the geometry of the manipulator to compute the joint angles.

Here is the completed Python function:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    # Extract target position
    x, y, z = p

    # Step 1: Solve for theta1 (rotation about Y-axis of Revolute 1)
    theta1 = math.atan2(x, z)

    # Step 2: Adjust for the position of Revolute 2
    adjusted_x = x - 0.39225 * math.sin(theta1)
    adjusted_z = z - 0.39225 * math.cos(theta1)

    # Solve for theta2 (rotation about Y-axis of Revolute 2)
    theta_total = math.atan2(adjusted_x, adjusted_z)
    theta2 = theta_total - theta1

    # Step 3: Solve for theta3 (rotation about Z-axis of Revolute 3)
    # Adjust for the position of Revolute 3
    adjusted_y = y - 0.093  # Offset due to Revolute 3
    theta3 = math.atan2(adjusted_y, adjusted_x)

    return (theta1, theta2, theta3)
```

### Explanation:
1. **Theta1**: The first joint angle is computed using the `atan2` function, which gives the angle between the x-axis and the projection of the target position on the xz-plane.

2. **Theta2**: The second joint angle is computed by adjusting the target position to account for the offset introduced by the first joint.

3. **Theta3**: The third joint angle is computed by considering the offset introduced by the second joint and the TCP position.

This function assumes that the target position is reachable and does not include checks for joint limits or singularities, as per the instructions.