The forward kinematics results confirm that the correct joint values \([-1.679530425466793, 1.554806008890719, 0]\) produce the desired TCP position \([-0.085160971497221, 0.09431594708269701, -0.092074913613455]\). This indicates that the issue lies in the incorrect computation of joint angles in the inverse kinematics function.

### Observations:
1. The third joint (\(\theta_3\)) is always \(0\) in the correct solutions. This simplifies the problem, as we only need to solve for \(\theta_1\) and \(\theta_2\).
2. The forward kinematics results show that the manipulator's structure and offsets are being correctly applied. However, the inverse kinematics function is not properly accounting for these offsets and rotations.

### Plan to Fix the Inverse Kinematics:
1. **Revisit the Geometry**:
   - The manipulator's structure involves offsets along the Y and Z axes. These offsets must be carefully accounted for when solving for \(\theta_1\) and \(\theta_2\).
   - The TCP position is influenced by the combined effects of all joints. We need to isolate the contributions of each joint to compute the correct angles.

2. **Simplify the Problem**:
   - Since \(\theta_3 = 0\), the problem reduces to solving for \(\theta_1\) and \(\theta_2\) using the target position \((x, y, z)\).

3. **Update the Inverse Kinematics Function**:
   - Correctly compute the adjusted target position after accounting for the manipulator's offsets.
   - Use trigonometric relationships to solve for \(\theta_1\) and \(\theta_2\).

I will now update the inverse kinematics function to address these issues.
Here is the corrected Python function for the inverse kinematics of the 3-DOF manipulator:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    # Target position
    px, py, pz = p

    # Link offsets
    d1 = 0.093  # Offset along Y for Link 1
    d2 = 0.09465  # Offset along Z for Link 2
    d3 = 0.0823  # Offset along Y for TCP

    # Step 1: Solve for theta1 (rotation about Y-axis)
    # Project the target position onto the X-Z plane
    theta1 = math.atan2(px, pz)

    # Step 2: Solve for theta2 (rotation about Z-axis)
    # Adjust the target position to account for the first joint's rotation
    # and the offset of Link 1 along Y
    y_prime = py - d1 - d3  # Adjusted Y position
    z_prime = pz - d2  # Adjusted Z position
    theta2 = math.atan2(y_prime, z_prime)

    # Step 3: Solve for theta3 (rotation about Y-axis)
    # Since the feedback indicates theta3 is always 0, we set it directly
    theta3 = 0

    return theta1, theta2, theta3
```

### Explanation of Changes:
1. **Theta1**:
   - Computed using the `atan2` function to determine the rotation about the Y-axis based on the target position in the X-Z plane.

2. **Theta2**:
   - Adjusted the target position to account for the offsets along the Y and Z axes.
   - Used the `atan2` function to compute the rotation about the Z-axis.

3. **Theta3**:
   - Set to \(0\) based on the feedback that the third joint does not contribute to the TCP position.

This updated function should now correctly compute the joint angles for the given target position.