To solve the inverse kinematics for the given 2-DOF manipulator, we need to determine the joint angles (θ1 and θ2) that position the TCP (Tool Center Point) at the target position `p = (x, y, z)`.

### Step-by-step Analysis:
1. **Link Configuration**:
   - Revolute 1 rotates about the Z-axis.
   - Revolute 2 rotates about the Y-axis.
   - The TCP is offset from the second joint by `[0, 0.0823, 0]` in the local frame.

2. **Target Position**:
   - The target position `p` is given in the global frame. We need to compute the joint angles that align the manipulator to this position.

3. **Forward Kinematics**:
   - The forward kinematics of the manipulator can be expressed as:
     \[
     x_{TCP} = L_2 \sin(\theta_2) \cos(\theta_1)
     \]
     \[
     y_{TCP} = L_2 \sin(\theta_2) \sin(\theta_1)
     \]
     \[
     z_{TCP} = L_1 + L_2 \cos(\theta_2)
     \]
     where:
     - \(L_1 = 0.09465\) (distance along Z-axis from base to joint 2),
     - \(L_2 = 0.0823\) (distance from joint 2 to TCP along Y-axis in local frame).

4. **Inverse Kinematics**:
   - From the forward kinematics equations, we can solve for:
     - \(\theta_1 = \text{atan2}(y, x)\),
     - \(\theta_2\) using the projection of the TCP position onto the manipulator's plane.

### Implementation:
We will now implement the inverse kinematics function to compute the joint angles.

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the links to for reaching position "p".
    """
    x, y, z = p
    
    # Link lengths
    L1 = 0.09465  # Distance along Z-axis from base to joint 2
    L2 = 0.0823   # Distance from joint 2 to TCP along Y-axis in local frame
    
    # Solve for θ1
    theta1 = math.atan2(y, x)
    
    # Solve for θ2
    # Project the TCP position onto the manipulator's plane
    r = math.sqrt(x**2 + y**2)  # Radial distance in the XY-plane
    d = z - L1                 # Distance along Z-axis from joint 2 to TCP
    theta2 = math.atan2(d, r) - math.atan2(L2, math.sqrt(r**2 + d**2 - L2**2))
    
    return theta1, theta2
```

This function computes the joint angles \(\theta_1\) and \(\theta_2\) required to position the TCP at the target position `p`.