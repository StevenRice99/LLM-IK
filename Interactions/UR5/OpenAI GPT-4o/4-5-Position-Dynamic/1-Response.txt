To solve the inverse kinematics for the given 2 degrees-of-freedom (DOF) manipulator, we need to determine the joint angles (θ1 and θ2) that position the TCP (Tool Center Point) at the target position \( p = (x, y, z) \). Here's the step-by-step breakdown:

### Step 1: Understand the manipulator structure
- **Revolute 1 (Joint 1)**: Rotates about the Z-axis.
- **Revolute 2 (Joint 2)**: Rotates about the Y-axis.
- **TCP**: Offset from Joint 2 by a fixed position of [0, 0.0823, 0] in the local frame.

### Step 2: Forward kinematics
The forward kinematics of the manipulator can be expressed as:
1. Joint 1 rotates about the Z-axis, affecting the \( x \) and \( y \) coordinates.
2. Joint 2 rotates about the Y-axis, affecting the \( z \) coordinate and the projection of the TCP in the \( x \)-\( y \) plane.

The TCP position in the world frame can be derived as:
\[
\begin{aligned}
x_{TCP} &= d \cdot \cos(\theta_1) \cdot \cos(\theta_2), \\
y_{TCP} &= d \cdot \sin(\theta_1) \cdot \cos(\theta_2), \\
z_{TCP} &= d \cdot \sin(\theta_2),
\end{aligned}
\]
where \( d = 0.0823 \) (distance from Joint 2 to the TCP).

### Step 3: Inverse kinematics
To solve for \( \theta_1 \) and \( \theta_2 \):
1. **Solve for \( \theta_1 \):**
   From the \( x \) and \( y \) coordinates:
   \[
   \theta_1 = \arctan2(y, x).
   \]

2. **Solve for \( \theta_2 \):**
   Using the \( z \)-coordinate and the projection of the TCP in the \( x \)-\( y \) plane:
   \[
   r = \sqrt{x^2 + y^2}, \quad \theta_2 = \arctan2(z, r).
   \]

### Step 4: Implement the solution
Here is the Python implementation:

```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the links to for reaching position "p".
    """
    x, y, z = p
    
    # Solve for theta1
    theta1 = math.atan2(y, x)
    
    # Solve for theta2
    r = math.sqrt(x**2 + y**2)
    theta2 = math.atan2(z, r)
    
    return theta1, theta2
```

This function calculates the joint angles \( \theta_1 \) and \( \theta_2 \) required to position the TCP at the target position \( p \).