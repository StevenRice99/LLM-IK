def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [roll, pitch, yaw].
    :return: A tuple containing the two joint values [joint1, joint2] in radians.
    """
    # ----------------------------------------------------------------
    # Explanation of this simple solution:
    #
    # This 2-DOF serial arm rotates first about the Z-axis (joint 1),
    # then about the Y-axis (joint 2).  In standard roll-pitch-yaw (RPY)
    # convention, a rotation about x is "roll," about y is "pitch," and
    # about z is "yaw," giving the overall transform Rz(yaw)*Ry(pitch)*Rx(roll).
    #
    # Because the manipulator has only these two rotations (Z then Y),
    # it can only achieve roll = 0 (no rotation about x).  Under the
    # assumption “all targets given are reachable,” we conclude that
    # the caller will only request orientations consistent with:
    #
    #   roll   = r[0] = 0
    #   pitch  = r[1]
    #   yaw    = r[2]
    #
    # Therefore the two joint angles map directly to:
    #
    #   joint1 = yaw  = r[2]
    #   joint2 = pitch= r[1]
    #
    # and the provided position p will already be consistent with
    # these angles (so no additional solve is required).  We simply
    # return them.
    # ----------------------------------------------------------------

    # Joint 1 (rotation about Z) = yaw component:
    joint1 = r[2]

    # Joint 2 (rotation about Y) = pitch component:
    joint2 = r[1]

    return (joint1, joint2)