```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Closed-form inverse kinematics for a 2-DOF serial manipulator with:
      • Joint 1: revolute about Z axis, at the origin.
      • Offset to Joint 2: [0, 0.13585, 0].
      • Joint 2: revolute about Y axis.
      • Final offset (TCP) from Joint 2: [0, -0.1197, 0.425].
    
    The final end-effector orientation is Rz(joint1)*Ry(joint2). Because only
    two rotations (Z then Y) exist, the feasible orientations satisfy
    roll=0, pitch=joint2, yaw=joint1.  This function solves for both
    joint angles (joint1, joint2) so that the manipulator's final position
    matches the target p = [x, y, z].  The orientation tuple r is assumed
    to be consistent with that solution (i.e., r[0] = 0, r[1] = joint2,
    r[2] = joint1).  No reachability checks are needed.
    
    :param p: The desired TCP position in world coordinates, (x, y, z).
    :param r: The desired TCP orientation as (roll, pitch, yaw), all in radians.
              Only r[1], r[2] (pitch, yaw) can be matched by this 2-DOF arm.
    :return: (joint1, joint2) in radians.
    """
    # Unpack target position
    px, py, pz = p

    # ------------------------------------------------------------------
    # Forward Kinematics Recap (final position p_f):
    #
    # p_f = Rz(j1)*[0, 0.13585, 0]^T  +  Rz(j1)*Ry(j2)*[0, -0.1197, 0.425]^T
    #
    # Expanding geometry yields:
    #   X = -0.01615 sin(j1) + 0.425 sin(j2) cos(j1)
    #   Y =  0.01615 cos(j1) + 0.425 sin(j2) sin(j1)
    #   Z =  0.425 cos(j2)
    #
    # where 0.01615 = (0.13585 + (-0.1197)).
    #
    # We thus solve:
    #
    #   1) Z = 0.425 cos(j2)            =>  j2 = arccos(pz / 0.425)
    #   2) Then let M = 0.425 sin(j2), N = 0.01615.
    #      px = -N sin(j1) + M cos(j1)
    #      py =  N cos(j1) + M sin(j1)
    #
    #      => we rearrange for sin(j1) and cos(j1).
    # ------------------------------------------------------------------

    # 1) Solve for joint2 from the Z-coordinate
    c2 = pz / 0.425
    # Clamp numeric imprecision if |c2|>1
    if c2 > 1.0:
        c2 = 1.0
    elif c2 < -1.0:
        c2 = -1.0
    j2 = math.acos(c2)  # principal value in [0, pi]

    # 2) Solve for joint1 from X, Y
    s2 = math.sin(j2)
    M = 0.425 * s2
    N = 0.01615
    denom = M*M + N*N

    # cos(j1) = (M*px + N*py) / (M^2 + N^2)
    # sin(j1) = (M*py - N*px) / (M^2 + N^2)
    cos_j1 = (M*px + N*py) / denom
    sin_j1 = (M*py - N*px) / denom
    j1 = math.atan2(sin_j1, cos_j1)

    return (j1, j2)
```