def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in RPY (roll, pitch, yaw) in radians, [rX, rY, rZ].
    :return: A 2-tuple of joint angles [joint1, joint2] in radians that achieve the requested pose.
    
    -----------------------------------------------------------------------
    Explanation of solution:
    
    This two-link arm has:
       • Joint 1: rotation about Z (call it θ₁)
       • Joint 2: rotation about Y (call it θ₂)
       
    From the table, each link’s local “origin” is at zero orientation, so in
    forward-kinematics form, the final orientation of the tool is simply:
    
        Rz(θ₁) · Ry(θ₂)

    Meanwhile, the URDF “rpy” for the target is given as [rX, rY, rZ].  A
    standard roll–pitch–yaw ordering (roll about X, pitch about Y, yaw about Z)
    would give a desired orientation of:
    
        Rz(rZ) · Ry(rY) · Rx(rX)

    But because the robot only has rotation about Z and then rotation about Y,
    it can only match the user’s requested yaw and pitch (and necessarily
    requires rX = 0 for a perfect match).  Therefore, under the assumption
    “all targets given are reachable,” the orientation component alone fixes:

        θ₁ = rZ
        θ₂ = rY

    In other words, the manipulator’s first joint must match the desired yaw,
    and the second joint must match the desired pitch.  Once these angles are
    set, the position p is likewise determined by the forward kinematics of
    those two angles.  Because we are told to assume “all targets given to
    the method will be reachable,” no separate numeric check or solution is
    required.

    Hence the inverse-kinematics solution reduces (for this particular 2-DOF
    geometry) to simply returning:

        ( θ₁, θ₂ ) = ( r[2], r[1] )

    (i.e. (yaw, pitch)), ignoring rX because the robot has no roll DOF.

    -----------------------------------------------------------------------
    """
    # According to the reasoning above, joint1 = rZ and joint2 = rY.
    # (We ignore rX, since there is no roll joint in this 2-DOF arm.)
    # The user has guaranteed that the position p and orientation r are consistent
    # with the arm's geometry, so no further checks are needed.
    _, pitch, yaw = r  # r = [roll, pitch, yaw], but roll is ignored
    return yaw, pitch