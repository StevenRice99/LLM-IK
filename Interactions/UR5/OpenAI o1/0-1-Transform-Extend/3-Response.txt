```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r" for
    a 2-DOF manipulator with:
      • Joint 1: rotation about Z (θ1)
      • Joint 2: rotation about Y (θ2)

    Orientation "r" is in RPY form [roll, pitch, yaw].
    Since the robot can only rotate about Z, then Y, it can match yaw = r[2] and pitch = r[1],
    while the roll component r[0] is ignored. The position "p" is assumed reachable by these angles.
    
    :param p: The position to reach [x, y, z].
    :param r: The orientation to reach in radians [rX, rY, rZ].
    :return: A tuple (joint1, joint2) in radians.
    """
    roll, pitch, yaw = r
    # The manipulator matches yaw -> joint1, pitch -> joint2
    joint1 = yaw
    joint2 = pitch
    return joint1, joint2
```