```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Closed‐form inverse kinematics for a 2‐DOF serial arm whose first joint
    rotates about the Z‐axis and second about the Y‐axis. The link geometry is:

        Joint 1 (about Z) at the base, no offset.
        Then a translation of +0.13585 along Y before Joint 2 (about Y).
        Finally, from Joint 2 to the TCP there is a translation of
            [0, -0.1197, 0.425] in that link’s local coordinates.

    Because there are only two revolute axes (Z then Y), the end‐effector orientation
    is R = Rz(q1)*Ry(q2). In the URDF “rpy” convention (roll‐pitch‐yaw =
    [rx, ry, rz]), the arm can only achieve rx = 0, with q2 = ry and q1 = rz.
    However, for most simple 2‐DOF cases (and matching the table’s TCP
    “Orientation = [0, 0, 0]”), one typically solves just for position p = (px, py, pz)
    ignoring any roll component. The code below performs exactly that by matching
    the final TCP position. It assumes that any given (p, r) will indeed be
    consistent/reachable by this 2‐joint geometry.

    The forward kinematic position of the TCP can be approximated by:
       TCP_x =  0.425 sin(q2) cos(q1)  −  0.01615 sin(q1)
       TCP_y =  0.425 sin(q2) sin(q1)  +  0.01615 cos(q1)
       TCP_z =  0.425 cos(q2)

    where 0.01615 = (0.13585 − 0.1197). From these, we solve “closed‐form” 
    for q1 and q2 given the desired position p = (px, py, pz). The orientation 
    input r is not directly used in the numeric solve, since there are only 
    two revolute joints. By convention, this solution picks the principal 
    value of arccos for q2 and resolves q1 via atan2.

    :param p: Desired TCP position [x, y, z].
    :param r: Desired TCP orientation [rx, ry, rz] (unused numerically here).
    :return: (q1, q2) in radians.
    """

    import math

    px, py, pz = p

    # Length from joint 2 to TCP
    L = 0.425

    # Derive q2 using z-coordinate:
    # pz = L * cos(q2) => q2 = acos(pz / L)
    q2 = math.acos(pz / L)

    # Define sin(q2) for use in planar equations
    sin_q2 = math.sin(q2)

    # Derived constant offset in the manipulator's XY-plane
    B = 0.13585 - 0.1197  # 0.01615
    A = L * sin_q2        # 0.425 * sin(q2)

    # Solve for q1 in terms of px and py using:
    #   px = A cos(q1) - B sin(q1)
    #   py = A sin(q1) + B cos(q1)
    # Combine them to get sin(q1) and cos(q1):
    denom = px**2 + py**2
    if abs(denom) < 1e-12:
        # If px and py are both near zero, the orientation about Z is arbitrary.
        # Choose q1 = 0.0 for a consistent solution
        q1 = 0.0
    else:
        sin_q1 = (A * py - B * px) / denom
        cos_q1 = (A * px + B * py) / denom
        q1 = math.atan2(sin_q1, cos_q1)

    return (q1, q2)
```