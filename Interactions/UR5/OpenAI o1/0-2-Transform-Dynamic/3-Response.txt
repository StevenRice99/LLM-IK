def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A tuple (joint1, joint2, joint3), in radians, that achieves the target pose.
    """

    import math
    import numpy as np

    # Unpack desired position and orientation
    x, y, z = p
    rx, ry, rz = r

    # -----------------
    # 1) Solve Joint 1
    # -----------------
    #
    # Use the first sub-solution approach: revolve around Z so that the rest
    # of the chain can work in its plane. Existing code 1 gives:
    #
    #     theta = math.atan2(-x, y)
    #
    # which aligns the manipulator so that "x" aligns with its local axes after rotation.
    # We'll call this angle q1.
    #
    q1 = math.atan2(-x, y)

    # --------------------------------------------------------
    # 2) Transform target p, r into the frame after joint 1
    # --------------------------------------------------------
    #
    # After rotating by q1 around Z at the base, the second joint sees
    # the target through a local frame. We also need to account for the
    # translation from the first to the second joint ([0, 0.13585, 0] in world).
    # We'll rotate "p - that_offset" by +q1 about Z in world, or equivalently
    # multiply by Rz(q1). (Because from the second joint's viewpoint, it is
    # at the new origin, facing +X in that local plane.)
    #
    # We'll build Rz(q1) and apply it.

    # Translation from joint 1 to joint 2 in world coordinates:
    T1 = np.array([0.0, 0.13585, 0.0])

    # Define rotation about Z by +q1:
    Rz_plus_q1 = np.array([
        [ math.cos(q1), -math.sin(q1), 0],
        [ math.sin(q1),  math.cos(q1), 0],
        [           0,             0, 1]
    ])

    # Position in second-joint frame:
    p_12 = Rz_plus_q1.dot(np.array([x, y, z]) - T1)

    # We must also transform the orientation for the sub-chain. We'll form
    # the rotation matrix from (rx, ry, rz) in the order Rz(rz)*Ry(ry)*Rx(rx).
    # Then we post-multiply by the transform from joint 1 (Rz^-1 or Rz^T).
    # However, the approach in existing code 2 effectively only uses the
    # net pitch from the local viewpoint, so we will do the same extraction:

    def matrix_rxyz(rx_, ry_, rz_):
        """Return Rz(rz_)*Ry(ry_)*Rx(rx_), matching existing_2's usage."""
        cx, sx = math.cos(rx_), math.sin(rx_)
        cy, sy = math.cos(ry_), math.sin(ry_)
        cz, sz = math.cos(rz_), math.sin(rz_)
        # Build in the same order the existing code uses:
        # R = Rz(rz)*Ry(ry)*Rx(rx)
        Rz_mat = np.array([[ cz, -sz,  0],
                           [ sz,  cz,  0],
                           [  0,   0,  1]])
        Ry_mat = np.array([[ cy,  0, sy],
                           [  0,  1,  0],
                           [-sy,  0, cy]])
        Rx_mat = np.array([[ 1,  0,   0 ],
                           [ 0, cx, -sx ],
                           [ 0, sx,  cx ]])
        return Rz_mat.dot(Ry_mat).dot(Rx_mat)

    R_full = matrix_rxyz(rx, ry, rz)

    # Joint 1 rotates about Z by q1, so from the perspective after joint 1,
    # the orientation is effectively Rz^(-q1)*R_full (i.e. we undo the joint-1 rotation):
    Rz_minus_q1 = np.array([
        [ math.cos(-q1), -math.sin(-q1), 0],
        [ math.sin(-q1),  math.cos(-q1), 0],
        [            0,             0,   1]
    ])
    R_after_j1 = Rz_minus_q1.dot(R_full)

    # existing_2 effectively extracts:
    #     R00 = cos(ry_local)*cos(rz_local)
    #     R02 = sin(ry_local)
    #     theta_sum = atan2(R02, R00) -> that local pitch
    #
    # So let's extract the local pitch angle from R_after_j1:
    R00 = R_after_j1[0, 0]
    R02 = R_after_j1[0, 2]
    # This is effectively the sum of angles about Y that the second+third joints must achieve:
    local_pitch_sum = math.atan2(R02, R00)

    # We'll give existing_2 a purely "roll=0, pitch=local_pitch_sum, yaw=0"
    # so that it replicates the geometry it was written for:
    r_12 = (0.0, local_pitch_sum, 0.0)

    # -----------------
    # 3) Solve Joint 2 & 3
    # -----------------
    #
    # Now feed p_12 and r_12 into Existing code 2, which returns a pair (joint2, joint3).
    # We can just inline the logic from existing_2 or call it directly. Below,
    # I'll just reuse it in-line to keep everything self-contained:

    x_target, y_target, z_target = p_12
    rx_local, ry_local, rz_local = r_12

    # From existing_2:
    cx = math.cos(rx_local)
    sx = math.sin(rx_local)
    cy = math.cos(ry_local)
    sy = math.sin(ry_local)
    cz = math.cos(rz_local)
    sz = math.sin(rz_local)

    R00 = cy * cz
    R02 = sy
    theta_sum = math.atan2(R02, R00)

    a = 0.425     # length from joint2 to joint3
    b = 0.39225   # length from joint3 to TCP

    d_sq = x_target**2 + z_target**2
    d = math.sqrt(d_sq)

    # Solve planar two-link
    cos_theta2 = (d_sq - a**2 - b**2) / (2 * a * b)
    # Clamp numerical rounding if needed:
    if cos_theta2 > 1.0:
        cos_theta2 = 1.0
    elif cos_theta2 < -1.0:
        cos_theta2 = -1.0

    theta2_1 = math.acos(cos_theta2)
    theta2_2 = -theta2_1

    solutions = []
    for t2 in [theta2_1, theta2_2]:
        t1 = theta_sum - t2
        # We check forward:
        x_calc = a * math.sin(t1) + b * math.sin(theta_sum)
        z_calc = a * math.cos(t1) + b * math.cos(theta_sum)
        if (math.isclose(x_calc, x_target, abs_tol=1e-5) and
            math.isclose(z_calc, z_target, abs_tol=1e-5)):
            solutions.append((t1, t2))

    if solutions:
        # Pick a valid solution from the gathered ones:
        for (cand_q2, cand_q3) in solutions:
            if -6.2831853 <= cand_q3 <= 6.2831853:
                q2, q3 = cand_q2, cand_q3
                break
        else:
            q2, q3 = solutions[0]
    else:
        # If no direct solution matched closely, pick a fallback
        term_x = x_target - b * math.sin(theta_sum)
        term_z = z_target - b * math.cos(theta_sum)
        q2 = math.atan2(term_x, term_z)
        q3 = theta_sum - q2

    # Return final angles
    return (q1, q2, q3)