```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [roll, pitch, yaw].
    :return: A tuple of (θ1, θ2, θ3) in radians.
    """

    import math

    # Unpack inputs
    x, y, z = p
    # roll, pitch, yaw
    roll, pitch, yaw = r

    # For this 3-DOF manipulator (axes Z, Y, Y):
    #  - Joint 1 provides yaw around Z.
    #  - Joints 2 and 3 together provide pitch around Y, i.e., pitch = θ2 + θ3.
    #
    # From the target orientation, directly set:
    theta1 = yaw  # Joint 1 handles yaw rotation.

    # Define some link lengths (in the manipulator's local frames)
    # Offsets from the URDF (positions):
    #  1) Joint 2 is at [0, 0.13585, 0] after Joint 1 rotates.
    #  2) Joint 3 is at [0, -0.1197, 0.425] in joint 2's local frame.
    #  3) The TCP is an additional offset [0, 0, 0.39225] in joint 3's local frame.
    # We reduce this to an effective 2-link planar problem around Y by:
    #  1) Rotating the target position by -theta1 about Z to find coordinates
    #     in the frame after joint 1.
    #  2) Subtracting the offset for joint 2 in that frame.
    #  3) Solving the 2R sub-problem in X-Z plane for joints 2 and 3,
    #     given pitch = θ2 + θ3 = r[1].

    # Step 1: Compute position in the frame after joint 1.
    # The offset to joint 2 is [0, 0.13585, 0] in the base. After rotating by θ1:
    #   - We can shift by -[0, 0.13585, 0] in that rotated frame
    #   - Then rotate by Rz(-θ1)
    #
    # Direct formula for the new coordinates p2:
    p2_x = (x * math.cos(theta1) + y * math.sin(theta1)) - 0.13585
    p2_y = -x * math.sin(theta1) + y * math.cos(theta1)
    p2_z = z

    # Now we want the 2R planar subproblem in the X-Z plane.
    # The net pitch is pitch = θ2 + θ3.
    # From the URDF, the relevant segment lengths along the local X-Z plane can be taken as:
    L2 = 0.425      # portion for joint 2
    L3 = 0.39225    # portion for joint 3

    # The manipulator in that plane has:
    #   px = L2*sin(θ2) + L3*sin(θ2 + θ3) = L2*sin(θ2) + L3*sin(pitch)
    #   pz = L2*cos(θ2) + L3*cos(θ2 + θ3) = L2*cos(θ2) + L3*cos(pitch)
    # We want px = p2_x, pz = p2_z. Solve for θ2, then θ3 = pitch - θ2.

    rhs_sin = (p2_x - L3 * math.sin(pitch)) / L2
    rhs_cos = (p2_z - L3 * math.cos(pitch)) / L2

    theta2 = math.atan2(rhs_sin, rhs_cos)
    theta3 = pitch - theta2

    return theta1, theta2, theta3
```