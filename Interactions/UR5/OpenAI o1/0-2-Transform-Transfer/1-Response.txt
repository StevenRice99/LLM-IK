def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".

    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [roll, pitch, yaw].
              For this 3-DOF arm (Z–Y–Y), only pitch (r[1]) and yaw (r[2]) are usable.
              The roll (r[0]) should be zero for a reachable orientation.
    :return: (theta1, theta2, theta3) in radians.
    """
    # -------------------------------------------------------------------------
    # Because the robot has only 3 revolute joints, with axes:
    #   - Joint 1 about Z
    #   - Joint 2 about Y
    #   - Joint 3 about Y
    #
    # The final orientation (neglecting roll) is:
    #     Rz(theta1) * Ry(theta2) * Ry(theta3)  =  Rz(rz) * Ry(ry)
    #
    # which implies:
    #     theta1       = rz
    #     theta2 + theta3 = ry
    #
    # We also have the link structure (from the table in DETAILS):
    #
    #   Base → (joint1 about Z) → offset: [0, 0, 0]
    #   → (joint2 about Y) → offset: [0, 0.13585, 0]
    #   → (joint3 about Y) → offset: [0, -0.1197, 0.425]
    #   → TCP offset: [0, 0, 0.39225]
    #
    # We will:
    #   1) Fix theta1 = r[2].
    #   2) Impose theta2 + theta3 = r[1].
    #   3) Solve the position p in closed-form for theta2 (and hence theta3) by
    #      "removing" the known rotation about Z from p, subtracting offset 0.13585 in Y,
    #      then matching the 2R chain in the rotated frame.
    #
    # The code below uses Sympy for a closed-form symbolic solve.  No reachability
    # checks are performed, as instructed.

    import sympy
    from sympy import symbols, sin, cos

    x, y, z = p
    rx, ry, rz = r  # roll = rx, pitch = ry, yaw = rz
    # We assume rx ≈ 0 for a valid (reachable) orientation on this 3-DOF arm.

    # 1) Set theta1 = yaw
    theta1 = rz

    # 2) Rotate the requested position p by -theta1 about Z
    #    so that, in this "local" frame, the first joint is effectively zero.
    #    Rz(-theta1) * [x, y, z]:
    #      x' =  x*cos(-theta1) + y*sin(-theta1) =  x*cos(theta1) +  y*sin(theta1)
    #      y' = -x*sin(-theta1) + y*cos(-theta1) = -x*sin(theta1) +  y*cos(theta1)
    #      z' =  z
    x_prime = x * cos(theta1) + y * sin(theta1)
    y_prime = -x * sin(theta1) + y * cos(theta1)
    z_prime = z

    # 3) Subtract the offset for link2 (0, 0.13585, 0) in this rotated frame
    #    so everything after "joint2" must match (x_prime, y_prime - 0.13585, z_prime).
    y_prime -= 0.13585

    # 4) The chain from joint2 to TCP (ignoring the first joint's rotation):
    #       p(expr) = Ry(theta2)*[0, -0.1197, 0.425] + Ry(theta2)*Ry(theta3)*[0, 0, 0.39225]
    #
    #    But we have:  theta3 = ry - theta2
    #
    #    We will solve:
    #       p(expr) = [x_prime, y_prime, z_prime]
    #
    #    in terms of theta2, then define theta3 = ry - theta2.

    theta2_sym = symbols('theta2', real=True)
    theta3_sym = ry - theta2_sym  # Enforce (theta2 + theta3) = ry

    # Offsets in local coordinates
    b = sympy.Matrix([0, -0.1197,  0.425])
    c = sympy.Matrix([0,  0,       0.39225])

    def Ry(angle):
        return sympy.Matrix([
            [ cos(angle), 0, sin(angle)],
            [ 0,          1, 0         ],
            [-sin(angle), 0, cos(angle)]
        ])

    # Forward kinematics from joint2 in the local frame:
    p_expr = Ry(theta2_sym)*b + Ry(theta2_sym)*Ry(theta3_sym)*c

    # We want p_expr == (x_prime, y_prime, z_prime).
    eqs = [
        sympy.Eq(p_expr[0], x_prime),
        sympy.Eq(p_expr[1], y_prime),
        sympy.Eq(p_expr[2], z_prime)
    ]

    # Solve for theta2_sym:
    sol = sympy.solve(eqs, [theta2_sym], dict=True)

    if not sol:
        # Per instructions, no need to handle "unreachable" cases,
        # so we won't raise an error. But in practice, you'd handle it here.
        return (theta1, 0.0, ry)  # Dummy fallback or error

    # In general there may be multiple solutions; pick the one that works best
    # for your context (e.g. principal value). We'll select the first symbolic solution.
    theta2_val = sol[0][theta2_sym]

    # Sympy can return symbolic expressions or floats. Convert to float if needed.
    theta2_val = float(theta2_val)

    # Then define theta3
    theta3_val = ry - theta2_val

    # Return the three joint angles (in range [-2π, 2π] as indicated in the table)
    # Simplify them via modulo if desired.  The problem statement
    # only says to return the values in radians within the allowed range.
    return (theta1, theta2_val, theta3_val)