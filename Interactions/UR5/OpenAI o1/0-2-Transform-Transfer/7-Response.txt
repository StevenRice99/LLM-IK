```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Analytical 3-DOF inverse kinematics for a serial chain with joints:
      1) Revolute about Z
      2) Revolute about Y
      3) Revolute about Y
    and link offsets (in parent link frames):
      Joint1: position [0, 0, 0],    orientation [0, 0, 0]
      Joint2: position [0, 0.13585, 0], orientation [0, 0, 0]
      Joint3: position [0, -0.1197, 0.425], orientation [0, 0, 0]
      TCP:    position [0, 0, 0.39225],    orientation [0, 0, 0]

    The robot is intended to match a URDF with RPY orientation order (roll, pitch, yaw).
    However, this manipulator can only realize net rotations about Z and Y (Z–Y–Y).
    URDF RPY means a final rotation of Rx(roll)*Ry(pitch)*Rz(yaw).

    We’ll do the following:
      1) Compute the desired rotation matrix Rd = Rx(roll)*Ry(pitch)*Rz(yaw).
      2) Factor Rd into Rz(theta1)*Ry(alpha), ignoring any roll about X
         by allowing a ±π shift in the Z-axis if needed. We'll pick a solution
         that places theta1 within ±π (or ±2π if desired).
         That yields alpha = (theta2 + theta3).
      3) Solve the position constraints for (theta2, theta3) given alpha,
         using the known 2R geometry in the local frame (after removing joint1’s
         rotation and the link2 offset). Pick a solution that matches alpha
         (within ±2π) and is consistent with the sign of sin(alpha).
      4) Return the set (theta1, theta2, theta3).

    :param p: The target TCP position (x, y, z).
    :param r: The target orientation in radians (roll, pitch, yaw), per URDF RPY.
    :return: (theta1, theta2, theta3) in radians (each within ±2π).
    """

    # -------------- Utility Routines --------------
    def Rx(a: float):
        ca, sa = math.cos(a), math.sin(a)
        return [
            [1,    0,     0 ],
            [0,  ca,   -sa ],
            [0,  sa,    ca ]
        ]
    def Ry(a: float):
        ca, sa = math.cos(a), math.sin(a)
        return [
            [ ca, 0,  sa ],
            [  0, 1,   0 ],
            [-sa, 0,  ca ]
        ]
    def Rz(a: float):
        ca, sa = math.cos(a), math.sin(a)
        return [
            [ ca, -sa, 0 ],
            [ sa,  ca, 0 ],
            [  0,   0, 1 ]
        ]

    def matmul3(A, B):
        """3×3 matrix multiplication."""
        return [[sum(A[i][k]*B[k][j] for k in range(3)) for j in range(3)] for i in range(3)]

    # Convert roll-pitch-yaw (URDF convention) to a rotation matrix
    def rpy_to_matrix(roll, pitch, yaw):
        return matmul3(matmul3(Rx(roll), Ry(pitch)), Rz(yaw))

    # Extract (thetaZ, alpha) such that Rz(thetaZ)*Ry(alpha) ~ Rd
    # We'll pick principal solutions in [-π, π] for alpha and thetaZ.
    def factor_rz_ry(Rd):
        # From the product Rz(θZ)*Ry(α):
        #   R = [[ cosθZ cosα,  -sinθZ,  cosθZ sinα ],
        #        [ sinθZ cosα,   cosθZ,  sinθZ sinα ],
        #        [ -sinα,        0,      cosα     ]]
        #
        # Compare with Rd. Then:
        #   cosα  = Rd[2][2]
        #   sinαX = Rd[0][2] = cosθZ sinα
        #   sinαY = Rd[1][2] = sinθZ sinα
        #   => sinα = sqrt( sinαX^2 + sinαY^2 )
        #   => θZ   = atan2( sinαY, sinαX )
        #
        # We'll attempt both ± alpha if needed (cosα is the same for α or -α).

        cos_alpha  = Rd[2][2]
        # Clamp for numerical safety
        if cos_alpha > 1.0:  cos_alpha = 1.0
        if cos_alpha < -1.0: cos_alpha = -1.0

        # Potential alpha solutions: alphaA = +arccos(cos_alpha), alphaB = -arccos(cos_alpha)
        alphaA = math.acos(cos_alpha)
        alphaB = -alphaA

        # We'll define a helper to get (thetaZ, alpha) from one alphaPick
        def get_tz_alpha(alphaPick):
            saX = Rd[0][2]   # = cosθZ * sinα
            saY = Rd[1][2]   # = sinθZ * sinα
            sin_alpha = math.sin(alphaPick)

            # If sinα ~ 0, that implies alpha ~ 0 or π => degenerate
            if abs(sin_alpha) < 1e-9:
                # Force a consistent θZ = ...
                # If alpha=0 => Rz(θZ)*Ry(0) => R = [[cosθZ, -sinθZ, 0],[sinθZ, cosθZ, 0],[0,0,1]]
                # Compare that to Rd => we can define θZ from top-left elements
                # for simplicity: θZ = atan2(Rd[1][0], Rd[0][0])
                tz = math.atan2(Rd[1][0], Rd[0][0])
                return (tz, alphaPick)
            else:
                # Then cosθZ = saX/sinα, sinθZ = saY/sinα
                cos_z = saX / sin_alpha
                sin_z = saY / sin_alpha
                # clamp
                if cos_z > 1.0:  cos_z = 1.0
                if cos_z < -1.0: cos_z = -1.0
                if sin_z > 1.0:  sin_z = 1.0
                if sin_z < -1.0: sin_z = -1.0
                tz = math.atan2(sin_z, cos_z)
                return (tz, alphaPick)

        # We'll gather both solutions
        solA = get_tz_alpha(alphaA)
        solB = get_tz_alpha(alphaB)

        # Return them (some might be duplicates if alphaA=alphaB=π, e.g.)
        # We'll keep them in canonical range too.
        def wrap_to_pi(a):
            """Wrap angle to [-π, π] for consistency."""
            return (a + math.pi) % (2*math.pi) - math.pi
        
        candidates = []
        for (tz, aa) in [solA, solB]:
            tz_wrap = wrap_to_pi(tz)
            aa_wrap = wrap_to_pi(aa)
            # store (θZ, α)
            if (tz_wrap, aa_wrap) not in candidates:
                candidates.append((tz_wrap, aa_wrap))
        return candidates


    # ----- Step 1: Build desired rotation matrix Rd from (roll,pitch,yaw) -----
    roll, pitch, yaw = r
    Rd = rpy_to_matrix(roll, pitch, yaw)

    # ----- Step 2: Factor out Rz(theta1)*Ry(alpha) ≈ Rd, collecting candidates.
    # The manipulator can only produce net rotation about Z then Y.
    # We'll try all factor candidates from factor_rz_ry(Rd).
    # If none is workable with the position, we fail (but problem states all are reachable).
    candidates_orientation = factor_rz_ry(Rd)

    # ----- Step 3: For each orientation candidate, see if we can solve position. -----
    # Position steps:
    #   Let (theta1, alpha) = (θ1, θ2+θ3).
    #   In world frame, p must match the forward kinematics:
    #       P(θ1, θ2, θ3) = Rz(θ1) * [some function of (θ2, θ3)].
    #   We'll define a local 2R chain for (θ2, θ3) so that θ2+θ3 = alpha.
    #   Then rotate that local chain by Rz(θ1) to match (x, y, z).
    #
    # The link structure in detail can be seen as:
    #   T1(θ1): rotate about Z
    #   + offset for link2: (0, 0.13585, 0)
    #   T2(θ2): rotate about Y
    #   + offset for link3: (0, -0.1197, 0.425)
    #   T3(θ3): rotate about Y
    #   + offset for TCP:  (0, 0, 0.39225)
    #
    # We'll do the same trick we used in simpler approaches: "unrotate" by -θ1 in XY,
    # subtract link2's offset in Y, then solve the 2R chain with alpha=θ2+θ3.
    #
    # We'll pick the first valid solution that satisfies alpha. If multiple, we choose one.

    x, y, z = p

    # A small helper to wrap an angle near alpha
    def angle_near(val, target):
        # Because we only want (val - target) mod 2π ~ 0
        # We'll see if they're close within some small tolerance
        diff = ((val - target) + math.pi*10) % (2*math.pi) - math.pi
        return abs(diff) < 1e-5

    # We'll define a method to attempt position solve for a given (theta1, alpha).
    def solve_position_for(theta1, alpha):
        """
        Returns (theta2, theta3) or None if no solution.
        We want theta2+theta3 = alpha.
        We'll follow a direct geometry approach.
        """
        # 1) Unrotate p by -theta1 in XY plane:
        cos1, sin1 = math.cos(theta1), math.sin(theta1)
        x_loc =  x*cos1 + y*sin1
        y_loc = -x*sin1 + y*cos1
        z_loc =  z

        # 2) Subtract offset for link2 in local Y (0.13585)
        y_loc -= 0.13585

        # 3) Now from that local frame, the chain is: 
        #     Ry(theta2) about Y, offset [0, -0.1197, 0.425],
        #     then Ry(theta3) about Y, offset [0, 0, 0.39225].
        #   But note that Ry(theta2)*Ry(theta3) = Ry(alpha). 
        #
        #   We can handle it as a "2R" manipulator in the plane x'-z' with link lengths:
        #     L1 = sqrt((-0.1197)^2 + 0.425^2) in some direction if we revolve about Y,
        #     L2 = 0.39225,
        #   This gets tricky with the Y offset -0.1197, etc. It's simpler to do a known
        #   forward kinematic approach and forcibly solve for theta2, theta3 so that
        #   theta2+theta3 = alpha. We'll do a direct approach used in the original code
        #   but adapt for alpha. The original "position-only" code is a form of 2R chain
        #   ignoring orientation. We'll do that but ensure the final angle matches alpha.
        #
        #   We'll adapt the existing simplest approach:
        #   We know from the original position solver that:
        #       θ3 = ±acos(...),
        #       then we pick sign or we define alpha = θ2 + θ3 => θ3 = alpha - θ2.
        #   We'll do the latter: define θ3 = alpha - θ2, then do the same geometry steps
        #   to match (x_loc, y_loc, z_loc). 
        #
        #   We'll replicate the geometry from the provided "EXISTING" code, but incorporate alpha.
        k = 0.01615  # sqrt(0.13585^2 + small rounding?), was used in "EXISTING"
        k_sq = k**2
        # We glean from the existing code that the final end is at:
        #   sqrt(x^2 + y^2 + z^2) plus offsets. We'll just re-derive quickly:

        # The original code used:
        # numerator_cosθ3 = x^2 + y^2 + z^2 - 0.334746
        # cosθ3 = numerator_cosθ3 / 0.3334125
        # etc...
        #
        # But that code didn't incorporate orientation alpha. We'll do a direct approach:
        # We'll define a subfunction forward_2R(theta2, theta3) that returns (Xf, Yf, Zf) in local frame:
        def forward_2R(t2, t3):
            # forward from link2 pivot (which is local origin now):
            # Step1: rotate offsetB=[0, -0.1197, 0.425] by Ry(t2)
            cb2, sb2 = math.cos(t2), math.sin(t2)
            Bx = 0.425*sb2
            By = -0.1197
            Bz = 0.425*cb2
            # After rotation about Y(t2), the actual 'x,z' shift from B would incorporate -0.1197 as well,
            # but -0.1197 is purely in local Y, unaffected by Ry about Y in the local frame's definition.
            # Actually, rotating [0, -0.1197, 0.425] about Y changes the x,z but not y if it's truly local Y.
            # So let's do it carefully:
            #   [ x ]   [  cos(t2)  0  sin(t2)] [ 0      ]
            #   [ y ] = [    0      1    0    ] [ -0.1197]
            #   [ z ]   [ -sin(t2)  0  cos(t2)] [ 0.425  ]
            #
            # => x = 0*cos(t2) +0*sin(t2)=0.425*sin(t2)? yes
            #    y = -0.1197
            #    z = 0.425*cos(t2)? yes, that matches the simpler approach above. Good.
            
            # Step2: add the next offset c=[0,0,0.39225], but rotated by Ry(t2)*Ry(t3). 
            #   or equivalently, Ry(t2 + t3) because same axis Y. 
            c_len = 0.39225
            # total angle about Y so far = t2 + t3
            t23 = t2 + t3
            Bx += c_len * math.sin(t23)
            Bz += c_len * math.cos(t23)
            return (Bx, By, Bz)

        # We want forward_2R(theta2, alpha - theta2) = (x_loc, y_loc, z_loc).
        # => Let t2 = variable, t3 = alpha - t2. Then solve x_loc=Bx, y_loc=By, z_loc=Bz.
        # The y_loc must match the "By" from forward_2R. That gives us an immediate clue:
        #   By = -0.1197  (no dependence on t2?), so we check if y_loc ~ -0.1197 within some tolerance.
        # The user-provided test cases show big differences in Y, meaning the manipulator "flips" in other ways
        # (like rotating the first joint by ±π). But let's do the direct match anyway. 
        # We'll just check if |y_loc + 0.1197| < smallTol. If not, it won't match. 
        # In the correct solutions, the large deflections of joint1 can cause sign flips in x_loc, but not in y_loc,
        # because that offset is always in link2's local Y.
        diffY = abs(y_loc + 0.1197)
        if diffY > 1e-3:
            # This orientation candidate won't match the Y position well, so no solution
            return None

        # So effectively the chain is in the xz-plane for the 2R part. We want:
        #   x_loc = Bx(t2, alpha-t2)
        #   z_loc = Bz(t2, alpha-t2)
        #
        # from the function forward_2R:
        #   Bx = 0.425 sin(t2) + 0.39225 sin(t2 + alpha - t2) = 0.425 sin(t2) + 0.39225 sin(alpha)
        #   Bz = 0.425 cos(t2) + 0.39225 cos(alpha)
        #
        # Notice that t3 = alpha - t2 only appears inside sin(t2 + t3)=sin(alpha) => constant!
        # so the x-loc depends only on t2 for the first term, plus sin(alpha) for the second.
        # The z-loc depends on cos(t2) plus cos(alpha). So we can solve:
        #
        #   x_loc - 0.39225 sin(alpha) = 0.425 sin(t2)
        #   z_loc - 0.39225 cos(alpha) = 0.425 cos(t2)
        #
        # => let Xp = x_loc - 0.39225 sin(alpha)
        #    let Zp = z_loc - 0.39225 cos(alpha)
        # => sin(t2) = Xp/0.425
        #    cos(t2) = Zp/0.425
        # => t2 = atan2(Xp, Zp) but be consistent with the signs and radius
        Xp = x_loc - 0.39225*math.sin(alpha)
        Zp = z_loc - 0.39225*math.cos(alpha)
        # check radius
        r2 = Xp*Xp + Zp*Zp
        if r2 < 1e-10:
            # degenerate
            t2_sol = math.atan2(0.0, 0.0)  # 0
        else:
            t2_sol = math.atan2(Xp, Zp)  # note the 'unusual' order, but we want sin/cos => x/z
        # We'll define a quick clamp
        def wrap_pm_pi(a):
            return (a + math.pi)%(2*math.pi) - math.pi
        t2_sol = wrap_pm_pi(t2_sol)

        # Then t3_sol = alpha - t2_sol
        t3_sol = wrap_pm_pi(alpha - t2_sol)

        # Return them
        return (t2_sol, t3_sol)

    # We'll gather all possible (theta1, theta2, theta3) from each orientation factor
    # and pick the first that seems consistent (the problem states all targets are reachable).
    all_solutions = []
    for (cand_t1, cand_alpha) in candidates_orientation:
        maybe = solve_position_for(cand_t1, cand_alpha)
        if maybe is not None:
            (sol_t2, sol_t3) = maybe
            # We have a plausible solution
            # Wrap them to [-π, π] or [-2π, 2π] as needed
            def wrap_2pi(a):
                # The table's limit is ±6.2831853, so we can keep them in ±π for neatness.
                return (a + math.pi) % (2*math.pi) - math.pi
            j1 = wrap_2pi(cand_t1)
            j2 = wrap_2pi(sol_t2)
            j3 = wrap_2pi(sol_t3)
            all_solutions.append((j1, j2, j3))

            # Because the instructions do not ask for multiple solutions,
            # we can just return the first workable solution.
            return (j1, j2, j3)

    # If we got here, no candidate matched. The problem states all targets are reachable,
    # so in theory we never get here. We'll return something as a fallback:
    return (0.0, 0.0, 0.0)
```