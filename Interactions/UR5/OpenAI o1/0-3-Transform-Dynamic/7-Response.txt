```python
import math
import numpy as np
import sympy as sp

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    This solution uses a direct numeric solve of the full forward kinematics
    (via symbolic expressions) matched against the desired pose.

    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians [roll, pitch, yaw].
    :return: A 4-tuple of joint angles [joint1, joint2, joint3, joint4] in radians.
    """

    # --------------------------------------------------------------------------------
    # 1) Define symbolic variables for the unknown joint angles.
    # --------------------------------------------------------------------------------
    q1, q2, q3, q4 = sp.symbols('q1 q2 q3 q4', real=True)

    # --------------------------------------------------------------------------------
    # 2) Build the forward kinematics for this 4-DOF manipulator in symbolic form.
    #
    #    From the DETAILS:
    #
    #    Joint1 (Z-axis), offset: [0, 0, 0]
    #    Joint2 (Y-axis), offset: [0, 0.13585, 0]
    #    Joint3 (Y-axis), offset: [0, -0.1197, 0.425]
    #    Joint4 (Y-axis), offset: [0, 0, 0.39225]
    #    TCP offset: [0, 0, 0.093]
    #
    #    T0_1    = RotZ(q1)
    #    T1_2    = Trans(0, 0.13585, 0) * RotY(q2)
    #    T2_3    = Trans(0, -0.1197, 0.425) * RotY(q3)
    #    T3_4    = Trans(0, 0, 0.39225) * RotY(q4)
    #    T4_TCP  = Trans(0, 0, 0.093)
    #
    #    T0_TCP = T0_1 * T1_2 * T2_3 * T3_4 * T4_TCP
    # --------------------------------------------------------------------------------
    c1, s1 = sp.cos(q1), sp.sin(q1)
    c2, s2 = sp.cos(q2), sp.sin(q2)
    c3, s3 = sp.cos(q3), sp.sin(q3)
    c4, s4 = sp.cos(q4), sp.sin(q4)

    T0_1 = sp.Matrix([
        [ c1, -s1,  0,  0],
        [ s1,  c1,  0,  0],
        [ 0,   0,   1,  0],
        [ 0,   0,   0,  1]
    ])

    T1_2 = sp.Matrix([
        [  c2,  0,  s2,    0],
        [   0,  1,   0, 0.13585],
        [ -s2,  0,  c2,    0],
        [   0,  0,   0,    1]
    ])

    T2_3 = sp.Matrix([
        [  c3,  0,  s3,     0],
        [   0,  1,   0, -0.1197],
        [ -s3,  0,  c3,   0.425],
        [   0,  0,   0,     1]
    ])

    T3_4 = sp.Matrix([
        [  c4,  0,  s4,      0],
        [   0,  1,   0,      0],
        [ -s4,  0,  c4,  0.39225],
        [   0,  0,   0,      1]
    ])

    T4_TCP = sp.Matrix([
        [1, 0, 0, 0   ],
        [0, 1, 0, 0   ],
        [0, 0, 1, 0.093],
        [0, 0, 0, 1   ]
    ])

    T0_2 = T0_1 * T1_2
    T0_3 = T0_2 * T2_3
    T0_4 = T0_3 * T3_4
    T0_TCP = T0_4 * T4_TCP

    # Position from FK:
    x_fk = T0_TCP[0, 3]
    y_fk = T0_TCP[1, 3]
    z_fk = T0_TCP[2, 3]

    # Rotation from FK:
    R_fk = T0_TCP[0:3, 0:3]

    # --------------------------------------------------------------------------------
    # 3) Build desired rotation matrix from roll, pitch, yaw
    #    (extrinsic rotations X->Y->Z by [roll, pitch, yaw]).
    #    Usually, R_des = Rz(yaw)*Ry(pitch)*Rx(roll).
    # --------------------------------------------------------------------------------
    x, y, z = p
    roll, pitch, yaw = r
    cr, sr = np.cos(roll),  np.sin(roll)
    cp, sp_ = np.cos(pitch), np.sin(pitch)
    cy, sy = np.cos(yaw),   np.sin(yaw)
    R_des_numpy = np.array([
        [cy*cp,                cy*sp_*sr - sy*cr,   cy*sp_*cr + sy*sr],
        [sy*cp,                sy*sp_*sr + cy*cr,   sy*sp_*cr - cy*sr],
        [-sp_,                 cp*sr,               cp*cr           ]
    ], dtype=float)
    R_des = sp.Matrix(R_des_numpy)

    # We'll match the position exactly plus align the end-effector's Z-axis to R_des's Z-axis.
    eqs = [
        x_fk - x,             # match x
        y_fk - y,             # match y
        z_fk - z,             # match z
        R_fk[0, 2] - R_des[0, 2],  # match EE Z-axis in x
        R_fk[1, 2] - R_des[1, 2],  #                  in y
        R_fk[2, 2] - R_des[2, 2],  #                  in z
    ]

    # We'll use a simple iterative numeric approach:
    guess = {q1: 0.0, q2: 0.0, q3: 0.0, q4: 0.0}

    def solve_eq(equation, var, cur_guess):
        return sp.nsolve(equation.subs(cur_guess), var, cur_guess[var])

    eq_1, eq_2, eq_3 = eqs[0], eqs[1], eqs[2]
    orient_eqs = eqs[3], eqs[4], eqs[5]

    # We'll define a sum of squares for the orientation error, then drive its derivative wrt q4 to zero.
    orient_error = orient_eqs[0]**2 + orient_eqs[1]**2 + orient_eqs[2]**2
    d_orient_dq4 = sp.diff(orient_error, q4)

    # Iteratively solve the positional equations for q1, q2, q3, then solve orientation for q4
    for _ in range(4):
        guess[q1] = float(solve_eq(eq_1, q1, guess))
        guess[q2] = float(solve_eq(eq_2, q2, guess))
        guess[q3] = float(solve_eq(eq_3, q3, guess))
        guess[q4] = float(sp.nsolve(d_orient_dq4.subs(guess), q4, guess[q4]))

    # Attempt a small refinement by partially solving a set of eqs:
    eq_refine = [eq_1, eq_2, eq_3, orient_eqs[0]]  # just enough for 4 unknowns
    for eq_i in eq_refine:
        # solve for the last variable in guess (q4) with the partial eq
        guess[q4] = float(sp.nsolve(eq_i.subs(guess), q4, guess[q4]))

    j1_val = float(guess[q1]) % (2*math.pi)
    # shift into [-pi, pi] if desired
    if j1_val > math.pi:
        j1_val -= 2*math.pi
    j2_val = float(guess[q2])
    j3_val = float(guess[q3])
    j4_val = float(guess[q4])

    return (j1_val, j2_val, j3_val, j4_val)
```