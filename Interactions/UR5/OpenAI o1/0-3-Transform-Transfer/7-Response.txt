```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [roll, pitch, yaw].
              The manipulator has only rotation about Z for joint 1, and about Y for
              joints 2, 3, and 4, so effectively it can realize an overall yaw = q1
              and pitch = q2 + q3 + q4. Roll cannot be matched (the robot has no X-axis rotation).
    :return: A tuple of the values (q1, q2, q3, q4) to set the links to for
             reaching position p and orientation r.

    Strategy:
      1) Solve for q3 using cos(q3) from geometry (two possible signs).
      2) For each q3, solve for q2 by arctan2(...) but also consider adding π.
      3) For each (q2, q3), solve for two possible q1 by +/- the 'phi' offset.
      4) For each candidate (q1, q2, q3), compute q4 = pitch - (q2 + q3).
      5) Among all candidates, pick the one whose forward kinematics best matches
         the requested position p and orientation (pitch, yaw), ignoring roll.
    """

    # Robot link parameters from the DETAILS:
    # Joint axes:
    #   q1 about Z
    #   q2 about Y
    #   q3 about Y
    #   q4 about Y
    #
    # Link transforms (local):
    #  Revolute 1: [0, 0, 0], rotate about Z
    #  Revolute 2: [0, 0.13585, 0], rotate about Y
    #  Revolute 3: [0, -0.1197, 0.425], rotate about Y
    #  Revolute 4: [0, 0, 0.39225], rotate about Y
    #  TCP:        [0, 0, 0.093]

    # We'll define a small forward kinematics function to test solutions.

    import math

    def wrap_to_pi(angle):
        """Wrap angle to [-pi, pi]."""
        return (angle + math.pi) % (2.0 * math.pi) - math.pi

    def rot_z(theta):
        """Rotation about Z by theta."""
        c, s = math.cos(theta), math.sin(theta)
        return np.array([
            [ c, -s,  0, 0],
            [ s,  c,  0, 0],
            [ 0,  0,  1, 0],
            [ 0,  0,  0, 1],
        ], dtype=float)

    def rot_y(theta):
        """Rotation about Y by theta."""
        c, s = math.cos(theta), math.sin(theta)
        return np.array([
            [ c,  0,  s, 0],
            [ 0,  1,  0, 0],
            [-s, 0,  c, 0],
            [ 0,  0,  0, 1],
        ], dtype=float)

    def trans(x, y, z):
        """Translation by [x, y, z]."""
        T = np.eye(4, dtype=float)
        T[0, 3] = x
        T[1, 3] = y
        T[2, 3] = z
        return T

    def forward_kinematics(q1, q2, q3, q4):
        """Compute the end-effector pose [x, y, z, roll, pitch, yaw]."""
        # Build the transforms step by step
        # Base -> Joint 1
        T1 = rot_z(q1)
        # Joint 1 -> Joint 2
        T2 = trans(0, 0.13585, 0) @ rot_y(q2)
        # Joint 2 -> Joint 3
        T3 = trans(0, -0.1197, 0.425) @ rot_y(q3)
        # Joint 3 -> Joint 4
        T4 = trans(0, 0, 0.39225) @ rot_y(q4)
        # Joint 4 -> TCP
        Ttcp = trans(0, 0, 0.093)

        # Combine
        T = T1 @ T2 @ T3 @ T4 @ Ttcp

        # Extract position
        px, py, pz = T[0, 3], T[1, 3], T[2, 3]

        # Extract orientation as a rotation matrix R
        R = T[:3, :3]

        # Because the manipulator effectively only uses yaw and pitch,
        # we can find them from R. If the manip can do Y then Z,
        # the net orientation is Rz(q1)*Ry(q2+q3+q4). The roll is always 0 for such a chain.
        # We'll do a standard approach: yaw ~ atan2(R[1,0], R[0,0]),
        # pitch ~ -asin(R[2,0]), but that assumes a specific Euler sequence.
        # However, for this chain we know roll ~ 0. We'll compute yaw, pitch:
        #   yaw = atan2(R[1,0], R[0,0])
        #   pitch = atan2(-R[2,0], sqrt(R[2,1]^2+R[2,2]^2))   (or -asin(R[2,0]) with caution)
        yaw_ = math.atan2(R[1,0], R[0,0])
        # pitch_ in [-pi/2, pi/2] from -asin(R[2,0])
        # but let's keep it consistent with the manip dof:
        #   pitch_ = q2 + q3 + q4
        # We'll do the typical "XYZ" approach:
        # roll_ = atan2(R[2,1], R[2,2]) => expected ~ 0
        # pitch_ = atan2(-R[2,0], sqrt(R[0,0]^2 + R[1,0]^2))
        # yaw_ = atan2(R[1,0], R[0,0])
        # We'll store them for measuring orientation error, ignoring roll in the final match.
        sin_pitch = -R[2,0]
        cos_pitch = math.sqrt(R[0,0]*R[0,0] + R[1,0]*R[1,0])
        pitch_ = math.atan2(sin_pitch, cos_pitch)

        # For completeness, compute roll_ (though it's not used for the match).
        roll_ = math.atan2(R[2,1], R[2,2])

        return px, py, pz, roll_, pitch_, yaw_

    # ----------------------------
    # 1) Parse inputs
    # ----------------------------
    x, y, z = p
    roll_des, pitch_des, yaw_des = r  # We can't achieve arbitrary roll, but that's the input.

    # We'll define an error function to pick the best candidate:
    #   position error = Euclidean distance
    #   orientation error = sum of squared difference in pitch,yaw only
    def solution_error(q1, q2, q3, q4):
        px, py, pz, roll_, pitch_, yaw_ = forward_kinematics(q1, q2, q3, q4)
        pos_err = math.sqrt((px - x)**2 + (py - y)**2 + (pz - z)**2)
        # wrap differences for yaw, pitch
        def angle_diff(a, b):
            return wrap_to_pi(a - b)
        yaw_err = angle_diff(yaw_, yaw_des)
        pitch_err = angle_diff(pitch_, pitch_des)
        # Combine: position error + orientation error
        # Weighted so we don't overshadow position or orientation
        return pos_err + abs(yaw_err) + abs(pitch_err)

    # ----------------------------
    # 2) Solve for q3 from geometry (two solutions: ± arccos).
    #    The existing param: cos_q3 = (x^2 + y^2 + z^2 - 0.346395) / 0.3341625
    # ----------------------------
    numer = x*x + y*y + z*z - 0.346395
    denom = 0.3341625
    cos_q3_val = numer / denom
    cos_q3_val = np.clip(cos_q3_val, -1.0, 1.0)

    # possible q3
    candidates_q3 = [math.acos(cos_q3_val), -math.acos(cos_q3_val)]

    # We'll gather all possible (q1, q2, q3, q4) and pick the best
    best_sol = None
    best_err = 1e9

    # We define offset^2 = 0.10915^2 from the existing approach:
    offset_sq = 0.10915**2

    for q3_candidate in candidates_q3:
        c3 = math.cos(q3_candidate)
        s3 = math.sin(q3_candidate)
        A = 0.425 + 0.39225 * c3
        B = 0.39225 * s3

        # S^2 = x^2 + y^2 - offset^2
        S_sq = x*x + y*y - offset_sq
        S_val = math.sqrt(S_sq) if S_sq > 0.0 else 0.0

        # we define q2 from arctan2(...):
        # numerator_q2 = S_val*A - z*B
        # denominator_q2 = S_val*B + z*A
        numerator_q2 = S_val*A - z*B
        denominator_q2 = S_val*B + z*A

        # We'll consider +kπ to get an alternate solution for q2
        base_q2 = math.atan2(numerator_q2, denominator_q2)
        for k2 in [0.0, math.pi]:
            q2_candidate = base_q2 + k2
            # We'll define phi = atan2(0.10915, S_val)
            # q1 = atan2(y, x) ± phi
            # We'll also consider +kπ for q1 base angle if needed
            base_angle = math.atan2(y, x)
            phi = math.atan2(0.10915, S_val) if abs(S_val) > 1e-9 else math.pi/2

            for sign_phi in [1.0, -1.0]:
                for k1 in [0.0, math.pi]:
                    q1_candidate = base_angle + sign_phi * phi + k1
                    q1_candidate = wrap_to_pi(q1_candidate)

                    # Now define q4 = pitch_des - (q2 + q3)
                    q4_candidate = pitch_des - (q2_candidate + q3_candidate)

                    # Evaluate error
                    err = solution_error(
                        wrap_to_pi(q1_candidate),
                        wrap_to_pi(q2_candidate),
                        wrap_to_pi(q3_candidate),
                        wrap_to_pi(q4_candidate)
                    )
                    if err < best_err:
                        best_err = err
                        best_sol = (
                            wrap_to_pi(q1_candidate),
                            wrap_to_pi(q2_candidate),
                            wrap_to_pi(q3_candidate),
                            wrap_to_pi(q4_candidate),
                        )

    if best_sol is None:
        # Fallback to zeros if no solution found (unlikely).
        return (0.0, 0.0, 0.0, 0.0)
    else:
        return best_sol
```