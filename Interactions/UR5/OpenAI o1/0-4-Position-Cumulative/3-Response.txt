```python
def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Gets the 5 joint values needed to reach position p = (x, y, z).
    We use the known closed-form result from a 4-DOF sub-chain,
    and we set the last two joints to zero to remove redundancy.

    :param p: The position to reach in the form (x, y, z).
    :return: A 5-tuple (joint1, joint2, joint3, joint4, joint5), each angle in radians.
    """
    import numpy as np

    x, y, z = p

    # From the existing 4-DOF solution references, numeric constants
    # incorporate the offsets for the chain up to the TCP.
    numerator = x**2 + y**2 + z**2 - 0.346395
    denominator = 0.3341625
    cos_q3 = numerator / denominator
    cos_q3 = np.clip(cos_q3, -1.0, 1.0)
    q3 = np.arccos(cos_q3)

    A = 0.425 + 0.39225 * np.cos(q3)
    B = 0.39225 * np.sin(q3)

    # Distance in XY-plane, subtracting the net offset of 0.10915 in y.
    S_squared = x**2 + y**2 - 0.10915**2
    S = np.sqrt(S_squared) if S_squared >= 0.0 else 0.0

    C = z

    numerator_q2 = S * A - C * B
    denominator_q2 = S * B + C * A
    q2 = np.arctan2(numerator_q2, denominator_q2)

    # Small angle to shift q1 by the net offset in y.
    phi = np.arctan2(0.10915, S) if abs(S) > 1e-9 else np.pi / 2.0

    # Joint 1 about Z.
    q1 = np.arctan2(y, x) - phi

    # We fix joints 4 and 5 to 0 for simplicity/redundancy resolution.
    q4 = 0.0
    q5 = 0.0

    def normalize(angle: float) -> float:
        while angle > np.pi:
            angle -= 2.0 * np.pi
        while angle < -np.pi:
            angle += 2.0 * np.pi
        return angle

    q1 = normalize(q1)
    q2 = normalize(q2)
    q3 = normalize(q3)
    q4 = normalize(q4)
    q5 = normalize(q5)

    return q1, q2, q3, q4, q5
```