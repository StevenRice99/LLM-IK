```python
def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Closed-form analytical IK for the 5-DOF manipulator described in the DETAILS section.

    Joints:
      • Joint 1: Revolute about Z, offset [0, 0, 0].
      • Joint 2: Revolute about Y, offset [0, 0.13585, 0].
      • Joint 3: Revolute about Y, offset [0, -0.1197, 0.425].
      • Joint 4: Revolute about Y, offset [0, 0, 0.39225].
      • Joint 5: Revolute about Z, offset [0, 0.093, 0].
      • TCP offset: [0, 0, 0.09465].

    This code symbolically solves the equations T0->TCP(q1,q2,q3,q4,q5=0) = (x_t,y_t,z_t).
    Because the chain is position-only, and joint5 is about Z (which does not affect position),
    we set q5=0. That leaves four unknowns (q1,q2,q3,q4) with three equations in (x,y,z),
    which is one degree of redundancy. We resolve it by returning all real solutions and 
    picking the one that yields minimal position error relative to p.

    :param p: Target position (x_t, y_t, z_t).
    :return: (q1, q2, q3, q4, q5), each in radians.
    """
    import sympy
    import math

    x_t, y_t, z_t = p

    # Define symbolic variables
    q1, q2, q3, q4 = sympy.symbols('q1 q2 q3 q4', real=True)

    # Rotation about Z
    def Rz(theta):
        return sympy.Matrix([
            [sympy.cos(theta), -sympy.sin(theta), 0, 0],
            [sympy.sin(theta),  sympy.cos(theta), 0, 0],
            [0,                 0,                1, 0],
            [0,                 0,                0, 1]
        ])

    # Rotation about Y
    def Ry(theta):
        return sympy.Matrix([
            [ sympy.cos(theta), 0, sympy.sin(theta), 0],
            [0,                 1, 0,                0],
            [-sympy.sin(theta), 0, sympy.cos(theta), 0],
            [0,                 0, 0,                1]
        ])

    # Translation
    def T(dx, dy, dz):
        return sympy.Matrix([
            [1, 0, 0, dx],
            [0, 1, 0, dy],
            [0, 0, 1, dz],
            [0, 0, 0, 1 ]
        ])

    # Build the full forward kinematics T0->TCP
    # Joint 1 about Z, offset [0, 0, 0]
    T01 = Rz(q1)  # position [0,0,0] is encoded as no translation needed

    # Joint 2 about Y, offset [0, 0.13585, 0]
    T12 = T(0, 0.13585, 0) * Ry(q2)

    # Joint 3 about Y, offset [0, -0.1197, 0.425]
    T23 = T(0, -0.1197, 0.425) * Ry(q3)

    # Joint 4 about Y, offset [0, 0, 0.39225]
    T34 = T(0, 0, 0.39225) * Ry(q4)

    # Joint 5 about Z, offset [0, 0.093, 0], but q5=0 => rotation about Z is identity
    T45 = T(0, 0.093, 0)  # no rotation since q5=0

    # TCP offset
    T5TCP = T(0, 0, 0.09465)

    # Final transform:
    T0TCP_expr = T01 * T12 * T23 * T34 * T45 * T5TCP

    # (px, py, pz) from the symbolic matrix
    px_expr = T0TCP_expr[0, 3]
    py_expr = T0TCP_expr[1, 3]
    pz_expr = T0TCP_expr[2, 3]

    # We have 3 equations and 4 unknowns => 1 DoF of redundancy => multiple solutions
    # We'll solve symbolically and pick the solution that best matches (x_t, y_t, z_t).
    eqs = [
        sympy.Eq(px_expr, x_t),
        sympy.Eq(py_expr, y_t),
        sympy.Eq(pz_expr, z_t)
    ]

    # Solve symbolically (returns a list of dict of solutions)
    # The solver can produce multiple solutions. We'll test each for realness and pick best.
    sols = sympy.solve(eqs, [q1, q2, q3, q4], dict=True)

    # If no symbolic solution found, return something by fallback
    if not sols:
        # Return a fallback. We expect all given p are reachable, but just in case:
        return (0.0, 0.0, 0.0, 0.0, 0.0)

    # We'll define a small forward-kinematics function in numeric form to measure error
    def fk_numeric(a1, a2, a3, a4):
        import math
        # Evaluate T0TCP_expr with numeric angles
        T_num = T01.subs(q1, a1) \
               * T12.subs(q2, a2) \
               * T23.subs(q3, a3) \
               * T34.subs(q4, a4) \
               * T45 \
               * T5TCP
        # Extract numeric values
        pxn = T_num[0, 3].evalf()
        pyn = T_num[1, 3].evalf()
        pzn = T_num[2, 3].evalf()
        return float(pxn), float(pyn), float(pzn)

    # We'll keep track of the best solution by minimal Euclidean error w.r.t. (x_t,y_t,z_t)
    best_solution = None
    best_error = float('inf')

    for sol_dict in sols:
        # Extract numeric solution
        a1_ = sol_dict[q1]
        a2_ = sol_dict[q2]
        a3_ = sol_dict[q3]
        a4_ = sol_dict[q4]

        # Some symbolic solutions might be complex; ensure they're real
        if any(val.has(sympy.I) for val in [a1_, a2_, a3_, a4_]):
            continue

        # Convert to float
        a1_f = float(a1_)
        a2_f = float(a2_)
        a3_f = float(a3_)
        a4_f = float(a4_)

        # Evaluate forward kinematics
        pxn, pyn, pzn = fk_numeric(a1_f, a2_f, a3_f, a4_f)
        err = ((pxn - x_t)**2 + (pyn - y_t)**2 + (pzn - z_t)**2)**0.5

        # Pick best
        if err < best_error:
            best_error = err
            best_solution = (a1_f, a2_f, a3_f, a4_f)

    # If we found no real solutions, return a fallback
    if best_solution is None:
        return (0.0, 0.0, 0.0, 0.0, 0.0)

    a1, a2, a3, a4 = best_solution

    # We fix q5 = 0 based on user’s usage in the feedback
    a5 = 0.0

    # Normalize angles to [-pi, pi], just as a convention
    def normalize(angle: float) -> float:
        while angle > math.pi:
            angle -= 2.0 * math.pi
        while angle < -math.pi:
            angle += 2.0 * math.pi
        return angle

    a1 = normalize(a1)
    a2 = normalize(a2)
    a3 = normalize(a3)
    a4 = normalize(a4)
    a5 = normalize(a5)

    return (a1, a2, a3, a4, a5)
```