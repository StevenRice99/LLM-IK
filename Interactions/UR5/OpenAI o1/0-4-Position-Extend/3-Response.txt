def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" at the TCP.
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the 5 joint values [q1, q2, q3, q4, q5].
    """
    import numpy as np

    # Unpack target
    x, y, z = p

    # The existing 4-DOF solution code solves for the position of link 5. 
    # Our TCP is offset from link 5 by 0.09465 in the local z-direction.
    # Because that direction is unaffected by the rotation of joint 5 (about z),
    # we can simply subtract 0.09465 from the target's z-coordinate for the 4-DOF calculation.
    z_5 = z - 0.09465

    # The 4-DOF formula also expects all offsets in place, including the 0.10915 in y. 
    # Thus, we pass x and y unchanged, and only adjust z by the TCP offset above.
    # This matches the model in the provided 4-DOF solution.

    # -------------------------
    # Existing 4-DOF solution:
    # -------------------------
    numerator = x**2 + y**2 + z_5**2 - 0.346395
    denominator = 0.3341625
    cos_q3 = numerator / denominator
    cos_q3 = np.clip(cos_q3, -1.0, 1.0)
    q3 = np.arccos(cos_q3)

    A = 0.425 + 0.39225 * np.cos(q3)
    B = 0.39225 * np.sin(q3)

    S_squared = x**2 + y**2 - 0.10915**2
    S = np.sqrt(S_squared) if S_squared >= 0 else 0.0
    C = z_5

    numerator_q2 = S * A - C * B
    denominator_q2 = S * B + C * A
    q2 = np.arctan2(numerator_q2, denominator_q2)

    phi = np.arctan2(0.10915, S) if S != 0 else np.pi / 2

    q1 = np.arctan2(y, x) - phi
    # Normalize q1 to (-pi, pi)
    q1 = (q1 + np.pi) % (2 * np.pi) - np.pi

    # By default, set q4 = 0.0 in this simplified position-only IK
    q4 = 0.0

    # Joint 5 (rotation about its local Z) does not affect position (no additional x/y offset),
    # so we set q5 = 0.0 for a valid solution.
    q5 = 0.0

    return (q1, q2, q3, q4, q5)