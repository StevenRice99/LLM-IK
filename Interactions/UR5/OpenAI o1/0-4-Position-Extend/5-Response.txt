```python
def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" at the TCP.
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the 5 joint values [q1, q2, q3, q4, q5].
    """
    import numpy as np

    # Unpack target
    x, y, z = p

    # Adjust target for the TCP offset in z (0.09465)
    # so that we effectively solve for the position of link 5.
    z_5 = z - 0.09465

    # Use the existing sub-solution approach for joints 1..4:
    numerator = x**2 + y**2 + z_5**2 - 0.346395
    denominator = 0.3341625
    cos_q3 = numerator / denominator
    cos_q3 = np.clip(cos_q3, -1.0, 1.0)
    q3 = np.arccos(cos_q3)

    A = 0.425 + 0.39225 * np.cos(q3)
    B = 0.39225 * np.sin(q3)

    S_squared = x**2 + y**2 - 0.10915**2
    S = np.sqrt(S_squared) if S_squared >= 0 else 0.0
    C = z_5

    numerator_q2 = S * A - C * B
    denominator_q2 = S * B + C * A
    q2 = np.arctan2(numerator_q2, denominator_q2)

    # Adjust q1 considering the offset at link 2.
    phi = np.arctan2(0.10915, S) if S != 0 else np.pi / 2
    q1 = np.arctan2(y, x) - phi
    # Normalize to (-pi, pi)
    q1 = (q1 + np.pi) % (2 * np.pi) - np.pi

    # Set q4 and q5 to 0 for a valid position-only IK solution
    q4 = 0.0
    q5 = 0.0

    return (q1, q2, q3, q4, q5)
```