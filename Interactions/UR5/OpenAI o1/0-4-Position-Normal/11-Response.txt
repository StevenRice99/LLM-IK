```python
def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Closed-form, position-only inverse kinematics for the given 5-DOF arm.

    This solution proceeds by:
      1) Solving for joint1 (q1) via atan2(y, x) to align the manipulator in the plane of (x, y).
      2) Transforming the target position into a frame where q1 = 0 (i.e. "un-rotate" by -q1 about Z).
      3) Symbolically expressing the forward kinematics of joints 2..4 (all about Y) plus the various
         link offsets, and solving those algebraically (not iteratively) for q2,q3,q4 using Sympy's
         exact methods. This avoids numeric iteration; Sympy will return exact or closed-form solutions
         if they exist. By construction, the manipulator and offsets do admit an analytic solution,
         though it may produce multiple branches. We pick the first real branch it returns.
      4) Setting joint5 (q5) = 0.0 to fix the extra DOF since only position is constrained.

    Because this arm has multiple offsets in the Y-direction, its geometry is more involved than
    a simple 2- or 3-link planar manipulator; hence we rely on a symbolic approach for the final
    three angles. We do NOT use any iterative or numeric root-finding, just Sympy's direct solve.
    """

    import math
    import sympy
    from sympy import symbols, sin, cos, Matrix, simplify, Eq, atan2

    # Unpack desired target
    x_t, y_t, z_t = p

    # 1) Solve for q1 analytically:
    #    If (x,y) is near the origin, default to 0 for q1 to avoid undefined atan2.
    EPS = 1e-12
    if abs(x_t) < EPS and abs(y_t) < EPS:
        q1_val = 0.0
    else:
        q1_val = float(atan2(y_t, x_t))

    # 2) "Un-rotate" the target by -q1 about Z so that, in the new frame, q1=0
    c1 = math.cos(q1_val)
    s1 = math.sin(q1_val)
    # p' = Rz(-q1)*[x, y, z]
    x_prime =  c1*x_t + s1*y_t
    y_prime = -s1*x_t + c1*y_t  # but after factoring out rotation about Z, this normally ends near 0
    z_prime =  z_t

    # We only expect small numerical y_prime if our q1_val is correct, but keep it in the math anyway.

    # 3) Symbolically define q2,q3,q4 and the forward kinematics from the "rotated base" frame
    #    up to the TCP (ignoring q1, since we've effectively set it to 0 in this new frame).
    q2, q3, q4 = symbols('q2 q3 q4', real=True)

    # Define helper matrices for revolve about Y, and for translations:
    def rot_y(th):
        return Matrix([
            [ cos(th), 0, sin(th), 0],
            [ 0,       1, 0,       0],
            [-sin(th), 0, cos(th), 0],
            [ 0,       0, 0,       1]
        ])
    def trans(tx, ty, tz):
        return Matrix([
            [1, 0, 0, tx],
            [0, 1, 0, ty],
            [0, 0, 1, tz],
            [0, 0, 0, 1]
        ])

    # Build transform T234 (with the known link offsets) from the "rotated base":
    #  Joint2: translate [0, 0.13585, 0], revolve about Y (q2)
    T2 = trans(0, 0.13585, 0) * rot_y(q2)

    #  Joint3: translate [0, -0.1197, 0.425], revolve about Y (q3)
    T3 = trans(0, -0.1197, 0.425) * rot_y(q3)

    #  Joint4: translate [0, 0, 0.39225], revolve about Y (q4)
    T4 = trans(0, 0, 0.39225) * rot_y(q4)

    #  Then a translation [0, 0.093, 0] for joint5 (but setting q5=0 won't affect position)
    T5 = trans(0, 0.093, 0)

    #  Finally the TCP offset [0, 0, 0.09465]
    TCP = trans(0, 0, 0.09465)

    # Full chain T2345TCP:
    T2345TCP = T2 * T3 * T4 * T5 * TCP

    # Extract the final x,y,z from T2345TCP:
    px_expr = T2345TCP[0,3]
    py_expr = T2345TCP[1,3]
    pz_expr = T2345TCP[2,3]

    # We want px_expr = x_prime, py_expr = y_prime, pz_expr = z_prime
    eqs = [
        Eq(px_expr, x_prime),
        Eq(py_expr, y_prime),
        Eq(pz_expr, z_prime)
    ]

    # 4) Solve algebraically (not iteratively):
    #    This is a direct symbolic approach in Sympy, which yields closed-form trig solutions.
    #    We pick the first real branch among solutions returned.
    sol_set = sympy.solve(eqs, [q2, q3, q4], dict=True)

    if not sol_set:
        # By problem statement, we assume it's always reachable, so let's just raise an error if not found.
        raise RuntimeError("No (q2,q3,q4) solution found unexpectedly.")

    # Some positions can yield multiple branches. We'll pick the first real solution we encounter.
    chosen = None
    for candidate in sol_set:
        # Quick check that candidate is real
        c2 = candidate[q2]
        c3 = candidate[q3]
        c4 = candidate[q4]
        # Sympy might give symbolic objects or complex solutions. We check if they're real by .is_real.
        # If is_real is None, we attempt float(...) to see if it fails.
        try:
            test_q2 = float(c2)
            test_q3 = float(c3)
            test_q4 = float(c4)
            # That worked, so pick it and break.
            chosen = (test_q2, test_q3, test_q4)
            break
        except:
            continue

    if chosen is None:
        # No real solution in the returned set, which shouldn't happen for a valid target.
        raise RuntimeError("All symbolic solutions were non-real, unexpected.")

    q2_val, q3_val, q4_val = chosen
    # Fix q5=0 because only position is constrained
    q5_val = 0.0

    return (q1_val, q2_val, q3_val, q4_val, q5_val)
```