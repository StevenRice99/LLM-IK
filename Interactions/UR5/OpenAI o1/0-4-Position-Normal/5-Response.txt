```python
def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    import sympy
    from sympy import symbols, sin, cos, Eq, solve, Matrix

    x_target, y_target, z_target = p

    # Define symbolic joint variables (we'll set q5=0, leaving 4 unknowns).
    q1, q2, q3, q4 = symbols('q1 q2 q3 q4', real=True)

    # Rotation matrices about fixed axes.
    def rot_z(th):
        return Matrix([
            [cos(th), -sin(th), 0, 0],
            [sin(th),  cos(th), 0, 0],
            [0,        0,       1, 0],
            [0,        0,       0, 1]
        ])

    def rot_y(th):
        return Matrix([
            [cos(th),  0, sin(th), 0],
            [0,        1, 0,       0],
            [-sin(th), 0, cos(th), 0],
            [0,        0, 0,       1]
        ])

    def trans(tx, ty, tz):
        return Matrix([
            [1, 0, 0, tx],
            [0, 1, 0, ty],
            [0, 0, 1, tz],
            [0, 0, 0, 1]
        ])

    # Build the forward kinematics up to the TCP (not applying q5).
    # Revolute 1 (Z axis, q1).
    T1 = rot_z(q1)

    # Revolute 2 (Y axis, q2) after translation [0, 0.13585, 0].
    T2 = trans(0, 0.13585, 0) * rot_y(q2)

    # Revolute 3 (Y axis, q3) after translation [0, -0.1197, 0.425].
    T3 = trans(0, -0.1197, 0.425) * rot_y(q3)

    # Revolute 4 (Y axis, q4) after translation [0, 0, 0.39225].
    T4 = trans(0, 0, 0.39225) * rot_y(q4)

    # Revolute 5 (Z axis, q5=0 for position-only IK) after translation [0, 0.093, 0].
    T5 = trans(0, 0.093, 0)

    # TCP offset.
    TCP = trans(0, 0, 0.09465)

    # Full transform from base to TCP.
    T = T1 * T2 * T3 * T4 * T5 * TCP

    # Extract position expressions.
    px = T[0, 3]
    py = T[1, 3]
    pz = T[2, 3]

    # Solve the system px=x_target, py=y_target, pz=z_target.
    eqs = [
        Eq(px, x_target),
        Eq(py, y_target),
        Eq(pz, z_target)
    ]
    solutions = solve(eqs, [q1, q2, q3, q4], dict=True)

    if not solutions:
        # By problem statement, assume always reachable.
        raise RuntimeError("No IK solution found.")

    # Take the first solution from the list.
    sol = solutions[0]
    val_q1 = float(sol[q1])
    val_q2 = float(sol[q2])
    val_q3 = float(sol[q3])
    val_q4 = float(sol[q4])
    val_q5 = 0.0  # Free joint for orientation.

    return (val_q1, val_q2, val_q3, val_q4, val_q5)
```