```python
import sympy
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Closed-form symbolic inverse kinematics for the 6-DOF chain specified in the DETAILS,
    matching all six revolute joints and their positions from the table:

        1) Revolute 1: axis Z, origin [0, 0, 0]
        2) Revolute 2: axis Y, origin [0, 0.13585, 0]
        3) Revolute 3: axis Y, origin [0, -0.1197, 0.425]
        4) Revolute 4: axis Y, origin [0, 0, 0.39225]
        5) Revolute 5: axis Z, origin [0, 0.093, 0]
        6) Revolute 6: axis Y, origin [0, 0, 0.09465]
        TCP offset: [0, 0.0823, 0], orientation [0, 0, Ï€/2]

    This code sets up the forward-kinematics T0->TCP symbolically using sympy, then
    solves for (q1, q2, q3, q4, q5, q6) given a target position (x, y, z). Because the
    manipulator has 6 DOF but we only impose 3 constraints (the TCP position), there
    are infinitely many solutions in principle (3-DOF redundancy). We choose one branch.

    Steps:
      1) Define symbolic variables q1..q6.
      2) Define rotation/translation matrices for each joint according to the table.
      3) Multiply them to get the final end-effector frame, extract its translation (xE, yE, zE).
      4) Solve the system xE = x, yE = y, zE = z symbolically for q1..q6.
      5) Pick a principal branch from the solutions (if solutions exist).
      6) Return that solution. If no solution is found, return all zeros (though the problem
         states all inputs are reachable).

    IMPORTANT: Because of the redundancy, sympy's solve will return multiple or parametric
    solutions. We pick the first real solution from the result set. This picks an arbitrary
    branch. For more complex shapes, one may need to handle multiple solutions carefully.

    :param p: The desired TCP position as (x, y, z).
    :return: A tuple of joint angles (q1..q6), each in radians.
    """
    x_val, y_val, z_val = p

    # --- 1) Symbolic variables ---
    q1, q2, q3, q4, q5, q6 = sympy.symbols('q1 q2 q3 q4 q5 q6', real=True)

    # Some short-hands for sin/cos:
    s1, c1 = sympy.sin(q1), sympy.cos(q1)
    s2, c2 = sympy.sin(q2), sympy.cos(q2)
    s3, c3 = sympy.sin(q3), sympy.cos(q3)
    s4, c4 = sympy.sin(q4), sympy.cos(q4)
    s5, c5 = sympy.sin(q5), sympy.cos(q5)
    s6, c6 = sympy.sin(q6), sympy.cos(q6)

    # --- 2) Helper: rotation about Z, Y, plus translation as 4x4 matrices in sympy ---
    def Tz(theta):
        return sympy.Matrix([
            [sympy.cos(theta), -sympy.sin(theta), 0, 0],
            [sympy.sin(theta),  sympy.cos(theta), 0, 0],
            [0,                 0,                1, 0],
            [0,                 0,                0, 1]
        ])
    def Ty(theta):
        return sympy.Matrix([
            [ sympy.cos(theta), 0, sympy.sin(theta), 0],
            [0,                 1, 0,                0],
            [-sympy.sin(theta), 0, sympy.cos(theta), 0],
            [0,                 0, 0,                1]
        ])
    def Tx(theta):
        # (not used here, but for completeness)
        return sympy.Matrix([
            [1, 0,                0,               0],
            [0, sympy.cos(theta), -sympy.sin(theta), 0],
            [0, sympy.sin(theta),  sympy.cos(theta), 0],
            [0, 0, 0, 1]
        ])
    def trans_xyz(dx, dy, dz):
        return sympy.Matrix([
            [1, 0, 0, dx],
            [0, 1, 0, dy],
            [0, 0, 1, dz],
            [0, 0, 0, 1]
        ])

    # --- 3) Build the forward kinematics T0->TCP as a chain ---
    # Link 1: revolve about Z by q1, from origin [0,0,0]
    T01 = Tz(q1) * trans_xyz(0, 0, 0)       # revolve Z, then no offset

    # Link 2: revolve about Y by q2, positioned at [0, 0.13585, 0]
    T12 = trans_xyz(0, 0.13585, 0) * Ty(q2)

    # Link 3: revolve about Y by q3, positioned at [0, -0.1197, 0.425]
    T23 = trans_xyz(0, -0.1197, 0.425) * Ty(q3)

    # Link 4: revolve about Y by q4, positioned at [0, 0, 0.39225]
    T34 = trans_xyz(0, 0, 0.39225) * Ty(q4)

    # Link 5: revolve about Z by q5, positioned at [0, 0.093, 0]
    T45 = trans_xyz(0, 0.093, 0) * Tz(q5)

    # Link 6: revolve about Y by q6, positioned at [0, 0, 0.09465]
    T56 = trans_xyz(0, 0, 0.09465) * Ty(q6)

    # TCP offset: [0, 0.0823, 0], orientation about z = pi/2
    # Because orientation about z=pi/2 just reorients the tool, but we only want position,
    # we only need the translation. However, to be precise, we'll incorporate that rotation.
    T6TCP = trans_xyz(0, 0.0823, 0) * Tz(sympy.pi/2)

    # Multiply them all: T0->1->2->3->4->5->6->TCP
    T0TCP = T01 * T12 * T23 * T34 * T45 * T56 * T6TCP

    # End-effector translation:
    xE = T0TCP[0, 3]
    yE = T0TCP[1, 3]
    zE = T0TCP[2, 3]

    # We want xE = x_val, yE = y_val, zE = z_val.
    # Because of the 3D position but 6 unknowns, there's 3 DOF of redundancy. Sympy's solve
    # should give parametric solutions or multiple solutions.
    # We'll attempt a direct solve with free parameters. We can instruct sympy to treat
    # q4, q5, q6 as free parameters, for example, and solve for q1, q2, q3 in terms of them.
    # Or we can set some constraints (like q4=q5=q6=0). But that wouldn't match all the
    # example solutions in feedback. Instead let's let sympy do a general solve, then pick one.
    #
    # We'll try: solve for [q1,q2,q3,q4,q5,q6], ignoring orientation. That can produce many results.
    # We'll forcibly treat q4, q5, q6 as unknown but we let sympy find *a* solution.

    # We do an unconstrained solve:
    solutions = sympy.solve([
        xE - x_val,
        yE - y_val,
        zE - z_val
        ], [q1, q2, q3, q4, q5, q6], dict=True, real=True)

    # If no solution, just return zeros. The instructions say "assume all targets given are reachable."
    if not solutions:
        return (0.0, 0.0, 0.0, 0.0, 0.0, 0.0)

    # solutions can be a list of dicts, each dict is a solution.
    # We'll pick the first solution that does not contain complex values or free symbols.
    # If all contain parametric forms, we can fix them. We'll do a simple approach: pick the
    # first purely real solution. We'll define a helper to evaluate each solution at 0 for
    # any free symbol, if needed, then see if it becomes real.

    # Because it's a redundant chain, likely sympy will return parametric solutions with
    # free variables. We'll try to do a quick check and substitute 0 for them.

    def is_numeric(expr):
        # Check if expr is a sympy Float or can be made numeric. We'll attempt a simplification.
        return expr.is_real or (expr.is_Float and expr.is_real)

    # We'll try each solution dictionary:
    for sol in solutions:
        # If there are free symbols, we set them to 0.0:
        free_vars = [v for v in sol.values() if v.free_symbols]
        if free_vars:
            # There's a param, we try substituting param=0, for each free symbol:
            # Actually, we should check each expression in sol, not each free variable.
            pass

        # We'll build a candidate for q1..q6 by substituting 0 for any free symbol:
        numeric_sol = []
        for qt in (q1, q2, q3, q4, q5, q6):
            expr = sol.get(qt, None)
            if expr is None:
                # not identified, set 0
                numeric_sol.append(0.0)
            else:
                # If expr depends on free symbols, set them all to 0
                if expr.free_symbols:
                    # build a dict: param -> 0
                    subs_dict = {fs: 0.0 for fs in expr.free_symbols}
                    val = expr.subs(subs_dict)
                else:
                    val = expr
                # now try to evaluate
                val_e = sympy.N(val)
                # if it's complex or not real, skip
                if val_e.is_real:
                    numeric_sol.append(float(val_e))
                else:
                    # not real, skip
                    break
        if len(numeric_sol) == 6:
            # success, we found a numeric assignment
            # We'll do a quick "normalize" to keep angles in [-pi, pi] if we like:
            def wrap_angle(a):
                a_mod = math.fmod(a, 2.0*math.pi)
                if a_mod > math.pi:
                    a_mod -= 2.0*math.pi
                if a_mod <= -math.pi:
                    a_mod += 2.0*math.pi
                return a_mod

            numeric_sol = tuple(wrap_angle(v) for v in numeric_sol)
            return numeric_sol

    # If we reach here, we didn't find a purely numeric solution. Return zeros:
    return (0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
```