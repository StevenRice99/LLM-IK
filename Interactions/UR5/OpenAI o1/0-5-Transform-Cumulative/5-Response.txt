```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    A revised closed-form solution using Sympy to solve the 6-DOF chain exactly, then picking
    the real solution whose forward pose best matches the desired target pose. This approach
    attempts to handle the multiple branches correctly by evaluating all symbolic solutions.

    The manipulator’s geometry (from the DETAILS table):
      1) Revolute about Z at [0,0,0].
      2) Revolute about Y at [0,0.13585,0].
      3) Revolute about Y at [0,-0.1197,0.425].
      4) Revolute about Y at [0,0,0.39225].
      5) Revolute about Z at [0,0.093,0].
      6) Revolute about Y at [0,0,0.09465].
      TCP) A final transform [0,0.0823,0] plus Rz(π/2).

    The inputs:
      p = (x, y, z) for TCP position
      r = (roll, pitch, yaw) in radians (URDF convention: Rz(yaw)*Ry(pitch)*Rx(roll))

    This code constructs T1..T6*T_TCP (all 4×4 symbolic) and solves T_all == T_des, where
    T_des = Trans(p)*Rz(yaw)*Ry(pitch)*Rx(roll). We extract all real solutions and pick
    the one with minimal pose error (a combination of translation + orientation difference).
    """

    import sympy
    from sympy import sin, cos, symbols, Matrix
    import math

    # Unpack target
    x_des, y_des, z_des = p
    roll_des, pitch_des, yaw_des = r

    # Define joint symbols
    q1, q2, q3, q4, q5, q6 = symbols('q1 q2 q3 q4 q5 q6', real=True)

    # Rotation about Z
    def Rz(q):
        return Matrix([
            [cos(q), -sin(q),  0],
            [sin(q),  cos(q),  0],
            [0,       0,       1]
        ])

    # Rotation about Y
    def Ry(q):
        return Matrix([
            [ cos(q), 0, sin(q)],
            [ 0,      1, 0     ],
            [-sin(q), 0, cos(q)]
        ])

    # Homogeneous transform from trans + 3×3 R
    def make_T(dx, dy, dz, R):
        return Matrix.hstack(
            Matrix.vstack(R, Matrix([[0, 0, 0]])),
            Matrix([[dx], [dy], [dz], [1]])
        )

    # Build each link transform:
    # 1) revolveZ(q1)
    T1 = make_T(0, 0, 0, Rz(q1))
    # 2) revolveY(q2) at [0, 0.13585, 0]
    T2 = make_T(0, 0.13585, 0, Ry(q2))
    # 3) revolveY(q3) at [0, -0.1197, 0.425]
    T3 = make_T(0, -0.1197, 0.425, Ry(q3))
    # 4) revolveY(q4) at [0, 0, 0.39225]
    T4 = make_T(0, 0, 0.39225, Ry(q4))
    # 5) revolveZ(q5) at [0, 0.093, 0]
    T5 = make_T(0, 0.093, 0, Rz(q5))
    # 6) revolveY(q6) at [0, 0, 0.09465]
    T6 = make_T(0, 0, 0.09465, Ry(q6))
    # TCP offset + Rz(π/2)
    T_tcp = make_T(0, 0, 0, Rz(sympy.pi/2))  # first rotate
    T_tcp[0, 3] = 0
    T_tcp[1, 3] = 0.0823
    T_tcp[2, 3] = 0

    # Full forward kinematics
    T_all = T1 * T2 * T3 * T4 * T5 * T6 * T_tcp

    # Desired transform T_des = Trans(x_des,y_des,z_des)*Rz(yaw_des)*Ry(pitch_des)*Rx(roll_des).
    # Build that symbolically:
    def Rx(q):
        return Matrix([
            [1,      0,       0],
            [0,  cos(q), -sin(q)],
            [0,  sin(q),  cos(q)]
        ])

    R_des = Rz(yaw_des) * Ry(pitch_des) * Rx(roll_des)
    T_des = make_T(x_des, y_des, z_des, R_des)

    # Build system of 12 equations: compare T_all[i,j] with T_des[i,j] for i in 0..2, j in 0..3
    eqs = []
    for i in range(3):
        # translation col = 3
        eqs.append(sympy.Eq(T_all[i, 3], T_des[i, 3]))
        # rotation cols = 0..2
        for j in range(3):
            eqs.append(sympy.Eq(T_all[i, j], T_des[i, j]))

    # Solve symbolically
    sol = sympy.solve(eqs, [q1, q2, q3, q4, q5, q6], dict=True)

    if not sol:
        # No solutions found in symbolic sense. Return zeros
        return (0.0, 0.0, 0.0, 0.0, 0.0, 0.0)

    # We'll define a helper function to measure how close T_candidate is to T_des in both
    # position and orientation:
    def pose_error(T_candidate, T_target):
        # Position error
        dx = T_candidate[0, 3] - T_target[0, 3]
        dy = T_candidate[1, 3] - T_target[1, 3]
        dz = T_candidate[2, 3] - T_target[2, 3]
        pos_err = float(dx*dx + dy*dy + dz*dz)
        # Orientation error (Frobenius norm of rotation difference)
        R_c = T_candidate[0:3, 0:3]
        R_t = T_target[0:3, 0:3]
        R_diff = R_c - R_t
        ori_err = float(R_diff.norm()**2)
        return pos_err + ori_err

        # Another approach: we can do e.g. angle difference also, but this is fine.

    # Evaluate each symbolic solution, picking a real one with minimal error:
    best_sol = None
    best_error = 1e99

    for candidate in sol:
        # Evaluate numeric
        vals = []
        is_imag = False
        for v in (q1, q2, q3, q4, q5, q6):
            cval = candidate[v].evalf()
            # Check if it’s complex
            if abs(sympy.im(cval)) > 1e-9:
                is_imag = True
                break
            vals.append(float(sympy.re(cval)))
        if is_imag:
            continue  # skip complex solutions

        # Build forward kinematics from these joint values to check error
        # We can do a small numeric method:
        T_curr = T_all.subs({
            q1: vals[0],
            q2: vals[1],
            q3: vals[2],
            q4: vals[3],
            q5: vals[4],
            q6: vals[5],
        })
        this_err = pose_error(T_curr, T_des)
        if this_err < best_error:
            best_sol = vals
            best_error = this_err

    # If none are purely real, fallback to the first solution or just zeros
    if best_sol is None:
        return (0.0, 0.0, 0.0, 0.0, 0.0, 0.0)

    return tuple(best_sol)
```