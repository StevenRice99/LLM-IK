```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Closed-form analytical IK for the 6-DOF manipulator, avoiding any symbolic or purely numeric solvers.

    Robot geometry (from DETAILS):
      Joint 1: Revolute about Z at [0, 0, 0]
      Joint 2: Revolute about Y at [0, 0.13585, 0]
      Joint 3: Revolute about Y at [0, -0.1197, 0.425]
      Joint 4: Revolute about Y at [0, 0, 0.39225]
      Joint 5: Revolute about Z at [0, 0.093, 0]
      Joint 6: Revolute about Y at [0, 0, 0.09465]
      TCP   : Final offset [0, 0.0823, 0], plus an intrinsic Rz(π/2).

    Overview of this solution:
      1) We temporarily ignore joint 6, “collapsing” it so that we treat the robot up to joint 5,
         but also include the final 0.09465 offset along the +Z of joint 5, and the 0.0823 offset
         plus Rz(π/2). This is effectively a 5-DOF submanipulator with the same structure as
         “EXISTING 2” code. We solve for (q1, q2, q3, q4, q5) using that submanipulator approach.
      2) We then solve for q6 by factoring out the rotation from joints 1..5 from the desired
         orientation and extracting what remains about Y.

    -------------------------------------------------------------------------------------------
    STEP 1: Solve (q1..q5) using the same approach as code 2, but with updated link parameters.
            The sub-chain we treat for 5 DOF is:
              • Joint 1: revolve Z
              • Joint 2: revolve Y
              • Joint 3: revolve Y
              • Joint 4: revolve Y
              • Joint 5: revolve Z
              • Then a final offset of 0.09465 along +Z plus the 0.0823 along +Y and an extra Rz(π/2).
            As in code 2, we rely on geometry to solve q1 from the base-plane constraint, then a
            2R approach for q2..q4, and orientation decoupling for q5.
    -------------------------------------------------------------------------------------------
    """
    import math
    import numpy as np

    # Extract target position/orientation
    x, y, z = p
    roll, pitch, yaw = r

    # Helper for rotation matrix from URDF roll-pitch-yaw
    def rotation_rpy(roll_val, pitch_val, yaw_val):
        cr, sr = math.cos(roll_val), math.sin(roll_val)
        cp, sp = math.cos(pitch_val), math.sin(pitch_val)
        cy, sy = math.cos(yaw_val), math.sin(yaw_val)
        # R = Rz(yaw)*Ry(pitch)*Rx(roll)
        Rz_ = np.array([[cy, -sy, 0], [sy, cy, 0], [0, 0, 1]])
        Ry_ = np.array([[cp, 0, sp], [0, 1, 0], [-sp, 0, cp]])
        Rx_ = np.array([[1, 0, 0], [0, cr, -sr], [0, sr, cr]])
        return Rz_ @ Ry_ @ Rx_

    # The approach from "EXISTING 2" lumps the final offset of 0.09465 along Z after joint 5
    # into the chain. Here, we also have a 0.0823 offset along Y plus a final Rz(π/2).
    # We'll treat them collectively just like code 2 (which had a final offset 0.09465).
    # So we define code 2's lengths:
    L1 = 0.425       # between joints 2 and 3
    L2 = 0.39225     # between joints 3 and 4
    L_tcp = 0.09465  # code-2 final offset
    # For code 2, it combined the net Y: y_const = 0.13585 - 0.1197 + 0.093
    # Actually same: 0.13585 - 0.1197 + 0.093 = 0.10915
    y_const = 0.13585 - 0.1197 + 0.093

    # We'll define the target orientation ignoring the final revolve about Y (joint 6).
    # Because we haven't accounted for joint 6, let's define R_des_up_to_5 = R_des * Ry(-q6),
    # but we don't know q6 yet. So code 2 picks up a mismatch if we blindly use R_des.
    # 
    # Trick: we simply do code-2's approach anyway, which solves:
    #    R_des ~ Rz(q1)*Ry(q2+q3+q4)*Rz(q5).
    # Then we define a "leftover" rotation to handle q6 (Step 2).
    #
    # So let's run code-2 logic on (x, y, z) and the full R_des. The result won't match the final
    # orientation exactly, but it solves for the first 5 joints in a consistent manner.

    # 1) Solve for q1 from XY-plane geometry
    #    There's a known formula from code 2: p̄_y = y_const => ratio = y_const / sqrt(x^2 + y^2)
    r_xy = math.hypot(x, y)
    # Protect from tiny r_xy
    if r_xy < 1e-12:
        # fallback
        r_xy = 1e-12
    ratio = y_const / r_xy
    # clamp ratio
    if ratio > 1.0:
        ratio = 1.0
    elif ratio < -1.0:
        ratio = -1.0
    a = math.asin(ratio)
    theta = math.atan2(y, x)
    q1candidateA = theta - a
    q1candidateB = theta - (math.pi - a)

    # define a function to measure how well Rz(-q1)*R_des aligns with the code 2 structure Ry(...) * Rz(...)
    # code 2 uses M[1,2] to pick branch
    def test_branch_error(q1val):
        cq1, sq1 = math.cos(q1val), math.sin(q1val)
        Rz_neg_q1 = np.array([[cq1,  sq1,  0],
                              [-sq1, cq1, 0],
                              [0,    0,   1]])
        R_des_ = rotation_rpy(roll, pitch, yaw)
        M = Rz_neg_q1 @ R_des_
        return abs(M[1, 2])

    errA = test_branch_error(q1candidateA)
    errB = test_branch_error(q1candidateB)
    q1 = q1candidateA if errA <= errB else q1candidateB

    # Now define p_bar = Rz(-q1)*p
    cq1, sq1 = math.cos(q1), math.sin(q1)
    Rz_neg_q1 = np.array([[cq1,  sq1,  0],
                          [-sq1, cq1, 0],
                          [0,    0,   1]])
    p_bar = Rz_neg_q1 @ np.array([x, y, z])
    p_bar_x, p_bar_y, p_bar_z = p_bar

    # We'll also define M = Rz(-q1)*R_des
    R_des_ = rotation_rpy(roll, pitch, yaw)
    M = Rz_neg_q1 @ R_des_

    # From code 2 approach: phi = q2+q3+q4, q5 = ...
    phi = math.atan2(M[0,2], M[2,2])
    q5 = math.atan2(M[1,0], M[1,1])

    # Next we solve the planar 2R for q2,q3; then q4 = phi - (q2+q3).
    # We remove L_tcp in direction phi from (p_bar_x, p_bar_z).
    Px = p_bar_x - L_tcp*math.sin(phi)
    Pz = p_bar_z - L_tcp*math.cos(phi)
    # r2
    r2_ = math.hypot(Px, Pz)
    cos_q3 = (r2_**2 - L1**2 - L2**2)/(2*L1*L2)
    # clamp
    cos_q3 = max(-1.0, min(1.0, cos_q3))
    q3A = math.acos(cos_q3)
    q3B = -q3A

    def planar_q2_q4(q3val):
        q2val = math.atan2(Px, Pz) - math.atan2(L2*math.sin(q3val), L1+L2*math.cos(q3val))
        q4val = phi - (q2val + q3val)
        # check error
        xcalc = L1*math.sin(q2val) + L2*math.sin(q2val+q3val) + L_tcp*math.sin(phi)
        zcalc = L1*math.cos(q2val) + L2*math.cos(q2val+q3val) + L_tcp*math.cos(phi)
        err_ = math.hypot(xcalc - p_bar_x, zcalc - p_bar_z)
        return (q2val, q4val, err_)

    q2A, q4A, errA = planar_q2_q4(q3A)
    q2B, q4B, errB = planar_q2_q4(q3B)
    if errA <= errB:
        q2, q3, q4 = q2A, q3A, q4A
    else:
        q2, q3, q4 = q2B, q3B, q4B

    # We now have q1..q5. This "sub-solution" effectively orients the manipulator as if there's no joint 6.

    # -------------------------------------------------------------------------------------------
    # STEP 2: Solve q6 from leftover orientation. We want:
    #   R_des = [Rz(q1)*Ry(q2+q3+q4)*Rz(q5)] * [Ry(q6)*Rz(π/2)].
    # Let R_first = Rz(q1)*Ry(q2+q3+q4)*Rz(q5). Then R6 = Ry(q6)*Rz(π/2).
    # => R6 = R_first^T * R_des. Then q6 is an angle about Y. We define:
    #   M6 = R_first^T * R_des => M6 * Rz(-π/2) = Ry(q6).
    # So q6 = atan2( that matrix’s [0,2], [2,2] ) once we remove Rz(π/2).
    #
    # Implementation detail: We'll just form R_first numeric, then M6 = R_first^T @ R_des,
    # then define M6' = M6 @ Rz(-π/2) => that should be a pure rotation about Y => extract q6.

    def Rz_(a):
        ca, sa = math.cos(a), math.sin(a)
        return np.array([[ca, -sa, 0],
                         [sa,  ca, 0],
                         [0,   0,  1]])
    def Ry_(a):
        ca, sa = math.cos(a), math.sin(a)
        return np.array([[ ca, 0, sa],
                         [ 0,  1, 0 ],
                         [-sa, 0, ca]])

    # Compute R_first
    R_first = Rz_(q1) @ Ry_(q2+q3+q4) @ Rz_(q5)
    # M6 = R_first^T * R_des
    M6 = R_first.T @ R_des_
    # Multiply by Rz(-π/2)
    Rz_neg_pi2 = Rz_(-math.pi/2)
    M6p = M6 @ Rz_neg_pi2
    # M6p = Ry(q6) => so q6 = atan2( M6p[0,2], M6p[2,2] )
    q6 = math.atan2(M6p[0,2], M6p[2,2])

    return (q1, q2, q3, q4, q5, q6)
```