```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Closed-form analytical inverse kinematics for a 6–DOF serial manipulator whose URDF links and axes
    match the "DETAILS" table.  Joints 1..5 are solved largely as in the existing 5–DOF solution
    (EXISTING 1), then joint 6 is determined by decoupling the final orientation.

    Steps:
      1) Build the desired orientation R_des from roll–pitch–yaw in standard URDF order: Rz(yaw)*Ry(pitch)*Rx(roll).
      2) Remove the final +π/2 rotation about Z from the tool frame so that the subproblem for joints 1..5 sees an effective orientation.
      3) Solve q1..5 using geometry and the approach described in EXISTING 1 but with the adjusted orientation.
      4) Compute q6 from the leftover rotation about Y.

    Parameters:
        p (float,float,float): desired TCP position [x, y, z]
        r (float,float,float): desired TCP roll–pitch–yaw [rx, ry, rz]
    Returns:
        (q1, q2, q3, q4, q5, q6) in radians
    """
    import math
    import numpy as np

    # Constants
    L1 = 0.425
    L2 = 0.39225
    # For the 5–DOF portion, treat joint 5->6 offset as the "tool length"
    L_tcp_5dof = 0.09465
    # Base y-offset sum: 0.13585 - 0.1197 + 0.093 = 0.10915
    y_const = 0.10915

    p_x, p_y, p_z = p
    roll, pitch, yaw = r

    def Rx(a):
        return np.array([
            [1, 0, 0],
            [0,  math.cos(a), -math.sin(a)],
            [0,  math.sin(a),  math.cos(a)]
        ])

    def Ry(a):
        return np.array([
            [ math.cos(a), 0, math.sin(a)],
            [           0, 1,           0],
            [-math.sin(a), 0, math.cos(a)]
        ])

    def Rz(a):
        return np.array([
            [ math.cos(a), -math.sin(a), 0],
            [ math.sin(a),  math.cos(a), 0],
            [           0,            0, 1]
        ])

    # Build R_des in the typical URDF convention
    R_des = Rz(yaw) @ Ry(pitch) @ Rx(roll)

    # Remove the final +pi/2 rotation around Z from the tool
    Rz_neg90 = Rz(-math.pi/2)
    R_des_5dof = R_des @ Rz_neg90

    # Solve for q1 by "y-constant" geometry (like existing 5–DOF solution)
    r_xy = math.sqrt(p_x**2 + p_y**2)
    theta = math.atan2(p_y, p_x)
    ratio = y_const / (r_xy + 1e-14)
    ratio = max(-1.0, min(1.0, ratio))
    a_ = math.asin(ratio)
    q1_candidate1 = theta - a_
    q1_candidate2 = theta - (math.pi - a_)

    def compute_M(q1_val):
        cos_q1 = math.cos(q1_val)
        sin_q1 = math.sin(q1_val)
        Rz_neg_q1 = np.array([
            [ cos_q1, sin_q1, 0],
            [-sin_q1, cos_q1, 0],
            [       0,      0, 1]
        ])
        return Rz_neg_q1 @ R_des_5dof

    M1 = compute_M(q1_candidate1)
    M2 = compute_M(q1_candidate2)
    err1 = abs(M1[1, 2])
    err2 = abs(M2[1, 2])

    q1 = q1_candidate1 if err1 <= err2 else q1_candidate2

    cos_q1 = math.cos(q1)
    sin_q1 = math.sin(q1)
    Rz_neg_q1 = np.array([
        [ cos_q1,  sin_q1, 0],
        [-sin_q1,  cos_q1, 0],
        [       0,       0, 1]
    ])
    M = Rz_neg_q1 @ R_des_5dof

    # Extract q5, phi from M = Ry(phi)*Rz(q5)
    phi = math.atan2(M[0, 2], M[2, 2])
    q5 = math.atan2(M[1, 0], M[1, 1])

    # Solve the planar 2R portion for q2, q3, q4
    p_vec = np.array([p_x, p_y, p_z])
    p_bar = Rz_neg_q1 @ p_vec
    p_bar_x, p_bar_y, p_bar_z = p_bar

    P_x = p_bar_x - L_tcp_5dof * math.sin(phi)
    P_z = p_bar_z - L_tcp_5dof * math.cos(phi)
    r2 = math.sqrt(P_x**2 + P_z**2)
    cos_q3 = (r2**2 - L1**2 - L2**2) / (2*L1*L2)
    cos_q3 = max(-1.0, min(1.0, cos_q3))
    q3_candidateA = math.acos(cos_q3)
    q3_candidateB = -q3_candidateA

    def planar_solution(q3_val):
        q2_val = (math.atan2(P_x, P_z)
                  - math.atan2(L2 * math.sin(q3_val),
                               L1 + L2 * math.cos(q3_val)))
        q4_val = phi - (q2_val + q3_val)
        # Forward check for best solution
        calc_x = (L1 * math.sin(q2_val)
                  + L2 * math.sin(q2_val + q3_val)
                  + L_tcp_5dof * math.sin(phi))
        calc_z = (L1 * math.cos(q2_val)
                  + L2 * math.cos(q2_val + q3_val)
                  + L_tcp_5dof * math.cos(phi))
        err_val = math.sqrt((calc_x - p_bar_x)**2 + (calc_z - p_bar_z)**2)
        return q2_val, q4_val, err_val

    q2A, q4A, errA = planar_solution(q3_candidateA)
    q2B, q4B, errB = planar_solution(q3_candidateB)
    if errA <= errB:
        q3 = q3_candidateA
        q2 = q2A
        q4 = q4A
    else:
        q3 = q3_candidateB
        q2 = q2B
        q4 = q4B

    # Now solve q6 from residual rotation:
    # Rz(-q1)*R_des_5dof = Ry(phi)*Rz(q5)*Ry(q6)
    # => M1 = Ry(-phi)* [Rz(-q1)*R_des_5dof ] = Rz(q5)*Ry(q6)
    # => M2 = Rz(-q5)*M1 = Ry(q6)
    Ry_neg_phi = np.array([
        [ math.cos(phi), 0, -math.sin(phi)],
        [             0, 1,              0],
        [ math.sin(phi), 0,  math.cos(phi)]
    ])
    M1 = Ry_neg_phi @ M
    Rz_neg_q5 = np.array([
        [ math.cos(-q5),  math.sin(-q5), 0],
        [-math.sin(-q5),  math.cos(-q5), 0],
        [            0,              0, 1]
    ])
    M2 = Rz_neg_q5 @ M1
    # For pure Ry(q6), [0,2] = sin(q6), [2,2] = cos(q6)
    q6 = math.atan2(M2[0, 2], M2[2, 2])

    return (q1, q2, q3, q4, q5, q6)
```