```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    A revised closed‐form‐like inverse kinematics method for this 6–DOF robot that additionally
    tests multiple branch “flips” for the wrist to better match the desired target. The manipulator
    has the following structure:
        • Joint 1: revolve about Z
        • Joint 2: revolve about Y
        • Joint 3: revolve about Y
        • Joint 4: revolve about Y
        • Joint 5: revolve about Z
        • Joint 6: revolve about Y
        • TCP: an extra fixed rotation of +π/2 about Z.

    Basic approach:
      1) Build the desired orientation R_des from roll–pitch–yaw = (rx, ry, rz) in URDF order:
         Rz(rz) * Ry(ry) * Rx(rx).
      2) “Remove” the final +π/2 rotation about Z from the target orientation so that joints 1..5
         see an effective orientation. (Same as prior attempt.)
      3) Solve q1..5 using geometry for a 5–DOF subproblem. (Same approach as “existing 1”.)
      4) Solve an initial q6 from the leftover rotation about Y. (Same approach as before.)
      5) Because the manipulator has multiple possible wrist angle sets that produce the same
         orientation (due to ±π flips in Y–Z–Y axes), we systematically test ±2π flips on q4, q5, q6
         and pick whichever set best reproduces the desired (p, r) via forward kinematics. This helps
         find the correct solution branch. In total we only sample each wrist angle in {q, q±2π}
         for a total of 27 combinations. Then compare forward kinematics to the desired transform,
         picking the best. (We do not flip q1..3 because they usually define the position “elbow”
         solution and we already do a 2R test for q3 ± acos(...) in the code.)

    We assume:
      • All inputs are reachable, so no extra checking is done for unreachable cases.
      • Joints have ±2π ranges, so flips by ±2π remain valid solutions.

    Returns:
      (q1, q2, q3, q4, q5, q6), each in radians, chosen to minimize final pose error to (p, r).

    """
    import math
    import numpy as np

    # --------------------- Forward Kinematics Helper -------------------------
    #   Compute the forward transform from base to TCP, given the 6 joint angles.
    #   This duplicates the forward kinematics implied in the DETAILS table.
    #
    #   We’ll use standard DH‐like chaining, but carefully with each link's local
    #   translation/orientation.  The final short link has an added +π/2 about Z.
    #
    def forward_kin(j1, j2, j3, j4, j5, j6):
        # Helper rotations
        def Rx(a):
            return np.array([
                [1,           0,           0],
                [0,  math.cos(a), -math.sin(a)],
                [0,  math.sin(a),  math.cos(a)]
            ], dtype=float)

        def Ry(a):
            return np.array([
                [ math.cos(a), 0, math.sin(a)],
                [0,            1,           0],
                [-math.sin(a), 0, math.cos(a)]
            ], dtype=float)

        def Rz(a):
            return np.array([
                [ math.cos(a), -math.sin(a), 0],
                [ math.sin(a),  math.cos(a), 0],
                [           0,            0, 1]
            ], dtype=float)

        def translate(x, y, z):
            T = np.eye(4)
            T[0,3] = x
            T[1,3] = y
            T[2,3] = z
            return T

        def rot3x3_to_4x4(R):
            M = np.eye(4)
            M[0:3,0:3] = R
            return M

        # Build transform from base to each link, then multiply
        # Joint 1: revolve about Z at [0,0,0]
        T1 = rot3x3_to_4x4(Rz(j1))
        # Joint 2: translate [0,0.13585,0], revolve about Y
        T2 = translate(0,0.13585,0) @ rot3x3_to_4x4(Ry(j2))
        # Joint 3: translate [0,-0.1197,0.425], revolve about Y
        T3 = translate(0,-0.1197,0.425) @ rot3x3_to_4x4(Ry(j3))
        # Joint 4: translate [0,0,0.39225], revolve about Y
        T4 = translate(0,0,0.39225) @ rot3x3_to_4x4(Ry(j4))
        # Joint 5: translate [0,0.093,0], revolve about Z
        T5 = translate(0,0.093,0) @ rot3x3_to_4x4(Rz(j5))
        # Joint 6: translate [0,0,0.09465], revolve about Y
        T6 = translate(0,0,0.09465) @ rot3x3_to_4x4(Ry(j6))
        # Finally the TCP: translate [0,0,0.0823], orientation offset [0,0, +pi/2]
        # (the details say orientation: [0,0,1.570796325]. That’s a +90 deg about Z.)
        T_tcp = translate(0,0,0.0823) @ rot3x3_to_4x4(Rz(math.pi/2))

        T_0tcp = np.eye(4)
        for Ti in [T1,T2,T3,T4,T5,T6,T_tcp]:
            T_0tcp = T_0tcp @ Ti
        return T_0tcp

    # A small helper to measure position/orientation error:
    #   Return RMS of position difference + orientation difference (in matrix form).
    #   Orientation difference is the Frobenius norm of the difference of rotation blocks.
    def pose_error(Ta, Tb):
        # position error
        dp = Ta[0:3,3] - Tb[0:3,3]
        err_p = np.linalg.norm(dp)
        # orientation error
        Ra = Ta[0:3,0:3]
        Rb = Tb[0:3,0:3]
        err_o = np.linalg.norm(Ra - Rb, 'fro')
        return err_p + err_o

    # --------------------- Main IK Steps for q1..5, then q6 -----------------

    # link lengths for the “2R” portion
    L1 = 0.425
    L2 = 0.39225
    # The offset from revolve–5 to revolve–6 is 0.09465 in local Z,
    # used as the “tool length” in the 5–DOF subchain geometry
    L_tcp_5dof = 0.09465
    # The net Y–offset used for the 5–DOF approach
    y_const = 0.13585 - 0.1197 + 0.093  # 0.10915

    p_x, p_y, p_z = p
    roll, pitch, yaw = r

    import math
    import numpy as np

    def Rx(a):
        return np.array([
            [1, 0, 0],
            [0, math.cos(a), -math.sin(a)],
            [0, math.sin(a),  math.cos(a)]
        ], dtype=float)

    def Ry(a):
        return np.array([
            [ math.cos(a), 0, math.sin(a)],
            [0,            1,           0],
            [-math.sin(a), 0, math.cos(a)]
        ], dtype=float)

    def Rz(a):
        return np.array([
            [ math.cos(a), -math.sin(a), 0],
            [ math.sin(a),  math.cos(a), 0],
            [           0,            0, 1]
        ], dtype=float)

    # Build the desired orientation R_des
    R_des = Rz(yaw) @ Ry(pitch) @ Rx(roll)
    # Remove the final +π/2 about Z
    Rz_neg90 = Rz(-math.pi/2)
    R_des_5dof = R_des @ Rz_neg90

    # Solve for q1 by y-constant geometry
    r_xy = math.sqrt(p_x**2 + p_y**2)
    theta = math.atan2(p_y, p_x)
    ratio = y_const / (r_xy + 1e-14)
    ratio = max(-1.0, min(1.0, ratio))
    a_ = math.asin(ratio)
    q1_cand1 = theta - a_
    q1_cand2 = theta - (math.pi - a_)

    def compute_M(q1_val):
        c1 = math.cos(q1_val)
        s1 = math.sin(q1_val)
        Rz_neg_q1 = np.array([
            [ c1,  s1, 0],
            [-s1,  c1, 0],
            [  0,   0, 1]
        ], dtype=float)
        return Rz_neg_q1 @ R_des_5dof

    M1 = compute_M(q1_cand1)
    M2 = compute_M(q1_cand2)
    err1 = abs(M1[1,2])
    err2 = abs(M2[1,2])
    q1 = q1_cand1 if err1 <= err2 else q1_cand2

    # M for chosen q1
    c1 = math.cos(q1)
    s1 = math.sin(q1)
    Rz_neg_q1 = np.array([
        [ c1,  s1, 0],
        [-s1,  c1, 0],
        [  0,   0, 1]
    ], dtype=float)
    M = Rz_neg_q1 @ R_des_5dof

    # from M = Ry(phi)*Rz(q5), extract q5, phi
    phi = math.atan2(M[0,2], M[2,2])
    q5 = math.atan2(M[1,0], M[1,1])

    # Solve planar 2R for q2, q3, q4
    p_vec = np.array([p_x, p_y, p_z], dtype=float)
    p_bar = Rz_neg_q1 @ p_vec
    p_bx, _, p_bz = p_bar
    # subtract the “tool” offset
    P_x = p_bx - L_tcp_5dof*math.sin(phi)
    P_z = p_bz - L_tcp_5dof*math.cos(phi)
    rr = math.sqrt(P_x**2 + P_z**2)

    cos_q3 = (rr**2 - L1**2 - L2**2) / (2*L1*L2)
    cos_q3 = max(-1.0, min(1.0, cos_q3))
    q3_candA = math.acos(cos_q3)
    q3_candB = -q3_candA

    def planar_sol(q3v):
        q2v = math.atan2(P_x, P_z) - math.atan2(L2*math.sin(q3v), L1 + L2*math.cos(q3v))
        q4v = phi - (q2v + q3v)
        # forward check
        calc_x = (L1*math.sin(q2v)
                  + L2*math.sin(q2v + q3v)
                  + L_tcp_5dof*math.sin(phi))
        calc_z = (L1*math.cos(q2v)
                  + L2*math.cos(q2v + q3v)
                  + L_tcp_5dof*math.cos(phi))
        epos = math.hypot(calc_x - p_bx, calc_z - p_bz)
        return (q2v, q4v, epos)

    q2A, q4A, errA = planar_sol(q3_candA)
    q2B, q4B, errB = planar_sol(q3_candB)
    if errA <= errB:
        q3 = q3_candA
        q2 = q2A
        q4 = q4A
    else:
        q3 = q3_candB
        q2 = q2B
        q4 = q4B

    # Next solve for q6 from leftover rotation:
    #  Rz(-q1)* R_des_5dof = Ry(phi)*Rz(q5)*Ry(q6)
    Ry_neg_phi = np.array([
        [ math.cos(phi), 0, -math.sin(phi)],
        [0, 1, 0],
        [ math.sin(phi), 0,  math.cos(phi)]
    ], dtype=float)
    M1 = Ry_neg_phi @ M  # = Rz(q5)*Ry(q6)
    Rz_neg_q5 = np.array([
        [ math.cos(-q5),  math.sin(-q5), 0],
        [-math.sin(-q5),  math.cos(-q5), 0],
        [0, 0, 1]
    ], dtype=float)
    M2 = Rz_neg_q5 @ M1  # = Ry(q6)
    q6_init = math.atan2(M2[0,2], M2[2,2])

    # We now have an initial solution (q1,q2,q3,q4,q5,q6_init).
    # But the wrist (q4,q5,q6) can exhibit ±2π flips that might drastically alter
    # final orientation in unexpected ways. We'll test small set of flips for q4, q5, q6.
    #
    # Because each angle can be changed by ±2π, we’ll produce 27 variations (3 for each axis:
    # (q, q+2π, q-2π)). Then pick the best by forward kinematics vs. the target.
    # We keep q1..3 as is because we already do ± for q3 in the subchain, 
    # and similarly we do a branch test for q1. That should be sufficient to
    # get the correct elbow solutions as well.
    cand_solutions = []
    base_sol = (q1, q2, q3, q4, q5, q6_init)

    def wrap_pm_2pi(val):
        return [val, val + 2*math.pi, val - 2*math.pi]

    # Build T_des as a 4x4
    def rot_to_4x4(R):
        M = np.eye(4)
        M[:3,:3] = R
        return M
    T_des = np.eye(4)
    T_des[:3,:3] = R_des
    T_des[0,3] = p_x
    T_des[1,3] = p_y
    T_des[2,3] = p_z

    best_sol = None
    best_err = 1e9

    qs1, qs2, qs3 = q1, q2, q3
    for q4c in wrap_pm_2pi(q4):
        for q5c in wrap_pm_2pi(q5):
            for q6c in wrap_pm_2pi(q6_init):
                # compute forward kinematics
                T_fk = forward_kin(qs1, qs2, qs3, q4c, q5c, q6c)
                e = pose_error(T_fk, T_des)
                if e < best_err:
                    best_err = e
                    best_sol = (qs1, qs2, qs3, q4c, q5c, q6c)

    return best_sol
```