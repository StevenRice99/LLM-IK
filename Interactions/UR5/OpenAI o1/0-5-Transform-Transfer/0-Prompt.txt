<INSTRUCTIONS>
You are tasked with producing a closed-form analytical solution for the inverse kinematics of the 6 degrees-of-freedom serial manipulator solving for the position and orientation of the TCP as detailed in the "DETAILS" section by completing the Python function provided in the "CODE" section. The "Position" and "Orientation" columns represent link coordinates in local space relative to their parent link. The positions are from the "xyz" attribute and the orientations are the "rpy" attribute from each link's "origin" element parsed from the URDF. The "Axis" column in the table represents the rotational axis of the revolute links; return their values in radians and their limits are in radians. Do not write any code to run or test the method, as this will be handled for you. Assume all targets given as inputs to the method will be reachable, and as such do not write code to check if the target is reachable. You may use any methods included in Python, NumPy, and SymPy to write your solution except for any optimization methods. To help you, a solution for solving the chain for position only is provided in the "EXISTING" section. You can use this solution as a starting point to solve for the position and orientation. You may respond by either completing the inverse kinematics method or calling either of the two provided functions in the "FUNCTIONS" section to help you develop your solution. If you call a function, you will be provided another response and chance to complete the inverse kinematics method. You may only call a single function per response.
</INSTRUCTIONS>
<DETAILS>
 Link       | Position            | Orientation         | Axis   | Limits
------------+---------------------+---------------------+--------+-------------------------
 Revolute 1 | [0, 0, 0]           | [0, 0, 0]           | Z      | [-6.2831853, 6.2831853]
 Revolute 2 | [0, 0.13585, 0]     | [0, 0, 0]           | Y      | [-6.2831853, 6.2831853]
 Revolute 3 | [0, -0.1197, 0.425] | [0, 0, 0]           | Y      | [-6.2831853, 6.2831853]
 Revolute 4 | [0, 0, 0.39225]     | [0, 0, 0]           | Y      | [-6.2831853, 6.2831853]
 Revolute 5 | [0, 0.093, 0]       | [0, 0, 0]           | Z      | [-6.2831853, 6.2831853]
 Revolute 6 | [0, 0, 0.09465]     | [0, 0, 0]           | Y      | [-6.2831853, 6.2831853]
 TCP        | [0, 0.0823, 0]      | [0, 0, 1.570796325] |        |
</DETAILS>
<CODE>
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p" and orientation "r".
    """
</CODE>
<EXISTING>
import numpy as np

def _fk_position(joints: np.ndarray) -> np.ndarray:
    """
    Computes the TCP position for a given 6‑tuple of joint angles.
    The implementation follows the order and dimensions given in the
    DETAILS table of the task description.
    """
    t1, t2, t3, t4, t5, t6 = joints

    def Rz(q):
        c, s = (np.cos(q), np.sin(q))
        return np.array([[c, -s, 0, 0], [s, c, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])

    def Ry(q):
        c, s = (np.cos(q), np.sin(q))
        return np.array([[c, 0, s, 0], [0, 1, 0, 0], [-s, 0, c, 0], [0, 0, 0, 1]])

    def T(v):
        out = np.eye(4)
        out[:3, 3] = v
        return out
    T0 = np.eye(4)
    T0 = T0 @ Rz(t1)
    T0 = T0 @ T([0, 0.13585, 0]) @ Ry(t2)
    T0 = T0 @ T([0, -0.1197, 0.425]) @ Ry(t3)
    T0 = T0 @ T([0, 0, 0.39225]) @ Ry(t4)
    T0 = T0 @ T([0, 0.093, 0]) @ Rz(t5)
    T0 = T0 @ T([0, 0, 0.09465]) @ Ry(t6)
    T0 = T0 @ T([0, 0.0823, 0])
    return T0[:3, 3]

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Returns one set of joint angles that places the tool‑centre‑point at
    the requested position p = (x, y, z).  Orientation is not constrained.
    A damped‑least‑squares iterative solver is used; because the problem
    is well conditioned in the robot’s normal workspace only a handful
    of iterations are required.
    """
    target = np.asarray(p, dtype=float)
    q = np.zeros(6)
    eps_pos = 1e-06
    eps_jac = 1e-06
    damping = 0.0001
    max_iter = 100
    for _ in range(max_iter):
        pc = _fk_position(q)
        err = target - pc
        if np.linalg.norm(err) < eps_pos:
            break
        J = np.zeros((3, 6))
        for i in range(6):
            dq = q.copy()
            dq[i] += eps_jac
            J[:, i] = (_fk_position(dq) - pc) / eps_jac
        JT = J.T
        JJT = J @ JT
        delta = JT @ np.linalg.solve(JJT + damping * np.eye(3), err)
        q += delta
    q = (q + np.pi) % (2.0 * np.pi) - np.pi
    return tuple((float(v) for v in q))
</EXISTING>
<FUNCTIONS>
	<USAGE>
	To use a function, response with the format denoted in the "FORMAT" section of the function.
	</USAGE>
	<FORWARD_KINEMATICS>
		<FORMAT>
		FORWARD_KINEMATICS joint1 joint2 joint3 joint4 joint5 joint6
		</FORMAT>
		<DESCRIPTION>
		Test the forward kinematics of the robot, returning the position and orientation of all links in world space after setting the joint values where "joint1", "joint2", "joint3", "joint4", "joint5", and "joint5" are the joint values as floats.
		</DESCRIPTION>
	</FORWARD_KINEMATICS>
	<TEST_SOLUTION>
		<FORMAT>
		TEST_SOLUTION positionX positionY positionZ orientationX orientationY orientationZ
		</FORMAT>
		<DESCRIPTION>
		Returns the position and orientation of all links in world space after testing your current inverse kinematics solution code where "positionX", "positionY", and "positionZ" are the target position, and "orientationX", "orientationY", and "orientationZ" are the target orientation as radians.
		</DESCRIPTION>
	</TEST_SOLUTION>
</FUNCTIONS>