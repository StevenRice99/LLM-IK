```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    A revised symbolic IK solution for the 5-DOF robot that avoids calling "nsolve" on multiple equations.

    Instead of "nsolve" (which only handles a single equation at a time), we use "sympy.solve"
    on the full system of position + orientation constraints. This may be computationally heavy
    and yield multiple solution branches; we pick the first real solution found.

    IMPORTANT: This solution might produce large symbolic expressions or take significant time
    for some targets. In a real setting, a specialized geometric or numeric approach is generally
    preferred. However, this demonstrates a direct solution approach in pure Python + Sympy
    without "nsolve(...)" across multiple equations or using iterative optimization methods.

    Geometry Recap from the DETAILS table (all units in meters, angles in radians):
      1) Joint 1 (q1): revolve about Y, at base.
      2) Link offset from Joint 1 to Joint 2: [0, -0.1197, 0.425], revolve about Y (q2).
      3) Link offset from Joint 2 to Joint 3: [0, 0, 0.39225], revolve about Y (q3).
      4) Link offset from Joint 3 to Joint 4: [0, 0.093, 0], revolve about Z (q4).
      5) Link offset from Joint 4 to Joint 5: [0, 0, 0.09465], revolve about Y (q5).
      6) TCP offset from Joint 5: [0, 0.0823, 0] plus a rotation about Z of +1.570796325.

    We match the target orientation "r" in URDF-convention roll-pitch-yaw = Rz(yaw)*Ry(pitch)*Rx(roll).

    :param p: (x, y, z): desired TCP position in base frame.
    :param r: (roll, pitch, yaw) in radians (URDF rpy).
    :return: (q1, q2, q3, q4, q5) in radians as one valid solution (if found).
    """
    import sympy
    from sympy import sin, cos, Matrix

    # Define symbolic variables for joint angles
    q1, q2, q3, q4, q5 = sympy.symbols('q1 q2 q3 q4 q5', real=True)

    # Helper functions for homogeneous transforms in symbolic form
    def rot_y(a):
        return Matrix([
            [ cos(a),  0, sin(a), 0],
            [      0,  1,      0, 0],
            [-sin(a), 0, cos(a), 0],
            [      0,  0,      0, 1]
        ])

    def rot_z(a):
        return Matrix([
            [ cos(a), -sin(a), 0, 0],
            [ sin(a),  cos(a), 0, 0],
            [      0,       0, 1, 0],
            [      0,       0, 0, 1]
        ])

    def transl(x, y, z):
        return Matrix([
            [1, 0, 0, x],
            [0, 1, 0, y],
            [0, 0, 1, z],
            [0, 0, 0, 1]
        ])

    def rot_x(a):
        return Matrix([
            [1,       0,        0, 0],
            [0, cos(a), -sin(a), 0],
            [0, sin(a),  cos(a), 0],
            [0,      0,       0, 1]
        ])

    # Build forward kinematics T_base->TCP
    T1 = rot_y(q1)
    T2 = transl(0, -0.1197, 0.425) * rot_y(q2)
    T3 = transl(0, 0, 0.39225) * rot_y(q3)
    T4 = transl(0, 0.093, 0) * rot_z(q4)
    T5 = transl(0, 0, 0.09465) * rot_y(q5)
    # Final tool offset + orientation about Z by +1.570796325
    T_tcp = transl(0, 0.0823, 0) * rot_z(1.570796325)

    # Full transform
    T_total = T1 * T2 * T3 * T4 * T5 * T_tcp

    # Desired inputs
    px_des, py_des, pz_des = p
    roll_des, pitch_des, yaw_des = r

    # Build the desired orientation matrix in URDF convention:
    # R_des = Rz(yaw_des)*Ry(pitch_des)*Rx(roll_des)
    Rz_des = rot_z(yaw_des)
    Ry_des = rot_y(pitch_des)
    Rx_des = rot_x(roll_des)
    R_des  = Rz_des * Ry_des * Rx_des

    # Extract position from T_total
    px = T_total[0, 3]
    py = T_total[1, 3]
    pz = T_total[2, 3]

    # Extract orientation from T_total as roll-pitch-yaw in URDF convention:
    R = T_total[:3, :3]
    # roll_calc  = atan2(R[2,1], R[2,2])
    # pitch_calc = asin(-R[2,0])
    # yaw_calc   = atan2(R[1,0], R[0,0])
    roll_calc  = sympy.atan2(R[2, 1], R[2, 2])
    pitch_calc = sympy.asin(-R[2, 0])
    yaw_calc   = sympy.atan2(R[1, 0], R[0, 0])

    # Form the system of 6 equations:
    eqs = [
        px - px_des,
        py - py_des,
        pz - pz_des,
        roll_calc  - roll_des,
        pitch_calc - pitch_des,
        yaw_calc   - yaw_des
    ]

    # Solve the system for (q1, q2, q3, q4, q5).
    # We set real=True to prefer real solutions if they exist, and dict=True to get a list of solutions.
    sol_set = sympy.solve(eqs, [q1, q2, q3, q4, q5], dict=True, real=True)

    if not sol_set:
        # Means no symbolic real solutions found
        raise ValueError("No real IK solution found by sympy.solve().")

    # If multiple solutions, pick the first one
    best = sol_set[0]

    # Evaluate them numerically
    q1_val = float(best[q1].evalf())
    q2_val = float(best[q2].evalf())
    q3_val = float(best[q3].evalf())
    q4_val = float(best[q4].evalf())
    q5_val = float(best[q5].evalf())

    return (q1_val, q2_val, q3_val, q4_val, q5_val)
```