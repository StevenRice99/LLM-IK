Below is one valid closed‐form solution. In our derivation the forward kinematics can be written as

  p = Rz(θ₁) · ([0.425·sin(θ₂), (0.13585–0.1197), 0.425·cos(θ₂)]),

so that the TCP’s z coordinate gives

  p_z = 0.425·cos(θ₂) ⇒ θ₂ = acos(p_z/0.425).

Once θ₂ is known, define

  A = 0.425·sin(θ₂)  B = 0.13585 – 0.1197  (≈ 0.01615).

Since the (x,y) part is obtained by rotating the “link vector” v = [A, B] by θ₁, we have

  [p_x, p_y]ᵀ = Rz(θ₁)·[A, B]ᵀ.

Writing the rotation in “angle–form” it is easy to show that the orientation of v is δ = atan2(B, A) and that the (x,y) vector has polar angle ψ = atan2(p_y, p_x). Thus, consistency requires

  θ₁ = ψ – δ = atan2(p_y, p_x) – atan2(B, A).

Because the actuated TCP orientation is given by Rz(θ₁)·Ry(θ₂) (so that in typical rpy notation one recovers [roll, pitch, yaw] = [0, θ₂, θ₁]), the provided orientation r (with r = [0, r_y, r_z]) is guaranteed to be reached when we choose θ₁ = r_z and θ₂ = r_y. (Under the assumption that the target is reachable the p and r values will be consistent.) 

Below is one acceptable implementation of the full inverse_kinematics function:

------------------------------------------------------------
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    
    The forward kinematics for this 2-dof chain can be expressed as:
        p = Rz(θ₁) * ( [0.425*sin(θ₂), (0.13585-0.1197), 0.425*cos(θ₂)] )
    from which the z component yields:
        θ₂ = acos(p_z/0.425)
    and the projection in the xy-plane yields:
        [p_x, p_y] = Rz(θ₁)*[A, B]   where A = 0.425*sin(θ₂), B = 0.13585-0.1197.
    Hence, if we let
        δ = atan2(B, A)  and  ψ = atan2(p_y, p_x),
    then we have:
        θ₁ = ψ - δ.
        
    Note: With the forward chain the TCP rotation becomes Rz(θ₁)*Ry(θ₂) so that the TCP rpy
          in the ZYX (roll-pitch-yaw) convention becomes [0, θ₂, θ₁]. Thus the provided r is assumed 
          to satisfy r = [0, θ₂, θ₁].
    
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [roll, pitch, yaw].
    :return: A tuple with the joint values (θ₁, θ₂).
    """
    import math

    # Unpack the target position.
    x, y, z = p

    # Determine θ₂ from the z-coordinate. 0.425 is the effective link length from revolute2 to TCP.
    theta2 = math.acos(z / 0.425)

    # Define the effective xy-plane contributions.
    A = 0.425 * math.sin(theta2)   # contribution from the rotated TCP offset along x in the joint-2 frame
    B = 0.13585 - 0.1197           # constant offset from revolute1 to revolute2 (≈ 0.01615)

    # The fixed rotation introduced by the constant offset.
    delta = math.atan2(B, A)
    # The overall direction of the TCP in the base xy-plane.
    psi = math.atan2(y, x)
    # Solve for θ₁.
    theta1 = psi - delta

    return (theta1, theta2)
------------------------------------------------------------

In this solution the position equations (p_x, p_y, p_z) are inverted to yield the unique joint angles. (Also note that the target orientation r is automatically achieved since the TCP orientation from the chain is [0, θ₂, θ₁].)