def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Solves the inverse kinematics for a 2-DOF serial manipulator defined as follows:
      - Joint 1 rotates about the Z-axis.
      - Joint 2 rotates about the Y-axis.
      
    Robot chain details:
      • The origin of Revolute 2 is at [0, 0.13585, 0] in the base frame.
      • The TCP offset relative to Revolute 2 is [0, -0.1197, 0.425].
      
    Combining these, the effective transformation gives the TCP position in the base frame:
    
      p_x = cos(q1) * (L*sin(q2)) - sin(q1) * (offset)
      p_y = sin(q1) * (L*sin(q2)) + cos(q1) * (offset)
      p_z = L*cos(q2)
    
    where:
      L = 0.425            (the distance from the second joint's frame to the TCP in the z direction)
      offset = 0.13585 - 0.1197 = 0.01615  (the effective offset in the y direction)

    The solution proceeds as follows:
      1. Invert the z-component:
            q2 = acos(p_z / L)
      2. The x and y components satisfy:
            [p_x; p_y] = Rz(q1) * [L*sin(q2); offset]
         which implies:
            target_angle = atan2(p_y, p_x)
            base_angle   = atan2(offset, L*sin(q2))
         and therefore:
            q1 = target_angle - base_angle
            
    The provided orientation "r" is not used, as the 2-DOF chain only controls position.

    :param p: Target TCP position as a tuple (x, y, z).
    :param r: Target TCP orientation as a tuple (roll, pitch, yaw) (unused).
    :return: A tuple (q1, q2) containing the computed joint angles in radians.
    """
    import math

    # Unpack the target position.
    x, y, z = p

    # Constants from the chain.
    L = 0.425
    offset = 0.13585 - 0.1197  # 0.01615

    # Compute q2 via the z-component.
    q2 = math.acos(z / L)

    # Compute the base and target angles for the x-y plane.
    # The fixed vector that gets rotated by q1 is [L*sin(q2), offset].
    base_angle = math.atan2(offset, L * math.sin(q2))
    target_angle = math.atan2(y, x)

    # The first joint angle q1 is the difference between the target angle and the fixed vector angle.
    q1 = target_angle - base_angle

    return (q1, q2)