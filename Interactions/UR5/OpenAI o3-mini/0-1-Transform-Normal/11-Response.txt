```python
import math

def normalize_angle(angle: float) -> float:
    """Normalize an angle to the range [-pi, pi)."""
    return ((angle + math.pi) % (2 * math.pi)) - math.pi

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Computes a closed‐form analytical inverse kinematics solution for a 2-DOF serial manipulator.
    The robot's forward kinematics are defined by:
    
         p_tcp = Rz(theta1) * ( [0, 0.13585, 0] + Ry(theta2) * [0, -0.1197, 0.425] )
         
    which expands to:
         x = 0.425*sin(theta2)*cos(theta1) - 0.01615*sin(theta1)
         y = 0.425*sin(theta2)*sin(theta1) + 0.01615*cos(theta1)
         z = 0.425*cos(theta2)
         
    The corresponding end-effector (TCP) rotation is given by
         R_tcp = Rz(theta1)*Ry(theta2)
    As is common with RPY representations, this transformation is ambiguous. One common
    convention is:
    
      • If the TCP’s roll is near 0 then the rotation is represented as:
             roll  = 0,
             pitch = theta2,
             yaw   = theta1.
            
      • If the TCP’s roll is near ±π then an equivalent representation is:
             roll  = ±π,
             pitch = π - theta2,
             yaw   = theta1 + π.
             
    Accordingly, if the input orientation r (given as (roll, pitch, yaw)) is provided in one of these
    forms, the joint angles can be recovered from r as follows:
    
         • When r[0] (the roll) is near 0:
              theta1 = r[2]    and    theta2 = r[1]
              
         • When r[0] is near ±π:
              theta1 = r[2] - π    and    theta2 = π - r[1]
              
    (Any differences by multiples of 2π are acceptable.) We use a tolerance to decide which branch applies.
    
    :param p: The desired TCP position [x, y, z]. (Note: p is consistent with the forward kinematics.)
    :param r: The desired TCP orientation in RPY (in radians) as [roll, pitch, yaw].
              For a target consistent with the robot’s structure, r will either have roll near 0 or near ±π.
    :return: A tuple (theta1, theta2) representing the joint angles (in radians).
    """
    tol = 1e-6  # tolerance for checking if roll is effectively 0
    
    # Decide the branch based on the TCP roll angle (r[0]).
    # Use normalized angle so that ±π are treated the same.
    roll_norm = normalize_angle(r[0])
    if abs(roll_norm) < tol:
        # Branch 1: TCP roll is near 0.
        # The RPY corresponds directly: yaw = theta1 and pitch = theta2.
        theta1 = normalize_angle(r[2])
        theta2 = normalize_angle(r[1])
    else:
        # Branch 2: TCP roll is near ±π.
        # In this representation, the forward kinematics give:
        #   roll  = ±π,
        #   pitch = π - theta2, and
        #   yaw   = theta1 + π.
        # Therefore, we recover:
        theta1 = normalize_angle(r[2] - math.pi)
        theta2 = normalize_angle(math.pi - r[1])
    
    return (theta1, theta2)
```