def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    For this 2-DOF manipulator the forward kinematics are given by:
    
       p_TCP = Rz(theta1) * ( [0, 0.13585, 0] + Ry(theta2) * [0, -0.1197, 0.425] )
       
    where:
       - theta1 is a rotation about the Z-axis (first joint), 
         and from the TCP’s orientation rpy we know that yaw = theta1 (i.e. r[2]).
       - theta2 is a rotation about the Y-axis (second joint) and appears as the pitch angle (i.e. r[1]).
       
    However, we can also compute theta2 from the desired TCP position as follows.
    
    1. Extract theta1 from the TCP orientation:
           theta1 = r[2]
    
    2. “Undo” the base rotation by applying Rz(-theta1) to the target position p.
       That is, compute p_rot = Rz(-theta1) * p.  (Recall Rz(-theta1) has matrix:
           [ cos(theta1)   sin(theta1)  0 ]
           [ -sin(theta1)  cos(theta1)  0 ]
           [     0             0        1 ] )
    
    3. Subtract the fixed translation from the first link to the second joint,
       given by d = [0, 0.13585, 0]:
           A = p_rot - d.
       
       In the kinematic chain, the remaining transformation from joint2 
       (after applying Ry(theta2)) corresponds to the TCP offset given as:
           [0, -0.1197, 0.425] transformed by Ry(theta2).
    
       Since a rotation about Y gives:
           Ry(theta2)*[0, -0.1197, 0.425] = [0.425*sin(theta2), -0.1197, 0.425*cos(theta2)]
       we equate the X and Z components:
           A_x = 0.425*sin(theta2)
           A_z = 0.425*cos(theta2)
    
    4. Thus, theta2 can be obtained via:
           theta2 = arctan2(A_x, A_z)
    
    (A_y should equal -0.1197 for consistency – we assume the target is reachable.)
    
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach (rpy angles in radians) in the form [roll, pitch, yaw].
    :return: A tuple (theta1, theta2) of joint values in radians.
    """
    import math

    # Unpack the target position and orientation.
    x, y, z = p
    # From the forward kinematics, the TCP roll is always zero.
    # The yaw component (r[2]) corresponds to the first joint: theta1.
    theta1 = r[2]

    # Compute Rz(-theta1) * p. The rotation by -theta1 is:
    #   [ cos(theta1)   sin(theta1)  0 ]
    #   [ -sin(theta1)  cos(theta1)  0 ]
    #   [     0             0        1 ]
    cos_t1 = math.cos(theta1)
    sin_t1 = math.sin(theta1)
    # Rotated coordinates:
    x_rot = cos_t1 * x + sin_t1 * y
    y_rot = -sin_t1 * x + cos_t1 * y
    z_rot = z  # unaffected by rotation about z

    # Subtract the fixed translation from Revolute 1 to Revolute 2: d = [0, 0.13585, 0]
    A_x = x_rot            # there is no x offset in d
    A_y = y_rot - 0.13585    # this should equal -0.1197 if the target is consistent
    A_z = z_rot

    # From the kinematics: after joint2 rotation the TCP offset becomes:
    #   [0.425*sin(theta2), -0.1197, 0.425*cos(theta2)]
    # Hence, solving for theta2 using the x and z components:
    theta2 = math.atan2(A_x, A_z)
    
    return (theta1, theta2)