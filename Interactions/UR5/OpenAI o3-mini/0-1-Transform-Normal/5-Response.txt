```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Computes the joint angles (theta1, theta2) for a 2-DOF serial manipulator
    given the desired TCP position p and orientation r in RPY format.
    
    The forward kinematics for this manipulator can be expressed as:
    
         TCP_position = Rz(theta1) * ([0, 0.13585, 0] + Ry(theta2) * [0, -0.1197, 0.425])
    
    where:
      - theta1 rotates about the Z-axis (first joint)
      - theta2 rotates about the Y-axis (second joint)
      
    The TCP’s desired orientation r = (roll, pitch, yaw) is assumed to be consistent 
    with these transformations so that:
         theta1 = yaw  and  theta2 = pitch.
         
    However, we can derive theta2 also via the desired position as follows:
    
      1. Extract theta1 from the desired yaw:
             theta1 = r[2]
             
      2. Remove the effect of the base rotation:
             p_rot = Rz(-theta1) * p
         where Rz(-theta1) is:
             [ cos(theta1)   sin(theta1)  0 ]
             [ -sin(theta1)  cos(theta1)  0 ]
             [     0             0        1 ]
             
      3. Remove the fixed translation from the base to the second joint.
         The translation is d = [0, 0.13585, 0] so that:
             A = p_rot - d.
             
      4. In the kinematic chain, the TCP offset from joint2 is:
             offset_TCP = [0, -0.1197, 0.425]
         and when rotated by Ry(theta2) becomes:
             Ry(theta2)*offset_TCP = [0.425*sin(theta2), -0.1197, 0.425*cos(theta2)]
             
         Equate the X and Z components with A:
             A_x = 0.425*sin(theta2)
             A_z = 0.425*cos(theta2)
             
      5. Therefore, theta2 can be solved as:
             theta2 = atan2(A_x, A_z)
             
    Assumptions:
      - The desired target is reachable.
      - The provided position and orientation are consistent with the robot’s kinematics.
      
    :param p: Desired TCP position as (x, y, z)
    :param r: Desired TCP orientation as (roll, pitch, yaw), in radians.
    :return: Joint angles (theta1, theta2) in radians.
    """
    # Unpack target position
    x, y, z = p

    # Step 1: Extract theta1 from the yaw component of the target orientation.
    theta1 = r[2]
    
    # Step 2: Undo the base rotation Rz(theta1) by applying Rz(-theta1) to p.
    cos_t1 = math.cos(theta1)
    sin_t1 = math.sin(theta1)
    # Rotate about Z by -theta1.
    x_rot = cos_t1 * x + sin_t1 * y
    y_rot = -sin_t1 * x + cos_t1 * y
    z_rot = z  # z-coordinate is unaffected by rotation about z.
    
    # Step 3: Remove the fixed translation from the first joint to the second.
    # Revolute 2 is translated from the base by d = [0, 0.13585, 0].
    A_x = x_rot          # no fixed offset along x
    A_y = y_rot - 0.13585  # adjust y by subtracting the translation
    A_z = z_rot          # no fixed offset along z

    # (Optionally, one could check that A_y is approximately -0.1197 to confirm consistency)
    
    # Step 4: Relate the TCP offset (from revolute 2) to the A vector.
    # The TCP offset in revolute2's frame is given by [0, -0.1197, 0.425], and after
    # rotation about the Y-axis by theta2 becomes:
    #      [0.425*sin(theta2), -0.1197, 0.425*cos(theta2)]
    # Equate the x and z components:
    #      A_x = 0.425*sin(theta2)
    #      A_z = 0.425*cos(theta2)
    #
    # Solve for theta2:
    theta2 = math.atan2(A_x, A_z)
    
    return (theta1, theta2)
```