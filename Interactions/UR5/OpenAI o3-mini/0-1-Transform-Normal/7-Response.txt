```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Computes a closed‐form solution for the two-joint inverse kinematics of a 2-DOF serial manipulator.
    The forward kinematics (in world coordinates) are given by
        p_tcp = Rz(theta1) * ([0, 0.13585, 0] + Ry(theta2) * [0, -0.1197, 0.425])
    so that, when expanded, the TCP position is:
        x = 0.425*sin(theta2)*cos(theta1) - 0.01615*sin(theta1)
        y = 0.425*sin(theta2)*sin(theta1) + 0.01615*cos(theta1)
        z = 0.425*cos(theta2)
    and the TCP’s orientation (expressed in roll–pitch–yaw) is uniquely determined by the joint angles.
    
    In many standard conventions (such as URDF conventions) the joint‐induced rotation 
    R = Rz(theta1)*Ry(theta2) is expressed in RPY (roll, pitch, yaw) as follows:
    
       • If cos(theta2) ≥ 0  (so that theta2 is in (–π/2, π/2)):
             roll  = 0,
             pitch = theta2,
             yaw   = theta1.
       
       • If cos(theta2) < 0  (so that theta2 is in (π/2, 3π/2)) then the same rotation
         is equivalently expressed as:
             roll  = π    (or –π, which is equivalent),
             pitch = π – theta2,
             yaw   = theta1 + π.
    
    In our robot the fixed link offsets are such that the TCP z‐coordinate is 
      z = 0.425*cos(theta2)
    and therefore the sign of p[2] tells us which “branch” of the orientation
    is being used. (Note that the TCP origin itself is offset by [0, -0.1197, 0.425]
    relative to the second (Y–axis) joint; the translation from the first joint to
    the second joint is [0, 0.13585, 0].)
    
    Because the given target pose (p, r) is by assumption reachable (i.e. it is consistent
    with the robot’s structure), the RPY orientation r will be one of the two forms:
    
       (a) If p[2] ≥ 0 then we must have cos(theta2) ≥ 0 and the natural identification is:
              theta1 = r[2]    and    theta2 = r[1].
       
       (b) If p[2] < 0 then cos(theta2) < 0 and the kinematics “flip” the effective Euler angles.
           In that case the forward kinematics yield
              roll  = π,
              pitch = π – theta2,    and    yaw = theta1 + π.
           Thus we recover
              theta2 = π – r[1]    and    theta1 = r[2] – π.
    
    (Any answer differing by an appropriate multiple of 2π is equivalent, and the joint limits
     allow values in [–6.2831853, 6.2831853].)
    
    :param p: Desired TCP position as (x, y, z).
    :param r: Desired TCP orientation (rpy in radians) as (roll, pitch, yaw).
              (For a target consistent with the robot, r will be either nearly [0, *, *] or nearly [π, *, *].)
    :return: A tuple (theta1, theta2) of joint angles (in radians) to achieve the target.
    """
    # Decide the solution branch based on the sign of the TCP z-coordinate.
    # (From forward kinematics, z = 0.425*cos(theta2). If z < 0 then cos(theta2) < 0.)
    if p[2] >= 0:
        # Branch 1: cos(theta2) >= 0 so that the natural correspondence is
        #           roll = 0, pitch = theta2, yaw = theta1.
        theta1 = r[2]
        theta2 = r[1]
    else:
        # Branch 2: cos(theta2) < 0. In this case the same rotation is represented as:
        #           roll = π, pitch = π – theta2, yaw = theta1 + π.
        # Therefore, we recover the joint angles as:
        theta1 = r[2] - math.pi
        theta2 = math.pi - r[1]
        
    # (Optional: One might normalize the angles to a desired interval. Here we simply return the values,
    #  noting that adding any multiple of 2π produces an equivalent pose.)
    return (theta1, theta2)
```