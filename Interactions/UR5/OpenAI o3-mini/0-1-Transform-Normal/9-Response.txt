```python
import math

def normalize_angle(angle: float) -> float:
    """Normalize an angle to the range [-pi, pi]."""
    return ((angle + math.pi) % (2 * math.pi)) - math.pi

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Computes a closed‐form solution for the inverse kinematics of a 2-DOF serial manipulator.
    The forward kinematics are given by:
    
       p_tcp = Rz(theta1) * ( [0, 0.13585, 0] + Ry(theta2) * [0, -0.1197, 0.425] )
    
    and the overall rotation is:
    
       R_tcp = Rz(theta1) * Ry(theta2)
    
    With the standard roll–pitch–yaw (RPY) extraction (where the fixed
    link rotations are zeros) the end-effector orientation for this robot
    is ambiguously represented. In particular, one obtains:
    
    • When the TCP z-coordinate is nonnegative (i.e. 0.425*cos(theta2) ≥ 0),
      the equivalent RPY is:
            roll  = 0,
            pitch = theta2,
            yaw   = theta1.
            
    • When the TCP z-coordinate is negative (i.e. 0.425*cos(theta2) < 0),
      the same rotation can equivalently be expressed as:
            roll  = π    (or –π),
            pitch = π – theta2,
            yaw   = theta1 + π.
    
    Given that the target pose (p, r) is assumed reachable,
    the provided RPY orientation r matches one of these conventions.
    
    This function recovers the joint angles as follows:
    
      - If p[2] >= 0:
            theta1 = r[2]
            theta2 = r[1]
      - If p[2] < 0:
            theta1 = r[2] - π      (since r[2] is actually theta1 + π)
            theta2 = π - r[1]      (since r[1] is actually π – theta2)
    
    The computed angles are then normalized to the interval [-pi, pi].
    
    :param p: Desired TCP position as (x, y, z)
    :param r: Desired TCP orientation (RPY in radians) as (roll, pitch, yaw)
    :return: A tuple (theta1, theta2) of the joint angles in radians.
    """
    if p[2] >= 0:
        # For TCP positions with nonnegative z, the natural assignment holds.
        theta1 = r[2]
        theta2 = r[1]
    else:
        # For TCP positions with negative z, the Euler representation flips.
        theta1 = r[2] - math.pi
        theta2 = math.pi - r[1]
    
    # Normalize joint angles to be within [-pi, pi].
    theta1 = normalize_angle(theta1)
    theta2 = normalize_angle(theta2)
    
    return (theta1, theta2)
```