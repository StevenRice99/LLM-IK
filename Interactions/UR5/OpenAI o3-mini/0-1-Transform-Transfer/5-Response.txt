```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Computes the joint angles needed to reach the desired TCP pose.
    
    The kinematics of the 2-DOF serial manipulator are given by:
        x = 0.425 * sin(theta2) * cos(theta1) - 0.01615 * sin(theta1)
        y = 0.425 * sin(theta2) * sin(theta1) + 0.01615 * cos(theta1)
        z = 0.425 * cos(theta2)
    where:
        - theta1 rotates about the base Z axis (Revolute 1).
        - theta2 rotates about the Y axis of the second joint (Revolute 2).
      
    The desired TCP pose is given as:
         p: (x, y, z)
         r: (roll, pitch, yaw)
    In this chain, the orientation must satisfy:
         roll  = 0,
         pitch = theta2, and
         yaw   = theta1.
    
    The method first computes theta2 using the z coordinate (since z = 0.425*cos(theta2)).
    There are two possible solutions (theta2 and -theta2); we choose the one that is closest
    to the desired pitch (r[1]). Then we solve for theta1 using the x and y equations.
    
    :param p: The desired TCP position as (x, y, z).
    :param r: The desired TCP orientation in radians as (roll, pitch, yaw).
    :return: A tuple (theta1, theta2) representing the joint angles.
    """
    x_d, y_d, z_d = p
    desired_roll, desired_pitch, desired_yaw = r

    # Compute theta2 from z: z = 0.425*cos(theta2)
    # (Assumes |z_d/0.425| <= 1, i.e. target is reachable.)
    theta2_candidate = math.acos(z_d / 0.425)
    # There are two possible solutions: theta2_candidate and -theta2_candidate.
    # Choose the one that is closer to the desired pitch.
    if abs(theta2_candidate - desired_pitch) <= abs(-theta2_candidate - desired_pitch):
        theta2 = theta2_candidate
    else:
        theta2 = -theta2_candidate

    # For theta1, note that due to the chain transformations:
    #   A = 0.425 * sin(theta2) comes from the TCP offset along z in link2,
    #   B = 0.01615  comes from the net offset in y (0.13585 - 0.1197).
    # The x and y coordinates then become:
    #   x_d = A*cos(theta1) - B*sin(theta1)
    #   y_d = A*sin(theta1) + B*cos(theta1)
    #
    # We can solve these equations by forming:
    A = 0.425 * math.sin(theta2)
    B = 0.01615  # (0.13585 - 0.1197)
    denominator = A**2 + B**2

    C = (A * x_d + B * y_d) / denominator
    S = (-B * x_d + A * y_d) / denominator
    theta1 = math.atan2(S, C)
    
    return (theta1, theta2)
```