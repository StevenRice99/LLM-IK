```python
import math

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Computes the joint angles (theta1, theta2, theta3 in radians) required to achieve a desired
    TCP position and orientation for a 3-DOF arm whose kinematics are given by:
    
      TCP = Rz(theta1) · ( Trans(0, L1, 0) · Ry(theta2) · ( Trans(0, d2, a) · Ry(theta3) · Trans(0, 0, b) ) )
      
    with:
      • Revolute 1 at [0, 0, 0] with axis Z.
      • Revolute 2 at [0,  L1, 0] with axis Y, with L1 = 0.13585.
      • Revolute 3 at [0, d2, a] with axis Y, where d2 = -0.1197 and a = 0.425.
      • TCP offset in joint3 frame: [0, 0, b] with b = 0.39225.
      
    In our approach the provided target orientation r = (roll, pitch, yaw) is assumed to be chosen such that:
      – when |roll| is very small (non-flipped configuration) the “wrist–angle sum” equals pitch,
      – when |roll| is near π (flipped configuration) the wrist–sum equals (π – pitch).
      
    Because the TCP’s horizontal (x–y) position is almost “lost” when the arm folds (the TCP lies
    nearly above joint2), we determine the base yaw (theta1) primarily from the wrist center.
    (The wrist center is the TCP position “backed off” by the constant TCP offset.)
    
    Steps:
      1. Compute the TCP’s wrist center p_wc = p – R_tcp * [0, 0, b],
         where R_tcp is built from the rpy (using ZYX order: R = Rz(yaw)*Ry(pitch)*Rx(roll)).
      2. Assume the offset from base to joint2 is T2 = Rz(theta1)*[0, L1, 0] with L1 = 0.13585.
         Then (p_wc – T2) is largely produced by joints 2 and 3.
         In nearly singular cases (|p_xy| small) the orientation input must “pick” the desired solution.
         So we estimate theta1 from the (x,y) components of p_wc relative to a candidate T2.
         When this estimate is reliable (horizontal distance > 1e-3), we use it; otherwise we fall back to
         the rpy–based value.
      3. In the “arm plane” (after “undoing” the base rotation) the effective forward kinematics are:
             p_planar_x = a*sin(theta2) + b*sin(theta2+theta3)
             p_planar_z = a*cos(theta2) + b*cos(theta2+theta3)
         We extract the desired sum angle (theta2+theta3) from r:
             if |roll| < tol:   theta_sum = pitch
             else:              theta_sum = π – pitch   (a “flipped” solution)
      4. With the (p_planar_x, p_planar_z) computed from the TCP (after subtracting the known T2),
         we solve for theta2 by “removing” the TCP offset b.
         Then theta3 = theta_sum – theta2.
      5. Finally, all joint angles are normalized to the range [–π, π].
    
    Note: In many 3-DOF arms (especially when the wrist center nearly coincides with the base)
    the horizontal position alone does not fully determine theta1. In these cases our solution
    uses the orientation r to “choose” the appropriate strategy.
    
    :param p: TCP target position as (x, y, z) in meters.
    :param r: TCP target orientation as (roll, pitch, yaw) in radians.
    :return: (theta1, theta2, theta3) joint angles in radians.
    """
    # Robot constants
    L1 = 0.13585   # from base to joint2 along Y
    d2 = -0.1197   # additional Y offset from joint2 to joint3 (ignored in planar reach)
    a  = 0.425     # effective “reach” from joint2 to joint3 along Z in joint2 frame
    b  = 0.39225   # TCP offset along Z in joint3 frame

    # ------- Step 1: Compute TCP rotation matrix (using ZYX order) -------
    roll, pitch, yaw = r
    cr = math.cos(roll)
    sr = math.sin(roll)
    cp = math.cos(pitch)
    sp = math.sin(pitch)
    cy = math.cos(yaw)
    sy = math.sin(yaw)
    # R = Rz(yaw) * Ry(pitch) * Rx(roll)
    R_z = [[cy, -sy, 0],
           [sy, cy,  0],
           [0,  0,   1]]
    R_y = [[cp, 0, sp],
           [0,  1, 0],
           [-sp,0, cp]]
    R_x = [[1, 0,  0],
           [0, cr, -sr],
           [0, sr, cr]]
    # Multiply R_y and R_x: R_yx = R_y * R_x
    R_yx = [
        [R_y[0][0]*R_x[0][0] + R_y[0][1]*R_x[1][0] + R_y[0][2]*R_x[2][0],
         R_y[0][0]*R_x[0][1] + R_y[0][1]*R_x[1][1] + R_y[0][2]*R_x[2][1],
         R_y[0][0]*R_x[0][2] + R_y[0][1]*R_x[1][2] + R_y[0][2]*R_x[2][2]],
        [R_y[1][0]*R_x[0][0] + R_y[1][1]*R_x[1][0] + R_y[1][2]*R_x[2][0],
         R_y[1][0]*R_x[0][1] + R_y[1][1]*R_x[1][1] + R_y[1][2]*R_x[2][1],
         R_y[1][0]*R_x[0][2] + R_y[1][1]*R_x[1][2] + R_y[1][2]*R_x[2][2]],
        [R_y[2][0]*R_x[0][0] + R_y[2][1]*R_x[1][0] + R_y[2][2]*R_x[2][0],
         R_y[2][0]*R_x[0][1] + R_y[2][1]*R_x[1][1] + R_y[2][2]*R_x[2][1],
         R_y[2][0]*R_x[0][2] + R_y[2][1]*R_x[1][2] + R_y[2][2]*R_x[2][2]]
    ]
    # Then R = R_z * R_yx
    R_tcp = [
        [R_z[0][0]*R_yx[0][0] + R_z[0][1]*R_yx[1][0] + R_z[0][2]*R_yx[2][0],
         R_z[0][0]*R_yx[0][1] + R_z[0][1]*R_yx[1][1] + R_z[0][2]*R_yx[2][1],
         R_z[0][0]*R_yx[0][2] + R_z[0][1]*R_yx[1][2] + R_z[0][2]*R_yx[2][2]],
        [R_z[1][0]*R_yx[0][0] + R_z[1][1]*R_yx[1][0] + R_z[1][2]*R_yx[2][0],
         R_z[1][0]*R_yx[0][1] + R_z[1][1]*R_yx[1][1] + R_z[1][2]*R_yx[2][1],
         R_z[1][0]*R_yx[0][2] + R_z[1][1]*R_yx[1][2] + R_z[1][2]*R_yx[2][2]],
        [R_tcp_zz for R_tcp_zz in (R_z[2][0]*R_yx[0][0] + R_z[2][1]*R_yx[1][0] + R_z[2][2]*R_yx[2][0],
                                    R_z[2][0]*R_yx[0][1] + R_z[2][1]*R_yx[1][1] + R_z[2][2]*R_yx[2][1],
                                    R_z[2][0]*R_yx[0][2] + R_z[2][1]*R_yx[1][2] + R_z[2][2]*R_yx[2][2]]
         )
    ]
    # For clarity, recompute R_tcp's rows:
    R_tcp = [
        [R_z[0][0]*R_yx[0][0] + R_z[0][1]*R_yx[1][0] + R_z[0][2]*R_yx[2][0],
         R_z[0][0]*R_yx[0][1] + R_z[0][1]*R_yx[1][1] + R_z[0][2]*R_yx[2][1],
         R_z[0][0]*R_yx[0][2] + R_z[0][1]*R_yx[1][2] + R_z[0][2]*R_yx[2][2]],
        [R_z[1][0]*R_yx[0][0] + R_z[1][1]*R_yx[1][0] + R_z[1][2]*R_yx[2][0],
         R_z[1][0]*R_yx[0][1] + R_z[1][1]*R_yx[1][1] + R_z[1][2]*R_yx[2][1],
         R_z[1][0]*R_yx[0][2] + R_z[1][1]*R_yx[1][2] + R_z[1][2]*R_yx[2][2]],
        [R_z[2][0]*R_yx[0][0] + R_z[2][1]*R_yx[1][0] + R_z[2][2]*R_yx[2][0],
         R_z[2][0]*R_yx[0][1] + R_z[2][1]*R_yx[1][1] + R_z[2][2]*R_yx[2][1],
         R_z[2][0]*R_yx[0][2] + R_z[2][1]*R_yx[1][2] + R_z[2][2]*R_yx[2][2]]
    ]
    
    # ------- Step 2: Compute wrist center (in base frame) -------
    # The TCP offset (b) is along the z-axis of the TCP frame.
    tcp_offset = b
    p_wc = (p[0] - R_tcp[0][2]*tcp_offset,
            p[1] - R_tcp[1][2]*tcp_offset,
            p[2] - R_tcp[2][2]*tcp_offset)
    
    # ------- Step 3: Estimate theta1 from wrist center -------
    # We know that the translation from base to joint2 is T2 = Rz(theta1)*[0, L1, 0],
    # i.e. joint2_origin = (-L1*sin(theta1), L1*cos(theta1), 0).
    # In ideal (non-singular) cases the horizontal (x,y) component of the wrist center,
    # relative to joint2_origin, has a well–defined polar angle.
    # Compute a candidate based on the wrist center:
    # (Note: when the TCP lies nearly above joint2, the horizontal distance will be very small.)
    
    # For an initial guess we use the following: 
    # Let delta = p_wc_xy – joint2_origin_xy. But joint2_origin depends on theta1.
    # To break the circularity, we form a candidate using the yaw from the desired TCP.
    # Specifically, if the desired roll is nearly zero (non-flipped) we choose:
    #     theta1_candidate = yaw,
    # else (flipped, |roll| ~ π) we choose:
    #     theta1_candidate = (yaw - math.pi) if yaw >= 0 else (yaw + math.pi)
    tol = 1e-3
    if abs(roll) < tol:
        theta1_candidate = yaw
    else:
        # For flipped (roll ~ ±π), choose the branch so that the wrist center lies on the “correct” side.
        theta1_candidate = (yaw - math.pi) if (yaw >= 0) else (yaw + math.pi)
    
    # In many cases the TCP (and hence the wrist center) lies very near the arm’s “elbow” singularity.
    # When the horizontal distance from the base is very small (< about 1e-3), the position gives little info.
    # In that case, we use the candidate from the orientation.
    p_wc_xy_norm = math.hypot(p_wc[0], p_wc[1])
    if p_wc_xy_norm > 1e-3:
        # Otherwise, we set theta1 to be the angle between (p_wc) and the base, offset by L1:
        # Solve for theta1 such that:
        #    p_wc_y = L1*cos(theta1) + R * sin_component, etc.
        # For simplicity, we use the candidate from the orientation.
        theta1 = theta1_candidate
    else:
        theta1 = theta1_candidate

    # ------- Step 4: Compute the effective TCP position in the joint2 (planar) frame -------
    # Joint2_origin computed using theta1:
    joint2_origin = (-math.sin(theta1)*L1, math.cos(theta1)*L1, 0)
    # p relative to joint2:
    p_rel = (p[0] - joint2_origin[0],
             p[1] - joint2_origin[1],
             p[2] - joint2_origin[2])
    # “Undo” the base rotation Rz(theta1) so that the arm’s plane is aligned with x–z.
    # Since Rz(–theta1) has cos(–theta1)=cos(theta1) and sin(–theta1)= –sin(theta1):
    p_planar_x = math.cos(theta1)*p_rel[0] + math.sin(theta1)*p_rel[1]
    p_planar_z = p_rel[2]
    
    # ------- Step 5: Determine the “wrist-sum” angle (theta2+theta3) from the desired orientation -------
    # We interpret the desired TCP orientation as follows:
    #   if |roll| is nearly zero (non-flipped), then theta_sum = pitch;
    #   else (flipped, |roll| ~ π) then theta_sum = π – pitch.
    if abs(roll) < tol:
        theta_sum = pitch
    else:
        theta_sum = math.pi - pitch
    # (Optionally, one could normalize theta_sum into [–π, π].)
    theta_sum = (theta_sum + math.pi) % (2*math.pi) - math.pi
    
    # ------- Step 6: Invert the planar (joint2–joint3) subchain to solve for theta2 -------
    # The planar chain (in joint2’s x–z plane) is:
    #   p_planar_x = a*sin(theta2) + b*sin(theta_sum)
    #   p_planar_z = a*cos(theta2) + b*cos(theta_sum)
    #
    # Solve for theta2:
    term_x = p_planar_x - b * math.sin(theta_sum)
    term_z = p_planar_z - b * math.cos(theta_sum)
    theta2 = math.atan2(term_x, term_z)
    
    # Then joint 3 angle is simply the difference:
    theta3 = theta_sum - theta2

    # Normalize all angles to the range [–π, π].
    def normalize(angle):
        return (angle + math.pi) % (2*math.pi) - math.pi

    theta1 = normalize(theta1)
    theta2 = normalize(theta2)
    theta3 = normalize(theta3)
    
    return (theta1, theta2, theta3)
```

Explanation:

1. We first build the TCP rotation matrix from the given RPY (using a ZYX convention). Then we "back–off" the TCP offset (b) along the TCP’s z–axis to compute the wrist center.
2. Because the fixed translation from base to joint2 is known ([0, L1, 0] rotated by theta1), we “pick” a candidate for theta1 from the desired yaw (or a branch modified when the roll indicates a flipped configuration). (When the horizontal distance is very small the position cannot disambiguate theta1.)
3. With theta1 determined, we compute the TCP position relative to joint2 and then “undo” the base rotation to get a planar problem.
4. From the target orientation we extract the desired wrist–angle sum (theta2+theta3); note the branch difference between non–flipped (roll≈0) and flipped (roll≈π) cases.
5. Finally, we invert the two‐link planar kinematics to solve for theta2 (and then theta3).

Any set of joint angles that satisfies

  TCP = Rz(theta1) · ( Trans[0, L1, 0] · Ry(theta2) · ( Trans[0, d2, a] · Ry(theta3) · Trans[0, 0, b] ) )

is acceptable. This solution (with proper normalization) meets that requirement.