```python
def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach TCP position "p" and orientation "r".
    
    The forward kinematics for the 3-dof manipulator is modeled as:
    
      TCP = Rz(theta1) · { [0, 0.13585, 0] + Ry(theta2)·[0, –0.1197, 0.425] + Ry(theta2+theta3)·[0, 0, 0.39225] }
    
    where:
      - Joint 1 (theta1) rotates about Z.
      - Joint 2 (theta2) rotates about Y.
      - Joint 3 (theta3) rotates about Y.
    
    Given the target position, p = [px, py, pz], and the desired TCP orientation in RPY (roll, pitch, yaw) as r,
    we assume that:
      - The yaw of the target (r[2]) determines theta1.
      - The pitch (r[1]) equals the combined rotation from joints 2 and 3, i.e., theta2 + theta3.
      - (roll is assumed zero for these reachable cases.)
    
    The intermediate frame (after removing the base rotation) has:
      p'_x = 0.425*sin(theta2) + 0.39225*sin(phi)
      p'_z = 0.425*cos(theta2) + 0.39225*cos(phi)
    where phi = theta2 + theta3 = pitch.
    
    By subtracting out the TCP offset contribution (0.39225*sin(phi) and 0.39225*cos(phi)) we solve:
      theta2 = atan2(  p'_x - 0.39225*sin(phi),  p'_z - 0.39225*cos(phi) )
      theta3 = phi - theta2
    
    :param p: (px, py, pz) desired TCP position.
    :param r: (roll, pitch, yaw) desired TCP orientation, in radians.
    :return: A tuple (theta1, theta2, theta3) of joint angles.
    """
    import math

    # Extract target position and orientation (roll, pitch, yaw)
    px, py, pz = p
    roll, pitch, yaw = r

    # Joint 1: Base rotation around Z is aligned with desired yaw.
    theta1 = yaw

    # The sum of joints 2 and 3 gives the pitch of the TCP.
    phi = pitch  # phi = theta2 + theta3

    # Remove the base rotation effect by applying the inverse rotation Rz(-theta1) to the target position.
    # Rz(-theta1) = [[cos(theta1), sin(theta1), 0],
    #                [-sin(theta1), cos(theta1), 0],
    #                [    0      ,     0     , 1]]
    p_prime_x = math.cos(theta1)*px + math.sin(theta1)*py
    # p_prime_y is not used in the calculation (and should ideally match the fixed offset 0.13585 + (-0.1197) = 0.01615)
    p_prime_z = pz

    # From the forward kinematics in the rotated frame:
    # p_prime_x = 0.425*sin(theta2) + 0.39225*sin(phi)
    # p_prime_z = 0.425*cos(theta2) + 0.39225*cos(phi)
    # Remove the TCP offset due to joint 3:
    adjusted_x = p_prime_x - 0.39225 * math.sin(phi)
    adjusted_z = p_prime_z - 0.39225 * math.cos(phi)

    # Solve for theta2 using the adjusted coordinates.
    theta2 = math.atan2(adjusted_x, adjusted_z)

    # Joint 3 is determined by the difference between the overall pitch and theta2.
    theta3 = phi - theta2

    return (theta1, theta2, theta3)
```