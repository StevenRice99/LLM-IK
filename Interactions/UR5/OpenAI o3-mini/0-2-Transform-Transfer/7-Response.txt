```python
import math

def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Computes the inverse kinematics for a 3-DOF manipulator with the following geometry:
      • Revolute 1: at [0, 0, 0] with rotation about Z.
      • Revolute 2: at [0, 0.13585, 0] with rotation about Y.
      • Revolute 3: at [0, -0.1197, 0.425] with rotation about Y.
      • TCP: offset from Revolute 3 by [0, 0, 0.39225].

    The forward kinematics yield a TCP pose whose orientation is given by:
         R_tcp = Rz(θ₁) · Ry(θ₂+θ₃)
    This implies the only achievable orientation is one with zero roll and with
         yaw = θ₁   and   pitch = θ₂ + θ₃.
    
    To enforce the desired orientation (provided as roll, pitch, yaw in "r"),
    we set θ₁ = yaw and θ₂ + θ₃ = pitch. Since the manipulator cannot produce a nonzero 
    TCP roll, a nonzero roll is simply ignored (or could trigger a warning).

    Additionally, the TCP position is governed by two effective link lengths:
         L1 = 0.425      (link length from joint 2 to joint 3)
         L2 = 0.39225    (TCP offset from joint 3)
    and a small horizontal offset:
         k  = 0.01615    (computed as 0.13585 - 0.1197)

    The law of cosines applied to the full TCP distance provides:
         cos(θ₃) = (|p|² - (L1² + L2²)) / (2 * L1 * L2)
    
    Then, to satisfy the desired TCP orientation we choose:
         θ₁ = r_yaw  
         θ₂ = r_pitch - θ₃

    :param p: Desired TCP position as a tuple (x, y, z)
    :param r: Desired TCP orientation as a tuple (roll, pitch, yaw) in radians.
              (Note: roll must be 0 for this manipulator.)
    :return: A tuple (θ₁, θ₂, θ₃) representing the joint angles in radians.
    """
    # Decompose the target position and orientation.
    x, y, z = p
    r_roll, r_pitch, r_yaw = r

    # Enforce the constraint that the robot cannot produce a nonzero TCP roll.
    tol = 1e-6
    if abs(r_roll) > tol:
        # You might warn or raise an error here.
        # For now, we'll ignore any nonzero roll.
        pass

    # Manipulator geometric constants (units in meters/radians)
    L1 = 0.425      # effective length from Revolute 2 to Revolute 3
    L2 = 0.39225    # offset from Revolute 3 to TCP
    k  = 0.01615    # horizontal offset (computed as 0.13585 - 0.1197)

    # Compute the square of the full distance from the base to the TCP.
    distance_squared = x*x + y*y + z*z

    # Compute theta3 via the law of cosines.
    cos_theta3 = (distance_squared - (L1**2 + L2**2)) / (2 * L1 * L2)
    # Clamp the value to the valid range of cosine to avoid domain errors.
    cos_theta3 = max(min(cos_theta3, 1.0), -1.0)
    theta3 = math.acos(cos_theta3)

    # Enforce the decoupled orientation:
    #   TCP orientation = Rz(θ₁) · Ry(θ₂+θ₃)
    # So we select:
    #   θ₁ = yaw and (θ₂ + θ₃) = pitch  =>  θ₂ = pitch - θ₃
    theta1 = r_yaw
    theta2 = r_pitch - theta3

    return (theta1, theta2, theta3)
```