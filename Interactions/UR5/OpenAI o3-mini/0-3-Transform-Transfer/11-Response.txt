```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Computes the closed‐form inverse kinematics for a 4-DOF serial manipulator.
    
    The robot has the following structure:
      • Joint 1 (Revolute): Rotation about Z.
      • Joints 2, 3, 4 (Revolute): Rotation about Y.
      
    The forward kinematics (ignoring translation offsets) can be decoupled as:
         R_TCP = Rz(q1) · Ry(q2 + q3 + q4)
    so the extracted Euler angles (using a rpy convention) become:
         roll  = 0,   (or ±π, representing the same physical rotation)
         pitch = q2 + q3 + q4,
         yaw   = q1.
    
    The position–only IK (derived from the chain geometry and expressed via fixed constants)
    is given by:
         cos(q3) = (x²+y²+z² - 0.346395) / 0.3341625,
         A = 0.425 + 0.39225*cos(q3),
         B = 0.39225*sin(q3),
         S² = x²+y² - 0.10915²   (with S = sqrt(S²) when nonnegative),
         q2 = atan2( S*A - z*B,  S*B + z*A ),
    and a helper angle φ = atan2(0.10915, S) is used in one derivation of q1.
    (These constants combine the known link offsets and lengths.)
    
    For full orientation control, note that the desired TCP orientation is given in Euler
    angles as r = [roll, pitch, yaw]. In a decoupled formulation one can represent the same
    rotation in two equivalent ways:
    
      Representation 1 (when roll is ~0):
          • q1 = desired yaw
          • q2+q3+q4 = desired pitch.
          
      Representation 2 (when roll is ~±π):
          • q1 = normalize(desired yaw + π)
          • q2+q3+q4 = π - desired pitch.
    
    Here we choose between these two based solely on the magnitude of target_roll.
    (It is assumed that the target orientations will follow one of these two conventions.)
    
    After computing q2 and q3 from the positional equations, we set:
          q4 = (total desired Y-rotation) – (q2 + q3).
    
    Parameters:
       p: Target TCP position [x, y, z].
       r: Target TCP orientation in Euler angles [roll, pitch, yaw] in radians.
          (Typically roll will be either 0 or ±π.)
    
    Returns:
       A tuple (q1, q2, q3, q4) of joint angles (radians) that achieve the desired pose.
    """
    def normalize_angle(angle: float) -> float:
        # Normalizes an angle to the range [-π, π].
        return (angle + np.pi) % (2 * np.pi) - np.pi

    # Unpack TCP target position.
    x, y, z = p

    # ==== POSITION INVERSE KINEMATICS (as provided) ====
    # These constants are derived from the fixed link offsets and lengths.
    numerator = x**2 + y**2 + z**2 - 0.346395
    denominator = 0.3341625
    cos_q3 = np.clip(numerator / denominator, -1.0, 1.0)
    q3 = np.arccos(cos_q3)

    A = 0.425 + 0.39225 * np.cos(q3)
    B = 0.39225 * np.sin(q3)

    S_sq = x**2 + y**2 - 0.10915**2
    S = np.sqrt(S_sq) if S_sq >= 0 else 0.0
    # z is used directly as C.
    q2 = np.arctan2(S * A - z * B, S * B + z * A)

    # ==== ORIENTATION DECOUPLING ====
    target_roll, target_pitch, target_yaw = r
    # Decide which representation to use based on the magnitude of target_roll.
    # When |roll| is small, we assume the convention [roll≈0, pitch, yaw].
    # Otherwise (when |roll| ≈ π), we use the equivalent formulation.
    if np.abs(target_roll) < (np.pi / 2):
        # Representation 1: Desired q1 (rotation about Z) is just the target yaw.
        q1 = normalize_angle(target_yaw)
        theta_total = target_pitch
    else:
        # Representation 2: The desired physical rotation corresponds to
        # a base rotation of target_yaw + π (normalized) and a total Y rotation of π - target_pitch.
        q1 = normalize_angle(target_yaw + np.pi)
        theta_total = np.pi - target_pitch

    # The wrist joint q4 is chosen so that (q2 + q3 + q4) gives the desired total rotation about Y.
    q4 = theta_total - (q2 + q3)

    return (q1, q2, q3, q4)
```