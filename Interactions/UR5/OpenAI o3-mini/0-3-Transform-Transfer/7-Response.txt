```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Computes the joint angles needed for the 4-DOF robot to reach the 
    desired TCP position p and Euler angle orientation r.
    
    The robot has the following structure:
      - Revolute 1 rotates about Z.
      - Revolute 2, 3, and 4 rotate about Y.
    The TCP's overall rotation (ignoring translation offsets) is given by:
          R = Rz(q1) Â· Ry(q2 + q3 + q4)
    Hence the TCP Euler angles (roll, pitch, yaw) are:
          roll  = 0,
          pitch = q2 + q3 + q4,
          yaw   = q1.
    
    This function uses the provided positional inverse kinematics (with fixed
    link offsets and lengths) to compute q1, q2, q3, and then computes q4 so that:
          q2 + q3 + q4 = target_pitch
    It is assumed that the target orientation r is such that target_roll is 0 and 
    target_yaw is consistent with the value of q1 derived from the position.
    
    :param p: The desired position [x, y, z] of the TCP.
    :param r: The desired orientation in Euler angles (roll, pitch, yaw) in radians.
              For this robot, roll should be 0.
    :return: A tuple (q1, q2, q3, q4) representing the joint angles (in radians).
    """
    # Unpack the target TCP position.
    x, y, z = p

    # These constants derive from the link lengths and offsets in the robot.
    # They are used in solving the position part of the inverse kinematics.
    numerator = x**2 + y**2 + z**2 - 0.346395
    denominator = 0.3341625
    cos_q3 = numerator / denominator
    cos_q3 = np.clip(cos_q3, -1.0, 1.0)
    q3 = np.arccos(cos_q3)

    A = 0.425 + 0.39225 * np.cos(q3)
    B = 0.39225 * np.sin(q3)

    S_squared = x**2 + y**2 - 0.10915**2
    S = np.sqrt(S_squared) if S_squared >= 0 else 0.0
    C = z

    numerator_q2 = S * A - C * B
    denominator_q2 = S * B + C * A
    q2 = np.arctan2(numerator_q2, denominator_q2)

    phi = np.arctan2(0.10915, S) if S != 0 else np.pi / 2
    q1 = np.arctan2(y, x) - phi
    # Normalize q1 to be within [-pi, pi]
    q1 = (q1 + np.pi) % (2 * np.pi) - np.pi

    # Unpack the target orientation (roll, pitch, yaw)
    target_roll, target_pitch, target_yaw = r

    # The overall TCP rotation computed from the joints is:
    #   roll  = 0,
    #   pitch = q2 + q3 + q4,
    #   yaw   = q1.
    # For a reachable target, target_roll should be zero and target_yaw should equal q1.
    # We then compute joint 4 as the remainder needed to meet the desired pitch.
    q4 = target_pitch - (q2 + q3)

    return (q1, q2, q3, q4)
```