```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Computes a closed–form inverse kinematics solution for the 5–DOF manipulator.
    
    The robot’s geometry (all lengths in meters, angles in radians) is defined by:
       • Joint 1 (Revolute 1): at the base, with no translation (rotates about Z).
       • Joint 2 (Revolute 2): fixed translation of [0, 0.13585, 0] from the base.
       • Joint 3 (Revolute 3): fixed translation of [0, -0.1197, 0.425] relative to joint 2.
       • Joint 4 (Revolute 4): fixed translation of [0, 0, 0.39225] relative to joint 3.
       • Joint 5 (Revolute 5): fixed translation of [0, 0.093, 0] relative to joint 4.
       • TCP: fixed translation of [0, 0, 0.09465] relative to joint 5.
       
    With all joints set to zero the forward kinematics yield:
         TCP = (0, 0.10915, 0.9119)
    where the (x,y) position is entirely due to a constant offset of 0.10915 in y.
    
    Because joints 2–5 (all rotating about Y – except the last which rotates about Z)
    affect only the z–(and a fixed y–) position, we can decouple the IK into a planar (x–z)
    3–R sub–problem. For that “planar chain” we define the effective link lengths and offsets
    as follows:
         L1 = 0.425         (from joint 3 translation’s z–component)
         L2 = 0.39225       (from joint 4 translation’s z–component)
         L3 = 0.09465       (the TCP’s z–offset, taken from the last translation)
    and a constant “in–plane” y value:
         y_fixed = 0.01615  
    which comes from the net y translation in the chain from joints 2–3:
         0.13585 + (–0.1197) = 0.01615.
    (The final TCP y coordinate is then recovered by adding the joint-5 y translation, 0.093,
     so that 0.01615 + 0.093 = 0.10915.)
    
    The following algorithm is modeled on a candidate–selection procedure (similar to that
    used in a working 4–DOF solver) and then “augments” the planar solution to yield a full
    5–DOF solution (with the redundant joint 5 set to 0).
    
    Procedure:
      1. (Planar decoupling) We “project” the IK problem into the x–z plane. In the desired 
         TCP position p = (x, y, z) only x and z must be reached by the “planar chain.”
         (The y coordinate is fixed by the chain’s constant offsets.)
      2. We set up a candidate solver for the “overall end–effector orientation” in the
         x–z plane, T = theta1 + theta2 + theta3. Two natural choices are T = psi or psi+pi,
         where psi = atan2(x, z).
      3. For each candidate T we subtract the L3 contribution and solve the standard 2–link (2R)
         inverse kinematics for links L1 and L2.
      4. Each candidate yields values theta1, theta2, theta3; we compute the forward kinematics
         error (in the x–z plane), and select the candidate with minimum error.
      5. Finally, we set:
             q1 = theta1   (this base rotation naturally “steers” the whole chain about Z)
             q2 = theta2
             q3 = theta3
             q4 = 0        (redundant for positioning)
             q5 = 0
         so that the full joint vector is (q1, q2, q3, q4, q5).
    
    Note:
       • The forward kinematics of the planar chain are assumed to be:
               x_fk = L1*sin(theta1) + L2*sin(theta1+theta2) + L3*sin(theta1+theta2+theta3)
               z_fk = L1*cos(theta1) + L2*cos(theta1+theta2) + L3*cos(theta1+theta2+theta3)
           with a constant y coordinate of y_fixed.
       • The overall TCP is then given by:
               TCP = (x_fk, y_fixed + 0.093, z_fk)
           which recovers 0.10915 for y when the chain is in its zero configuration.
    
    This closed–form solution meets the specification for reachable targets.
    
    :param p: The TCP target position as a tuple (x, y, z).
    :return: A tuple (q1, q2, q3, q4, q5) of joint angles (in radians).
    """
    x, y, z = p

    # Effective lengths (meters)
    L1 = 0.425
    L2 = 0.39225
    L3 = 0.09465

    # Fixed in–plane y offset (from joints 2 and 3)
    y_fixed = 0.01615
    # Additional y translation from joint 5 to TCP:
    tcp_y_adjust = 0.093  # so that y_fixed + tcp_y_adjust = 0.10915

    # Define forward kinematics for the planar (x–z) chain (constant y = y_fixed)
    def fk_planar(theta1, theta2, theta3):
        x_fk = L1 * math.sin(theta1) + L2 * math.sin(theta1 + theta2) + L3 * math.sin(theta1 + theta2 + theta3)
        z_fk = L1 * math.cos(theta1) + L2 * math.cos(theta1 + theta2) + L3 * math.cos(theta1 + theta2 + theta3)
        return (x_fk, y_fixed, z_fk)

    # Compute the “desired” orientation in the x–z plane from the target (ignoring y)
    psi = math.atan2(x, z)
    # Two natural choices for the overall planar orientation T = theta1+theta2+theta3
    T_options = [psi, psi + math.pi]
    candidates = []

    for T in T_options:
        # Subtract the final link (L3) contribution to get the wrist center in the x–z plane.
        x_w = x - L3 * math.sin(T)
        z_w = z - L3 * math.cos(T)
        r_w = math.hypot(x_w, z_w)
        # Solve the 2–R IK for the sub–chain with links L1 and L2.
        cos_beta = (r_w**2 - L1**2 - L2**2) / (2 * L1 * L2)
        # Clamp cosine due to numerical errors
        cos_beta = max(-1.0, min(1.0, cos_beta))
        for sign in (1, -1):
            beta = sign * math.acos(cos_beta)
            phi_w = math.atan2(x_w, z_w)
            delta = math.atan2(L2 * math.sin(beta), L1 + L2 * math.cos(beta))
            theta1_candidate = phi_w - delta
            theta2_candidate = beta
            theta3_candidate = T - (theta1_candidate + theta2_candidate)
            # Evaluate the forward kinematics error in the x–z plane.
            x_fk, _, z_fk = fk_planar(theta1_candidate, theta2_candidate, theta3_candidate)
            err = math.hypot(x_fk - x, z_fk - z)
            candidates.append((err, theta1_candidate, theta2_candidate, theta3_candidate))

    # Pick the candidate with minimum forward kinematics error.
    best = min(candidates, key=lambda tup: tup[0])
    theta1, theta2, theta3 = best[1], best[2], best[3]
    theta4 = 0.0  # Redundant for positioning
    theta5 = 0.0  # Joint 5 does not affect TCP position

    # In our decoupled solution, the base joint simply uses the planar solution.
    q1 = theta1
    q2 = theta2
    q3 = theta3
    q4 = theta4
    q5 = theta5

    return (q1, q2, q3, q4, q5)
```