def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    import math

    # Extract the TCP target coordinates.
    x, y, z = p

    # Step 1: Compute the wrist center by removing the fixed TCP offset along z.
    # The TCP is offset [0, 0, 0.09465] from the origin of joint 5.
    z_wc = z - 0.09465

    # Link lengths for the sub-chain (between joints 3 and 4).
    L1 = 0.425
    L2 = 0.39225

    # Step 2: Solve for joint 3 (q3) using the law of cosines.
    # cos(q3) = (x^2 + y^2 + z_wc^2 - (L1^2 + L2^2)) / (2 * L1 * L2)
    cos_q3 = (x * x + y * y + z_wc * z_wc - (L1 * L1 + L2 * L2)) / (2 * L1 * L2)
    # Clamp the computed value to the interval [-1, 1] to avoid numerical issues.
    cos_q3 = max(-1.0, min(1.0, cos_q3))
    q3 = math.acos(cos_q3)

    # Step 3: Compute intermediate parameters.
    # These are used for solving for joint 2 (q2). 
    # A represents an effective link length component along the direction of joint 2.
    A = L1 + L2 * math.cos(q3)
    # B is the component introduced by the sine term of q3.
    B = L2 * math.sin(q3)
    # The effective offset in the y-direction due to the manipulatorâ€™s geometry is:
    # 0.13585 (Joint 2) + (-0.1197 from Joint 3) + 0.093 (Joint 5) = 0.10915.
    offset = 0.10915

    # S represents the horizontal component after removing the effective y-offset.
    horizontal_val = x * x + y * y - offset * offset
    S = math.sqrt(horizontal_val) if horizontal_val >= 0 else 0.0
    C = z_wc

    # Step 4: Solve for joint 2 (q2) using geometric relations.
    q2 = math.atan2(S * A - C * B, S * B + C * A)

    # Step 5: Solve for joint 1 (q1) by computing the base angle and compensating for the y-offset.
    # phi corrects for the offset in the horizontal plane.
    phi = math.atan2(offset, S) if S != 0 else math.pi / 2
    q1 = math.atan2(y, x) - phi
    # Normalize q1 to be within the range [-pi, pi].
    q1 = (q1 + math.pi) % (2 * math.pi) - math.pi

    # Step 6: Joint 4 (q4) is not used to affect position in this formulation,
    # and Joint 5 (q5) is redundant for TCP position. Set both to zero.
    q4 = 0.0
    q5 = 0.0

    return (q1, q2, q3, q4, q5)