```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Computes the joint angles for a 5-DOF serial manipulator such that the Tool Center Point (TCP)
    reaches the desired position p = [x, y, z]. The robot parameters are defined as follows:
    
      - Revolute 1: origin at [0, 0, 0], axis = Z.
      - Revolute 2: origin at [0, 0.13585, 0], axis = Y.
      - Revolute 3: origin at [0, -0.1197, 0.425], axis = Y.
      - Revolute 4: origin at [0, 0, 0.39225], axis = Y.
      - Revolute 5: origin at [0, 0.093, 0], axis = Z.
      - TCP: offset [0, 0, 0.09465] relative to the frame of link 5.
    
    The provided sub-chain inverse kinematics (joints 1–4) positions the origin of link 5.
    Therefore, to account for the TCP offset (translation along the Z-axis by 0.09465 m), we first
    subtract that offset from p and then apply the sub-chain IK.
    
    Constants used in the sub-chain IK:
      • 0.10915 m is the effective y-offset derived from the link parameters.
      • 0.346395 and 0.3341625 are constants computed from the manipulator geometry.
    
    Since the TCP translation is along Z, joint 5 (rotation about Z) does not affect TCP position.
    We choose q5 = 0.0 as a convention.
    
    :param p: The target TCP position [x, y, z].
    :return: A tuple (q1, q2, q3, q4, q5) containing joint angles in radians.
    """
    # Unpack desired TCP position.
    x_tcp, y_tcp, z_tcp = p

    # TCP offset along the Z-axis in the last link’s frame.
    tcp_offset = 0.09465  # meters

    # Compute the target for the sub-chain (position of link 5's origin)
    # by subtracting the TCP offset from the z-coordinate.
    x = x_tcp
    y = y_tcp
    z = z_tcp - tcp_offset

    # Compute joint 3 (q3) using the closed-form formula derived from the geometry.
    numerator = x**2 + y**2 + z**2 - 0.346395
    denominator = 0.3341625
    cos_q3 = np.clip(numerator / denominator, -1.0, 1.0)
    q3 = np.arccos(cos_q3)

    # Helper values derived from link lengths.
    A = 0.425 + 0.39225 * np.cos(q3)
    B = 0.39225 * np.sin(q3)

    # Compute an intermediate variable S from the x-y plane consideration.
    S_squared = x**2 + y**2 - 0.10915**2
    # Ensure S_squared is non-negative; if negative (due to rounding), set S = 0.
    S = np.sqrt(S_squared) if S_squared >= 0 else 0.0
    C = z

    # Compute joint 2 angle (q2) using an atan2 formulation.
    q2 = np.arctan2(S * A - C * B, S * B + C * A)

    # Compute an auxiliary angle phi based on the robot’s geometry.
    phi = np.arctan2(0.10915, S) if S != 0 else np.pi / 2

    # Compute joint 1 angle (q1) by subtracting phi from the planar angle.
    q1 = np.arctan2(y, x) - phi
    # Wrap q1 to the range [-pi, pi].
    q1 = (q1 + np.pi) % (2 * np.pi) - np.pi

    # Joint 4 (q4) is chosen as zero to satisfy the sub-chain IK solution.
    q4 = 0.0

    # Joint 5 (q5) has no effect on TCP position because the TCP offset is only translational.
    # Here, we choose q5 = 0 for definiteness.
    q5 = 0.0

    return (q1, q2, q3, q4, q5)
```