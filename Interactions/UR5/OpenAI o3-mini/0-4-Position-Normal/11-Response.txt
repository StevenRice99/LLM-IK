```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" for a 5-DOF serial manipulator.
    
    Manipulator details:
      • Joint 1 (q1): Revolute about Z at [0, 0, 0].
      • Joint 2 (q2): Revolute about Y with translation [0, 0.13585, 0] from joint 1.
      • Joint 3 (q3): Revolute about Y with translation [0, -0.1197, 0.425] from joint 2.
      • Joint 4 (q4): Revolute about Y with translation [0, 0, 0.39225] from joint 3.
      • Joint 5 (q5): Revolute about Z with translation [0, 0.093, 0] from joint 4.
      • TCP:         Translation [0, 0, 0.09465] from joint 5.
      
    When q4 = 0 and q5 = 0, the overall forward kinematics can be written as:
    
      p = Rz(q1) * [ L1*sin(q2) + L2*sin(q2+q3),
                     offset_y,
                     L1*cos(q2) + L2*cos(q2+q3) ]
    
    where:
       L1 = 0.425
       L2 = 0.4869   (derived from 0.425 and the extra translation 0.39225 + 0.09465)
       offset_y = 0.10915   (computed as 0.13585 - 0.1197 + 0.093)
    
    The approach is:
      1. Determine q1 by “removing” the base rotation. Express p in polar coordinates (in x-y)
         where H = sqrt(p_x^2 + p_y^2) and δ = atan2(p_x, p_y), noting that:
         
             -sin(q1)p_x + cos(q1)p_y = H cos(q1 + δ)  must equal offset_y.
             
         Hence, cos(q1 + δ) = offset_y/H, so an acceptable solution is:
         
             q1 = arccos(offset_y/H) - δ.
             
      2. Rotate the target p by –q1 to obtain p′ such that the new y-coordinate is offset_y.
      
      3. Solve the planar 2R inverse kinematics for q2 and q3 in the (p′_x, p_z) plane:
      
             p′_x = L1*sin(q2) + L2*sin(q2+q3)
             p_z   = L1*cos(q2) + L2*cos(q2+q3)
      
         Let r = sqrt(p′_x² + p_z²). Then use the cosine law:
         
             cos(q3) = (r² - L1² - L2²) / (2*L1*L2)
             q3 = acos(cos(q3))
             
         and
      
             q2 = atan2(p′_x, p_z) - atan2(L2*sin(q3), L1 + L2*cos(q3)).
      
      4. For simplicity choose q4 = 0, q5 = 0.
      
    Assumes that the target p is reachable (i.e. |offset_y/H| <= 1).
    """
    # Unpack the target position
    p_x, p_y, p_z = p
    offset_y = 0.10915  # 0.13585 - 0.1197 + 0.093
    
    # Compute horizontal distance in the x-y plane
    H = math.hypot(p_x, p_y)
    
    # If H is extremely small, choose q1 = 0. Otherwise, compute delta.
    if H < 1e-8:
        q1 = 0.0
        delta = 0.0
    else:
        # Represent p_x and p_y in polar form: 
        # p_y = H*cos(delta), p_x = H*sin(delta)
        delta = math.atan2(p_x, p_y)
        # Ensure we clamp the ratio to [-1, 1] for safety.
        ratio = offset_y / H
        ratio = max(min(ratio, 1.0), -1.0)
        q1 = math.acos(ratio) - delta

    # Rotate the target p by -q1 to remove the base rotation:
    cos_q1 = math.cos(q1)
    sin_q1 = math.sin(q1)
    p_prime_x = cos_q1 * p_x + sin_q1 * p_y
    # p_prime_y = -sin_q1 * p_x + cos_q1 * p_y  should equal offset_y (by design)

    # Solve the planar (2R) inverse kinematics in the (p_prime_x, p_z) plane:
    L1 = 0.425
    L2 = 0.4869
    r = math.hypot(p_prime_x, p_z)
    
    # Compute q3 using the cosine law
    cos_q3 = (r**2 - L1**2 - L2**2) / (2 * L1 * L2)
    cos_q3 = max(min(cos_q3, 1.0), -1.0)
    q3 = math.acos(cos_q3)
    
    # Compute q2 using the standard solution for a 2R planar arm
    angle_to_target = math.atan2(p_prime_x, p_z)
    q2 = angle_to_target - math.atan2(L2 * math.sin(q3), L1 + L2 * cos_q3)
    
    # Set q4 and q5 to zero (an acceptable solution assumption)
    q4 = 0.0
    q5 = 0.0

    return (q1, q2, q3, q4, q5)
```