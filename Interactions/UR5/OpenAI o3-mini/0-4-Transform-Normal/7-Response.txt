```python
def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Computes a closed‐form analytical solution for the inverse kinematics of the 5-DOF serial manipulator.
    
    Kinematic summary:
      • Joint 1: Revolute about Z at [0,0,0].
      • Joint 2: Translate [0, 0.13585, 0] then rotate about Y.
      • Joint 3: Translate [0, -0.1197, 0.425] then rotate about Y.
      • Joint 4: Translate [0, 0, 0.39225] then rotate about Y.
      • Joint 5: Translate [0, 0.093, 0] then rotate about Z.
      • TCP: Translate [0, 0, 0.09465].
    
    In a factorized form the forward kinematics are:
         R_total = Rz(q1) · [Ry(q2+q3+q4) · Rz(q5)]
         p_TCP = Rz(q1) * { planar_pos + tcp_offset }.
    
    The fixed translations along Y from joints 2 and 5 (and the negative offset in joint 3)
      yield a constant:
         y_const = 0.13585 - 0.1197 + 0.093 = 0.10915.
    
    In the base XY–plane (before the planar 2R subchain) the rotated target p̄ = Rz(–q1)·p must satisfy:
         p̄_y = -p_x*sin(q1) + p_y*cos(q1) = y_const.
    This equation has two solutions. We select the proper q1 branch by “testing” the decoupled
    orientation (see below).
    
    The desired orientation R_des is built from the provided roll–pitch–yaw (r) using
         R_des = Rz(yaw) · Ry(pitch) · Rx(roll)
    (the typical URDF convention), and then decoupled via
         M = Rz(–q1) · R_des.
    With the structure of the kinematics, one may show that M = Ry(φ)·Rz(q5) where
         φ = q2+q3+q4,
         q5 = atan2( M[1,0], M[1,1] ),
         and φ = atan2( M[0,2], M[2,2] ).

    The effective (planar) 2R arm is then obtained by “removing” the TCP offset along the direction φ.
    If we define:
         L1 = 0.425,    L2 = 0.39225,   L_tcp = 0.09465,
         and compute:
           P_x = p̄_x – L_tcp*sin(φ)
           P_z = p̄_z – L_tcp*cos(φ)
         then the 2R geometry yields (with r2 = √(P_x²+P_z²)):
             cos(q3) = (r2² – L1² – L2²)/(2*L1*L2)
         (with two branches: q3 = ±acos(…)).
         Then,
             q2 = atan2(P_x, P_z) – atan2( L2*sin(q3), L1 + L2*cos(q3) )
         and finally,
             q4 = φ – (q2 + q3).

    This implementation uses branch–selection (by “testing” the reconstructed positions)
    both for q1 (using the extra constraint hidden in the decoupled orientation matrix)
    and for the 2R solution for q3.
    """
    import math
    import numpy as np

    # ----- Parameters from the robot's configuration:
    L1 = 0.425        # Link length from Revolute 3 (translation along z)
    L2 = 0.39225      # Link length from Revolute 4 (translation along z)
    L_tcp = 0.09465   # TCP fixed translation (along z in its local frame)
    # Fixed y-offsets (from revolute 2, 3, 5 origin translations):
    y_const = 0.13585 - 0.1197 + 0.093  # = 0.10915

    # Unpack target TCP position.
    p_x, p_y, p_z = p

    # -------------------------------
    # Step 1. Determine candidate q1 solutions.
    #
    # In the rotated frame p̄ = Rz(-q1)*p, the y-component must equal y_const.
    # Writing p in polar coordinates in the xy–plane:
    r_xy = math.sqrt(p_x**2 + p_y**2)
    # Let theta = atan2(p_y, p_x) so that p_x = r_xy*cos(theta), p_y = r_xy*sin(theta).
    # Then, one may show that:
    #     p̄_y = r_xy * sin(theta - q1) = y_const.
    # So, theta - q1 = arcsin(y_const/r_xy)    OR    theta - q1 = π - arcsin(y_const/r_xy)
    # These lead to two candidate solutions:
    theta = math.atan2(p_y, p_x)
    # Clamp ratio to [-1,1]
    ratio = y_const / r_xy
    ratio = max(-1.0, min(1.0, ratio))
    a = math.asin(ratio)
    q1_candidate1 = theta - a
    q1_candidate2 = theta - (math.pi - a)

    # To pick the proper branch for q1, we use the decoupled orientation.
    def compute_M(q1_val):
        cos_q1 = math.cos(q1_val)
        sin_q1 = math.sin(q1_val)
        # Rz(-q1) matrix:
        Rz_neg_q1 = np.array([[cos_q1, sin_q1, 0],
                              [-sin_q1, cos_q1, 0],
                              [0, 0, 1]])
        # Build desired orientation R_des from r = (roll, pitch, yaw)
        roll, pitch, yaw = r
        R_x = np.array([[1, 0, 0],
                        [0, math.cos(roll), -math.sin(roll)],
                        [0, math.sin(roll), math.cos(roll)]])
        R_y = np.array([[math.cos(pitch), 0, math.sin(pitch)],
                        [0, 1, 0],
                        [-math.sin(pitch), 0, math.cos(pitch)]])
        R_z = np.array([[math.cos(yaw), -math.sin(yaw), 0],
                        [math.sin(yaw), math.cos(yaw), 0],
                        [0, 0, 1]])
        R_des = R_z @ R_y @ R_x
        M_val = Rz_neg_q1 @ R_des
        return M_val

    M1 = compute_M(q1_candidate1)
    M2 = compute_M(q1_candidate2)
    # For the correct decoupling, the (1,2) element of M (row index 1, col index 2)
    # should be (ideally) zero because M = Ry(φ)*Rz(q5) has a zero in that slot.
    err1 = abs(M1[1, 2])
    err2 = abs(M2[1, 2])
    # Pick the candidate that makes |M[1,2]| smaller.
    q1 = q1_candidate1 if err1 <= err2 else q1_candidate2

    # -------------------------------
    # Step 2. Remove the effect of q1.
    #
    # Compute p̄ = Rz(-q1)*p.
    cos_q1 = math.cos(q1)
    sin_q1 = math.sin(q1)
    Rz_neg_q1 = np.array([[cos_q1, sin_q1, 0],
                          [-sin_q1, cos_q1, 0],
                          [0, 0, 1]])
    p_vec = np.array([p_x, p_y, p_z])
    p_bar = Rz_neg_q1 @ p_vec
    p_bar_x, p_bar_y, p_bar_z = p_bar
    # (Ideally, p_bar_y should equal y_const.)

    # -------------------------------
    # Step 3. Decouple orientation.
    #
    # Build R_des again from r (using URDF convention: R_des = Rz(yaw)*Ry(pitch)*Rx(roll))
    roll, pitch, yaw = r
    R_x = np.array([[1, 0, 0],
                    [0, math.cos(roll), -math.sin(roll)],
                    [0, math.sin(roll), math.cos(roll)]])
    R_y = np.array([[math.cos(pitch), 0, math.sin(pitch)],
                    [0, 1, 0],
                    [-math.sin(pitch), 0, math.cos(pitch)]])
    R_z = np.array([[math.cos(yaw), -math.sin(yaw), 0],
                    [math.sin(yaw), math.cos(yaw), 0],
                    [0, 0, 1]])
    R_des = R_z @ R_y @ R_x

    # Decouple the base rotation:
    M = Rz_neg_q1 @ R_des
    # With M = Ry(φ)*Rz(q5), we have:
    phi = math.atan2(M[0, 2], M[2, 2])   # φ = q2+q3+q4
    q5 = math.atan2(M[1, 0], M[1, 1])

    # -------------------------------
    # Step 4. Solve the planar 2R arm.
    #
    # Remove the TCP offset (which is along the tool's local z, i.e., [sin(φ), cos(φ)] in the plane)
    P_x = p_bar_x - L_tcp * math.sin(phi)
    P_z = p_bar_z - L_tcp * math.cos(phi)
    r2 = math.sqrt(P_x**2 + P_z**2)

    # Cosine law for the 2R chain:
    cos_q3 = (r2**2 - L1**2 - L2**2) / (2 * L1 * L2)
    # Clamp for numerical safety.
    cos_q3 = max(-1.0, min(1.0, cos_q3))
    # Two possible solutions:
    q3_candidateA = math.acos(cos_q3)
    q3_candidateB = -q3_candidateA

    # For each candidate, compute q2 (using the geometry) and then q4 = φ - (q2+q3).
    def planar_solution(q3_val):
        q2_val = math.atan2(P_x, P_z) - math.atan2(L2 * math.sin(q3_val), L1 + L2 * math.cos(q3_val))
        q4_val = phi - (q2_val + q3_val)
        # Reconstruct the planar (x,z) from the 2R chain including the TCP offset:
        calc_x = L1 * math.sin(q2_val) + L2 * math.sin(q2_val + q3_val) + L_tcp * math.sin(phi)
        calc_z = L1 * math.cos(q2_val) + L2 * math.cos(q2_val + q3_val) + L_tcp * math.cos(phi)
        err_val = math.sqrt((calc_x - p_bar_x)**2 + (calc_z - p_bar_z)**2)
        return q2_val, q4_val, err_val

    q2_A, q4_A, err_A = planar_solution(q3_candidateA)
    q2_B, q4_B, err_B = planar_solution(q3_candidateB)
    # Choose the branch (A or B) that more nearly reconstructs the rotated position p̄.
    if err_A <= err_B:
        q3 = q3_candidateA
        q2 = q2_A
        q4 = q4_A
    else:
        q3 = q3_candidateB
        q2 = q2_B
        q4 = q4_B

    return (q1, q2, q3, q4, q5)
```