<INSTRUCTIONS>
You are tasked with producing a closed-form analytical solution for the inverse kinematics of the 6 degrees-of-freedom serial manipulator solving for the position of the TCP as detailed in the "DETAILS" section by completing the Python function provided in the "CODE" section. The "Position" and "Orientation" columns represent link coordinates in local space relative to their parent link. The positions are from the "xyz" attribute and the orientations are the "rpy" attribute from each link's "origin" element parsed from the URDF. The "Axis" column in the table represents the rotational axis of the revolute links; return their values in radians and their limits are in radians. Do not write any code to run or test the method, as this will be handled for you. Assume all targets given as inputs to the method will be reachable, and as such do not write code to check if the target is reachable. You may use any methods included in Python, NumPy, and SymPy to write your solution except for any optimization methods. To help you, solutions for sub-chains have been provided in the "EXISTING" sections. Each code solved a sub-link assuming their last link was the target being solved for. You can use these solutions as a starting point to extend for the entire chain. Existing code 1 solved joint 1. Existing code 2 solved joints 1 to 2. Existing code 3 solved joints 1 to 3. Existing code 4 solved joints 1 to 4. Existing code 5 solved joint 2. Existing code 6 solved joints 2 to 3. Existing code 7 solved joints 2 to 4. Existing code 8 solved joint 3. Existing code 9 solved joints 3 to 4. Existing code 10 solved joints 3 to 5. Existing code 11 solved joint 4. Existing code 12 solved joints 4 to 5. Existing code 13 solved joints 4 to 6. Existing code 14 solved joint 5. Existing code 15 solved joints 5 to 6. Existing code 16 solved joint 6. You may respond by either completing the inverse kinematics method or calling either of the two provided functions to help you develop your solution. If you call a function, you will be provided another response and chance to complete the inverse kinematics method. You may only call a single function per response.
</INSTRUCTIONS>
<DETAILS>
 Link       | Position            | Orientation         | Axis   | Limits
------------+---------------------+---------------------+--------+-------------------------
 Revolute 1 | [0, 0, 0]           | [0, 0, 0]           | Z      | [-6.2831853, 6.2831853]
 Revolute 2 | [0, 0.13585, 0]     | [0, 0, 0]           | Y      | [-6.2831853, 6.2831853]
 Revolute 3 | [0, -0.1197, 0.425] | [0, 0, 0]           | Y      | [-6.2831853, 6.2831853]
 Revolute 4 | [0, 0, 0.39225]     | [0, 0, 0]           | Y      | [-6.2831853, 6.2831853]
 Revolute 5 | [0, 0.093, 0]       | [0, 0, 0]           | Z      | [-6.2831853, 6.2831853]
 Revolute 6 | [0, 0, 0.09465]     | [0, 0, 0]           | Y      | [-6.2831853, 6.2831853]
 TCP        | [0, 0.0823, 0]      | [0, 0, 1.570796325] |        |
</DETAILS>
<CODE>
def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
</CODE>
<EXISTING 1>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    theta = math.atan2(-x, y)
    return theta
</EXISTING 1>
<EXISTING 2>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Computes the joint angles needed to reach the given position p.
    
    :param p: The desired position as a tuple (x, y, z).
    :return: A tuple of two floats representing the joint angles theta1 and theta2.
    """
    x_d, y_d, z_d = p
    cos_theta2 = z_d / 0.425
    theta2 = math.acos(cos_theta2)
    A = 0.425 * math.sin(theta2)
    B = 0.01615
    denominator = A ** 2 + B ** 2
    C = (A * x_d + B * y_d) / denominator
    S = (-B * x_d + A * y_d) / denominator
    theta1 = math.atan2(S, C)
    return (theta1, theta2)
</EXISTING 2>
<EXISTING 3>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    k = 0.01615
    k_sq = k ** 2
    numerator_cosθ3 = x ** 2 + y ** 2 + z ** 2 - 0.334746
    cosθ3 = numerator_cosθ3 / 0.3334125
    cosθ3 = max(min(cosθ3, 1.0), -1.0)
    θ3 = math.acos(cosθ3)
    C = 0.425 + 0.39225 * math.cos(θ3)
    D = 0.39225 * math.sin(θ3)
    A_sq = x ** 2 + y ** 2 - k_sq
    A = math.sqrt(A_sq) if A_sq >= 0 else 0.0
    denominator_theta2 = C ** 2 + D ** 2
    sinθ2 = (C * A - D * z) / denominator_theta2
    cosθ2 = (C * z + D * A) / denominator_theta2
    θ2 = math.atan2(sinθ2, cosθ2)
    denominator_theta1 = x ** 2 + y ** 2
    if denominator_theta1 == 0:
        θ1 = 0.0
    else:
        numerator_cosθ1 = A * x + k * y
        numerator_sinθ1 = A * y - k * x
        θ1 = math.atan2(numerator_sinθ1, numerator_cosθ1)
    return (θ1, θ2, θ3)
</EXISTING 3>
<EXISTING 4>
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    numerator = x ** 2 + y ** 2 + z ** 2 - 0.346395
    denominator = 0.3341625
    cos_q3 = numerator / denominator
    cos_q3 = np.clip(cos_q3, -1.0, 1.0)
    q3 = np.arccos(cos_q3)
    A = 0.425 + 0.39225 * np.cos(q3)
    B = 0.39225 * np.sin(q3)
    S_squared = x ** 2 + y ** 2 - 0.10915 ** 2
    S = np.sqrt(S_squared) if S_squared >= 0 else 0.0
    C = z
    numerator_q2 = S * A - C * B
    denominator_q2 = S * B + C * A
    q2 = np.arctan2(numerator_q2, denominator_q2)
    phi = np.arctan2(0.10915, S) if S != 0 else np.pi / 2
    q1 = np.arctan2(y, x) - phi
    q1 = (q1 + np.pi) % (2 * np.pi) - np.pi
    q4 = 0.0
    return (q1, q2, q3, q4)
</EXISTING 4>
<EXISTING 5>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    theta = math.atan2(x, z)
    return theta
</EXISTING 5>
<EXISTING 6>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
    x, y, z = p
    L1 = 0.425
    L2 = 0.39225
    d = math.sqrt(x ** 2 + z ** 2)
    cos_theta2 = (d ** 2 - L1 ** 2 - L2 ** 2) / (2 * L1 * L2)
    theta2 = math.acos(cos_theta2)
    cross_product = x * (L1 + L2 * math.cos(theta2)) - z * (L2 * math.sin(theta2))
    if cross_product < 0:
        theta2 = -theta2
    alpha = math.atan2(x, z)
    beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
    theta1 = alpha - beta
    return (theta1, theta2)
</EXISTING 6>
<EXISTING 7>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
    x, y, z = p
    tcp_offset = 0.093
    x_adj = x
    y_adj = y - tcp_offset
    z_adj = z
    L1 = 0.425
    L2 = 0.39225
    d = math.sqrt(x_adj ** 2 + z_adj ** 2)
    cos_theta2 = (d ** 2 - L1 ** 2 - L2 ** 2) / (2 * L1 * L2)
    theta2 = math.acos(cos_theta2)
    cross_product = x_adj * (L1 + L2 * math.cos(theta2)) - z_adj * (L2 * math.sin(theta2))
    if cross_product < 0:
        theta2 = -theta2
    alpha = math.atan2(x_adj, z_adj)
    beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
    theta1 = alpha - beta
    theta3 = 0
    return (theta1, theta2, theta3)
</EXISTING 7>
<EXISTING 8>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    theta = math.atan2(x, z)
    return theta
</EXISTING 8>
<EXISTING 9>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    theta1 = math.atan2(x, z)
    adjusted_x = x - 0.39225 * math.sin(theta1)
    adjusted_z = z - 0.39225 * math.cos(theta1)
    theta_total = math.atan2(adjusted_x, adjusted_z)
    theta2 = theta_total - theta1
    return (theta1, theta2)
</EXISTING 9>
<EXISTING 10>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    L1 = 0.39225
    L2 = 0.09465
    numerator = x_target ** 2 + z_target ** 2 - L1 ** 2 - L2 ** 2
    denominator = 2 * L1 * L2
    cos_theta2 = numerator / denominator
    theta2 = math.acos(cos_theta2)
    A = L1 + L2 * math.cos(theta2)
    B = L2 * math.sin(theta2)
    denominator_theta1 = A ** 2 + B ** 2
    sin_theta1 = (A * x_target - B * z_target) / denominator_theta1
    cos_theta1 = (B * x_target + A * z_target) / denominator_theta1
    theta1 = math.atan2(sin_theta1, cos_theta1)
    theta3 = 0.0
    return (theta1, theta2, theta3)
</EXISTING 10>
<EXISTING 11>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    px, py, pz = p
    theta = math.atan2(px, pz)
    return theta
</EXISTING 11>
<EXISTING 12>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the links to for reaching position "p".
    """
    px, py, pz = p
    theta2 = 0.0
    theta1 = math.atan2(px, pz)
    return (theta1, theta2)
</EXISTING 12>
<EXISTING 13>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    a = 0.0823
    L1 = 0.093
    L2 = 0.09465
    c2 = (y_target - L1) / a
    if abs(c2) > 1:
        raise ValueError('Target position is unreachable')
    s2 = math.sqrt(1 - c2 ** 2)
    theta2_options = [math.acos(c2), -math.acos(c2)]
    best_solution = None
    min_error = float('inf')
    for theta2 in theta2_options:
        current_s2 = math.sin(theta2)
        A = L2
        B = -a * current_s2
        denominator = A ** 2 + (a * current_s2) ** 2
        if denominator < 1e-10:
            continue
        sin_theta1 = (A * x_target - B * z_target) / denominator
        cos_theta1 = (A * z_target + B * x_target) / denominator
        if abs(sin_theta1 ** 2 + cos_theta1 ** 2 - 1) > 1e-06:
            continue
        theta1 = math.atan2(sin_theta1, cos_theta1)
        x = L2 * sin_theta1 - a * current_s2 * cos_theta1
        z = L2 * cos_theta1 + a * current_s2 * sin_theta1
        error = (x - x_target) ** 2 + (z - z_target) ** 2
        if error < min_error:
            min_error = error
            best_solution = (theta1, theta2, 0.0)
    if best_solution is None:
        raise ValueError('Target position is unreachable')
    return best_solution
</EXISTING 13>
<EXISTING 14>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    theta = math.atan2(y, x)
    return theta
</EXISTING 14>
<EXISTING 15>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    theta1 = math.atan2(-x, y)
    theta2 = 0.0
    return (theta1, theta2)
</EXISTING 15>
<EXISTING 16>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    theta = math.atan2(x, z)
    return theta
</EXISTING 16>