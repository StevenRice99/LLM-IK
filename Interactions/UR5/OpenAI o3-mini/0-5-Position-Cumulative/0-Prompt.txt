<INSTRUCTIONS>
You are tasked with producing a closed-form analytical solution for the inverse kinematics of the 6 degrees-of-freedom serial manipulator solving for the position of the TCP as detailed in the "DETAILS" section by completing the Python function provided in the "CODE" section. The "Position" and "Orientation" columns represent link coordinates in local space relative to their parent link. The positions are from the "xyz" attribute and the orientations are the "rpy" attribute from each link's "origin" element parsed from the URDF. The "Axis" column in the table represents the rotational axis of the revolute links; return their values in radians and their limits are in radians. Do not write any code to run or test the method, as this will be handled for you. Assume all targets given as inputs to the method will be reachable, and as such do not write code to check if the target is reachable. You may use any methods included in Python, NumPy, and SymPy to write your solution except for any optimization methods. To help you, solutions for sub-chains have been provided in the "EXISTING" sections. Each code solved a sub-link assuming their last link was the target being solved for. You can use these solutions as a starting point to extend for the entire chain. Existing code 1 solved joint 1. Existing code 2 solved joints 1 to 2. Existing code 3 solved joints 1 to 3. Existing code 4 solved joints 1 to 4. Existing code 5 solved joint 2. Existing code 6 solved joints 2 to 3. Existing code 7 solved joints 2 to 4. Existing code 8 solved joints 2 to 5. Existing code 9 solved joints 2 to 6. Existing code 10 solved joint 3. Existing code 11 solved joints 3 to 4. Existing code 12 solved joints 3 to 5. Existing code 13 solved joints 3 to 6. Existing code 14 solved joint 4. Existing code 15 solved joints 4 to 5. Existing code 16 solved joints 4 to 6. Existing code 17 solved joint 5. Existing code 18 solved joints 5 to 6. Existing code 19 solved joint 6. You may respond by either completing the inverse kinematics method or calling either of the two provided functions to help you develop your solution. If you call a function, you will be provided another response and chance to complete the inverse kinematics method. You may only call a single function per response.
</INSTRUCTIONS>
<DETAILS>
 Link       | Position            | Orientation         | Axis   | Limits
------------+---------------------+---------------------+--------+-------------------------
 Revolute 1 | [0, 0, 0]           | [0, 0, 0]           | Z      | [-6.2831853, 6.2831853]
 Revolute 2 | [0, 0.13585, 0]     | [0, 0, 0]           | Y      | [-6.2831853, 6.2831853]
 Revolute 3 | [0, -0.1197, 0.425] | [0, 0, 0]           | Y      | [-6.2831853, 6.2831853]
 Revolute 4 | [0, 0, 0.39225]     | [0, 0, 0]           | Y      | [-6.2831853, 6.2831853]
 Revolute 5 | [0, 0.093, 0]       | [0, 0, 0]           | Z      | [-6.2831853, 6.2831853]
 Revolute 6 | [0, 0, 0.09465]     | [0, 0, 0]           | Y      | [-6.2831853, 6.2831853]
 TCP        | [0, 0.0823, 0]      | [0, 0, 1.570796325] |        |
</DETAILS>
<CODE>
def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
</CODE>
<EXISTING 1>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    theta = math.atan2(-x, y)
    return theta
</EXISTING 1>
<EXISTING 2>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Computes the joint angles needed to reach the given position p.
    
    :param p: The desired position as a tuple (x, y, z).
    :return: A tuple of two floats representing the joint angles theta1 and theta2.
    """
    x_d, y_d, z_d = p
    cos_theta2 = z_d / 0.425
    theta2 = math.acos(cos_theta2)
    A = 0.425 * math.sin(theta2)
    B = 0.01615
    denominator = A ** 2 + B ** 2
    C = (A * x_d + B * y_d) / denominator
    S = (-B * x_d + A * y_d) / denominator
    theta1 = math.atan2(S, C)
    return (theta1, theta2)
</EXISTING 2>
<EXISTING 3>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x, y, z = p
    k = 0.01615
    k_sq = k ** 2
    numerator_cosθ3 = x ** 2 + y ** 2 + z ** 2 - 0.334746
    cosθ3 = numerator_cosθ3 / 0.3334125
    cosθ3 = max(min(cosθ3, 1.0), -1.0)
    θ3 = math.acos(cosθ3)
    C = 0.425 + 0.39225 * math.cos(θ3)
    D = 0.39225 * math.sin(θ3)
    A_sq = x ** 2 + y ** 2 - k_sq
    A = math.sqrt(A_sq) if A_sq >= 0 else 0.0
    denominator_theta2 = C ** 2 + D ** 2
    sinθ2 = (C * A - D * z) / denominator_theta2
    cosθ2 = (C * z + D * A) / denominator_theta2
    θ2 = math.atan2(sinθ2, cosθ2)
    denominator_theta1 = x ** 2 + y ** 2
    if denominator_theta1 == 0:
        θ1 = 0.0
    else:
        numerator_cosθ1 = A * x + k * y
        numerator_sinθ1 = A * y - k * x
        θ1 = math.atan2(numerator_sinθ1, numerator_cosθ1)
    return (θ1, θ2, θ3)
</EXISTING 3>
<EXISTING 4>
import numpy as np

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    x, y, z = p
    numerator = x ** 2 + y ** 2 + z ** 2 - 0.346395
    denominator = 0.3341625
    cos_q3 = numerator / denominator
    cos_q3 = np.clip(cos_q3, -1.0, 1.0)
    q3 = np.arccos(cos_q3)
    A = 0.425 + 0.39225 * np.cos(q3)
    B = 0.39225 * np.sin(q3)
    S_squared = x ** 2 + y ** 2 - 0.10915 ** 2
    S = np.sqrt(S_squared) if S_squared >= 0 else 0.0
    C = z
    numerator_q2 = S * A - C * B
    denominator_q2 = S * B + C * A
    q2 = np.arctan2(numerator_q2, denominator_q2)
    phi = np.arctan2(0.10915, S) if S != 0 else np.pi / 2
    q1 = np.arctan2(y, x) - phi
    q1 = (q1 + np.pi) % (2 * np.pi) - np.pi
    q4 = 0.0
    return (q1, q2, q3, q4)
</EXISTING 4>
<EXISTING 5>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    theta = math.atan2(x, z)
    return theta
</EXISTING 5>
<EXISTING 6>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
    x, y, z = p
    L1 = 0.425
    L2 = 0.39225
    d = math.sqrt(x ** 2 + z ** 2)
    cos_theta2 = (d ** 2 - L1 ** 2 - L2 ** 2) / (2 * L1 * L2)
    theta2 = math.acos(cos_theta2)
    cross_product = x * (L1 + L2 * math.cos(theta2)) - z * (L2 * math.sin(theta2))
    if cross_product < 0:
        theta2 = -theta2
    alpha = math.atan2(x, z)
    beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
    theta1 = alpha - beta
    return (theta1, theta2)
</EXISTING 6>
<EXISTING 7>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
    x, y, z = p
    tcp_offset = 0.093
    x_adj = x
    y_adj = y - tcp_offset
    z_adj = z
    L1 = 0.425
    L2 = 0.39225
    d = math.sqrt(x_adj ** 2 + z_adj ** 2)
    cos_theta2 = (d ** 2 - L1 ** 2 - L2 ** 2) / (2 * L1 * L2)
    theta2 = math.acos(cos_theta2)
    cross_product = x_adj * (L1 + L2 * math.cos(theta2)) - z_adj * (L2 * math.sin(theta2))
    if cross_product < 0:
        theta2 = -theta2
    alpha = math.atan2(x_adj, z_adj)
    beta = math.atan2(L2 * math.sin(theta2), L1 + L2 * math.cos(theta2))
    theta1 = alpha - beta
    theta3 = 0
    return (theta1, theta2, theta3)
</EXISTING 7>
<EXISTING 8>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Analytical closed–form inverse kinematics for a 4-DOF serial manipulator.
    
    The robot chain (with all lengths in meters) is defined by:
      • Revolute 1 (axis Y) at the base.
      • A fixed translation from base to joint2: [0, -0.1197, 0.425]
      • Revolute 2 about Y.
      • A fixed translation from joint2 to joint3: [0, 0, 0.39225]
      • Revolute 3 about Y.
      • A fixed translation from joint3 to joint4: [0, 0.093, 0]  
         (affecting only y)
      • Revolute 4 about Z.
      • A fixed translation from joint4 to TCP: [0, 0, 0.09465]
      
    In the x–z plane only the translations along z matter.
    If we “project” the kinematics into the x–z plane the effective chain is:
         x = L1*sin(θ1) + L2*sin(θ1+θ2) + L3*sin(θ1+θ2+θ3)
         z = L1*cos(θ1) + L2*cos(θ1+θ2) + L3*cos(θ1+θ2+θ3)
    with:
         L1 = 0.425      (from [0, -0.1197, 0.425])
         L2 = 0.39225    (from [0, 0, 0.39225])
         L3 = 0.09465    (from TCP translation [0, 0, 0.09465])
    and the fixed y coordinate is:
         y = -0.1197 + 0.093 = -0.0267.
    
    Note: These three joints (rotating about Y) yield a redundant (3R) system in the plane.
    We resolve the redundancy by picking the end–effector “orientation” in the x–z plane,
    T = θ1 + θ2 + θ3, from one of two natural choices:
         T = psi   or   T = psi + π,
    where psi = atan2(x, z). For each choice the 2R sub–chain from joints 1 and 2
    (which must reach the “wrist center” defined by subtracting L3 in the T direction)
    is solved in closed form.
    Finally joint 4 does not affect position so we set it to 0.
    
    The algorithm below computes both candidate solutions (using the two choices for T and
    the two solutions from the 2R IK of the wrist center) and selects the one whose forward
    kinematics best matches the target p.
    
    :param p: The target TCP position as (x, y, z). (For valid targets y should equal -0.0267.)
    :return: A tuple (θ1, θ2, θ3, θ4) in radians.
    """
    x, y, z = p
    L1 = 0.425
    L2 = 0.39225
    L3 = 0.09465

    def fk_planar(theta1, theta2, theta3):
        x_fk = L1 * math.sin(theta1) + L2 * math.sin(theta1 + theta2) + L3 * math.sin(theta1 + theta2 + theta3)
        z_fk = L1 * math.cos(theta1) + L2 * math.cos(theta1 + theta2) + L3 * math.cos(theta1 + theta2 + theta3)
        return (x_fk, -0.0267, z_fk)
    psi = math.atan2(x, z)
    T_options = [psi, psi + math.pi]
    candidates = []
    for T in T_options:
        x_w = x - L3 * math.sin(T)
        z_w = z - L3 * math.cos(T)
        r_w = math.sqrt(x_w ** 2 + z_w ** 2)
        cos_beta = (r_w ** 2 - L1 ** 2 - L2 ** 2) / (2 * L1 * L2)
        cos_beta = max(-1.0, min(1.0, cos_beta))
        for sign in (1, -1):
            beta = sign * math.acos(cos_beta)
            phi_w = math.atan2(x_w, z_w)
            delta = math.atan2(L2 * math.sin(beta), L1 + L2 * math.cos(beta))
            theta1_candidate = phi_w - delta
            theta2_candidate = beta
            theta3_candidate = T - (theta1_candidate + theta2_candidate)
            x_fk, _, z_fk = fk_planar(theta1_candidate, theta2_candidate, theta3_candidate)
            err = math.hypot(x_fk - x, z_fk - z)
            candidates.append((err, theta1_candidate, theta2_candidate, theta3_candidate))
    best = min(candidates, key=lambda tup: tup[0])
    theta1, theta2, theta3 = (best[1], best[2], best[3])
    theta4 = 0.0

    def normalize(angle):
        while angle > math.pi:
            angle -= 2 * math.pi
        while angle < -math.pi:
            angle += 2 * math.pi
        return angle
    theta1 = normalize(theta1)
    theta2 = normalize(theta2)
    theta3 = normalize(theta3)
    theta4 = normalize(theta4)
    return (theta1, theta2, theta3, theta4)
</EXISTING 8>
<EXISTING 9>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Analytical closed–form inverse kinematics for a 5-DOF serial manipulator.
    
    Robot chain (all lengths in meters) and fixed translations come from:
      • Joint1 (revolute about Y) at origin.
      • Translation to Joint2: [0, -0.1197, 0.425]
      • Joint2: revolute about Y.
      • Translation to Joint3: [0, 0, 0.39225]
      • Joint3: revolute about Y.
      • Translation to Joint4: [0, 0.093, 0]
      • Joint4: revolute about Z.
      • Translation to Joint5: [0, 0, 0.09465]
      • Joint5: revolute about Y.
      • Translation to TCP: [0, 0.0823, 0]
    
    In this formulation, only joints 1-3 and joint4 affect the TCP position.
    In particular, when one derives the forward kinematics the TCP coordinates (x, y, z)
    come out as follows:
      S = q1 + q2 + q3   (sum of the three Y–axis rotations)
      x = L1 * sin(q1) + L2 * sin(q1+q2) + L3 * sin(S) - 0.0823 * sin(q4) * cos(S)
      z = L1 * cos(q1) + L2 * cos(q1+q2) + L3 * cos(S) + 0.0823 * sin(q4) * sin(S)
      y = -0.1197 + 0 + 0.093 + 0.0823*cos(q4)
        = -0.0267 + 0.0823*cos(q4)
    where
      L1 = 0.425      (translation along z in joint2)
      L2 = 0.39225    (translation along z in joint3)
      L3 = 0.09465    (translation along z from joint5 to TCP)
      
    The key observation is that the vertical (y) coordinate depends only on q4:
         y = -0.0267 + 0.0823*cos(q4)
    so we can solve for q4 immediately from the target y.
    Then, substituting d = 0.0823*sin(q4), one can show that the x and z equations become:
         x = P + L_eff * sin(T)
         z = Q + L_eff * cos(T)
    where
         P = L1*sin(q1) + L2*sin(q1+q2)
         Q = L1*cos(q1) + L2*cos(q1+q2)
         L_eff = sqrt(L3**2 + d**2)
         φ = atan2(d, L3)
         T = S - φ   with S = q1+q2+q3.
    A natural candidate for T is obtained from the target horizontal direction.
    Let ψ = atan2(x, z). Then one may set a candidate T = ψ (or ψ + π),
    and hence S = T + φ.
    Finally, the remaining 2R-subchain (joints 1 and 2) must produce a wrist center W,
    defined by:
         W = [ x - L_eff*sin(T),  z - L_eff*cos(T) ]
    The 2R IK yields q1 and q2 (with two solutions) and then q3 = S – (q1+q2).
    Joint5 is redundant for position, so we set it to zero.
    
    This function searches over the candidate branches for q4 (the two solutions
    from the y–equation) and for T (using ψ and ψ+π) and for the two possible
    2R IK solutions, then returns the candidate whose forward kinematics best
    matches the target.
    
    :param p: The target TCP position as (x, y, z).
              Note: p must be reachable. (y is not forced to a single value.)
    :return: A tuple (q1, q2, q3, q4, q5) in radians.
    """
    L1 = 0.425
    L2 = 0.39225
    L3 = 0.09465
    y_offset = -0.1197 + 0.093
    tcp_y_offset = 0.0823
    x_target, y_target, z_target = p

    def normalize(angle):
        while angle > math.pi:
            angle -= 2.0 * math.pi
        while angle < -math.pi:
            angle += 2.0 * math.pi
        return angle

    def fk(q1, q2, q3, q4):
        S = q1 + q2 + q3
        d = 0.0823 * math.sin(q4)
        x_fk = L1 * math.sin(q1) + L2 * math.sin(q1 + q2) + L3 * math.sin(S) - d * math.cos(S)
        z_fk = L1 * math.cos(q1) + L2 * math.cos(q1 + q2) + L3 * math.cos(S) + d * math.sin(S)
        y_fk = y_offset + tcp_y_offset * math.cos(q4)
        return (x_fk, y_fk, z_fk)
    C = (y_target - y_offset) / tcp_y_offset
    C = max(min(C, 1.0), -1.0)
    q4_candidates = [math.acos(C), -math.acos(C)]
    psi = math.atan2(x_target, z_target)
    best_error = float('inf')
    best_solution = None
    for q4_candidate in q4_candidates:
        d = tcp_y_offset * math.sin(q4_candidate)
        L_eff = math.sqrt(L3 ** 2 + d ** 2)
        phi = math.atan2(d, L3)
        for T_candidate in [psi, psi + math.pi]:
            S = T_candidate + phi
            W_x = x_target - L_eff * math.sin(T_candidate)
            W_z = z_target - L_eff * math.cos(T_candidate)
            r_w = math.hypot(W_x, W_z)
            if r_w > L1 + L2 or r_w < abs(L1 - L2):
                continue
            cos_q2 = (r_w ** 2 - L1 ** 2 - L2 ** 2) / (2 * L1 * L2)
            cos_q2 = max(min(cos_q2, 1.0), -1.0)
            for sign in [1, -1]:
                q2_candidate = sign * math.acos(cos_q2)
                delta = math.atan2(L2 * math.sin(q2_candidate), L1 + L2 * math.cos(q2_candidate))
                theta_w = math.atan2(W_x, W_z)
                q1_candidate = theta_w - delta
                q3_candidate = S - (q1_candidate + q2_candidate)
                x_fk, y_fk, z_fk = fk(q1_candidate, q2_candidate, q3_candidate, q4_candidate)
                error = math.sqrt((x_fk - x_target) ** 2 + (y_fk - y_target) ** 2 + (z_fk - z_target) ** 2)
                if error < best_error:
                    best_error = error
                    best_solution = (q1_candidate, q2_candidate, q3_candidate, q4_candidate, 0.0)
    if best_solution is None:
        raise ValueError('No valid IK solution found for the input target position.')
    q1, q2, q3, q4, q5 = best_solution
    q1 = normalize(q1)
    q2 = normalize(q2)
    q3 = normalize(q3)
    q4 = normalize(q4)
    q5 = normalize(q5)
    return (q1, q2, q3, q4, q5)
</EXISTING 9>
<EXISTING 10>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    theta = math.atan2(x, z)
    return theta
</EXISTING 10>
<EXISTING 11>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    theta1 = math.atan2(x, z)
    adjusted_x = x - 0.39225 * math.sin(theta1)
    adjusted_z = z - 0.39225 * math.cos(theta1)
    theta_total = math.atan2(adjusted_x, adjusted_z)
    theta2 = theta_total - theta1
    return (theta1, theta2)
</EXISTING 11>
<EXISTING 12>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    L1 = 0.39225
    L2 = 0.09465
    numerator = x_target ** 2 + z_target ** 2 - L1 ** 2 - L2 ** 2
    denominator = 2 * L1 * L2
    cos_theta2 = numerator / denominator
    theta2 = math.acos(cos_theta2)
    A = L1 + L2 * math.cos(theta2)
    B = L2 * math.sin(theta2)
    denominator_theta1 = A ** 2 + B ** 2
    sin_theta1 = (A * x_target - B * z_target) / denominator_theta1
    cos_theta1 = (B * x_target + A * z_target) / denominator_theta1
    theta1 = math.atan2(sin_theta1, cos_theta1)
    theta3 = 0.0
    return (theta1, theta2, theta3)
</EXISTING 12>
<EXISTING 13>
def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Computes one valid closed‐form inverse kinematics solution for the 4 DOF serial manipulator.
    
    The robot’s geometry (with units in meters and angles in radians) is given by:
      - Joint 1 (Revolute): at [0, 0, 0], rotation about Y.
      - Translation from Joint 1 to Joint 2: (0, 0, L1) with L1 = 0.39225.
      - Joint 2 (Revolute): at [0, 0, L1], rotation about Y.
      - Translation from Joint 2 to Joint 3: (0, L2, 0) with L2 = 0.093.
      - Joint 3 (Revolute): at [0, L2, 0], rotation about Z.
      - Translation from Joint 3 to Joint 4: (0, 0, L3) with L3 = 0.09465.
      - Joint 4 (Revolute): at [0, 0, L3], rotation about Y (redundant for position; set to zero).
      - TCP: offset (0, L4, 0), with L4 = 0.0823.
      
    In our chain the only link that “lifts” the TCP in Y is the combination of the fixed
    offset L2 and the effect of joint 3 via the TCP offset. In fact, one may show that:
    
         p_y = L2 + L4*cos(theta3)
    
    so that theta3 is determined (up to a cosine ambiguity) by:
    
         cos(theta3) = (p_y - L2)/L4.
    
    Because cos(theta3) = cos(theta3 + 2π) the solution for theta3 can be written in two ways.
    Experience with this manipulator (and comparing to a validated IK) shows that the “correct”
    branch for theta3 is not always the one given directly by –acos((p_y – L2)/L4). One can
    obtain the alternative branch by subtracting 2π.
    
    Meanwhile, the X–Z coordinates come from both the “shoulder” joints and the offset produced
    by joint 3 and the TCP. In our derivation the final TCP position is given by:
    
         p_x = L1*sin(theta1) + L3*sin(phi) - L4*sin(theta3)*cos(phi)
         p_y = L2 + L4*cos(theta3)
         p_z = L1*cos(theta1) + L3*cos(phi) + L4*sin(theta3)*sin(phi)
    
    where we have defined:
         phi = theta1 + theta2.
    
    The term L1 comes from the fixed translation from Joint 1 to Joint 2 (along Z in the base),
    and the (phi‐dependent) contributions from joints 2 and 3 appear explicitly.
    
    Our approach is to:
      (a) Solve p_y = L2 + L4*cos(theta3) for theta3. Because cos(theta3) is even this
          yields two candidates:
             candidate 1: theta3 = -acos((p_y - L2) / L4)
             candidate 2: theta3 =  acos((p_y - L2) / L4) - 2π
      (b) For a given choice of theta3 (which fixes B = L4*sin(theta3)), the X–Z equations can be
          rearranged to an equation in the sum phi = theta1 + theta2. In fact one obtains:
    
             (p_x - (A*sin(phi) - B*cos(phi)))² + (p_z - (A*cos(phi) + B*sin(phi)))² = L1²,
    
          where A is L3 and B is L4*sin(theta3). This equation can be rearranged to:
    
             (p_x²+p_z² + A²+B² - L1²)/2 = (p_x*A + p_z*B)*sin(phi) + (p_z*A - p_x*B)*cos(phi).
    
          Writing R0 = sqrt((p_x*A+p_z*B)² + (p_z*A-p_x*B)²) and a phase delta = atan2(p_z*A - p_x*B, 
          p_x*A + p_z*B), we have
             sin(phi + delta) = ((p_x²+p_z² + A²+B² - L1²)/(2*R0)).
    
      (c) This equation (for phi) has two solutions, and for each one theta1 is recovered from:
    
             theta1 = atan2( p_x - (A*sin(phi) - B*cos(phi)),
                             p_z - (A*cos(phi) + B*sin(phi)) )
    
          then theta2 = phi - theta1.
    
      (d) Finally, we “test” the two choices for theta3 and the two corresponding solutions for phi by 
          recomputing the forward position (using the simplified forward equations above) and selecting the 
          candidate that minimizes the error.
    
    Joint 4 is redundant with respect to position so we set theta4 = 0.
    
    This function returns one valid solution (all angles in radians).
    """
    import math
    L1 = 0.39225
    L2 = 0.093
    L3 = 0.09465
    L4 = 0.0823
    p_x, p_y, p_z = p
    cos_val = (p_y - L2) / L4
    cos_val = max(-1.0, min(1.0, cos_val))
    theta3_candidate1 = -math.acos(cos_val)
    theta3_candidate2 = math.acos(cos_val) - 2 * math.pi

    def forward_pos(theta1, theta2, theta3):
        phi = theta1 + theta2
        x_calc = L1 * math.sin(theta1) + L3 * math.sin(phi) - L4 * math.sin(theta3) * math.cos(phi)
        y_calc = L2 + L4 * math.cos(theta3)
        z_calc = L1 * math.cos(theta1) + L3 * math.cos(phi) + L4 * math.sin(theta3) * math.sin(phi)
        return (x_calc, y_calc, z_calc)
    A = L3
    solutions = []
    for theta3 in [theta3_candidate1, theta3_candidate2]:
        B = L4 * math.sin(theta3)
        R0 = math.sqrt((p_x * A + p_z * B) ** 2 + (p_z * A - p_x * B) ** 2)
        if R0 == 0:
            continue
        C = (p_x ** 2 + p_z ** 2 + A ** 2 + B ** 2 - L1 ** 2) / 2.0
        ratio = C / R0
        ratio = max(-1.0, min(1.0, ratio))
        try:
            alpha = math.asin(ratio)
        except Exception:
            alpha = 0.0
        delta = math.atan2(p_z * A - p_x * B, p_x * A + p_z * B)
        phi_candidates = [alpha - delta, math.pi - alpha - delta]
        for phi in phi_candidates:
            num = p_x - (A * math.sin(phi) - B * math.cos(phi))
            den = p_z - (A * math.cos(phi) + B * math.sin(phi))
            theta1_candidate = math.atan2(num, den)
            theta2_candidate = phi - theta1_candidate
            x_calc, y_calc, z_calc = forward_pos(theta1_candidate, theta2_candidate, theta3)
            error = math.sqrt((x_calc - p_x) ** 2 + (y_calc - p_y) ** 2 + (z_calc - p_z) ** 2)
            solutions.append((error, theta1_candidate, theta2_candidate, theta3, 0.0))
    if solutions:
        best = min(solutions, key=lambda s: s[0])
        return (best[1], best[2], best[3], best[4])
    else:
        return (0.0, 0.0, 0.0, 0.0)
</EXISTING 13>
<EXISTING 14>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    px, py, pz = p
    theta = math.atan2(px, pz)
    return theta
</EXISTING 14>
<EXISTING 15>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the links to for reaching position "p".
    """
    px, py, pz = p
    theta2 = 0.0
    theta1 = math.atan2(px, pz)
    return (theta1, theta2)
</EXISTING 15>
<EXISTING 16>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float]:
    x_target, y_target, z_target = p
    a = 0.0823
    L1 = 0.093
    L2 = 0.09465
    c2 = (y_target - L1) / a
    if abs(c2) > 1:
        raise ValueError('Target position is unreachable')
    s2 = math.sqrt(1 - c2 ** 2)
    theta2_options = [math.acos(c2), -math.acos(c2)]
    best_solution = None
    min_error = float('inf')
    for theta2 in theta2_options:
        current_s2 = math.sin(theta2)
        A = L2
        B = -a * current_s2
        denominator = A ** 2 + (a * current_s2) ** 2
        if denominator < 1e-10:
            continue
        sin_theta1 = (A * x_target - B * z_target) / denominator
        cos_theta1 = (A * z_target + B * x_target) / denominator
        if abs(sin_theta1 ** 2 + cos_theta1 ** 2 - 1) > 1e-06:
            continue
        theta1 = math.atan2(sin_theta1, cos_theta1)
        x = L2 * sin_theta1 - a * current_s2 * cos_theta1
        z = L2 * cos_theta1 + a * current_s2 * sin_theta1
        error = (x - x_target) ** 2 + (z - z_target) ** 2
        if error < min_error:
            min_error = error
            best_solution = (theta1, theta2, 0.0)
    if best_solution is None:
        raise ValueError('Target position is unreachable')
    return best_solution
</EXISTING 16>
<EXISTING 17>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    theta = math.atan2(y, x)
    return theta
</EXISTING 17>
<EXISTING 18>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A tuple of the values to set the joints to for reaching position "p".
    """
    x, y, z = p
    theta1 = math.atan2(-x, y)
    theta2 = 0.0
    return (theta1, theta2)
</EXISTING 18>
<EXISTING 19>
import math

def inverse_kinematics(p: tuple[float, float, float]) -> float:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: The value to set the link to for reaching position "p".
    """
    x, y, z = p
    theta = math.atan2(x, z)
    return theta
</EXISTING 19>