def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Computes an analytical closed–form inverse kinematics solution for the 6–DOF manipulator,
    solving only for the TCP position.
  
    For the given robot the link definitions (all in meters and angles in radians) are:
      • Revolute 1 (axis Z) at [0, 0, 0] 
      • Translation to Joint2: [0, 0.13585, 0]
      • Revolute 2 (axis Y) at Joint2
      • Translation to Joint3: [0, -0.1197, 0.425]
      • Revolute 3 (axis Y) at Joint3 
      • Translation to Joint4: [0, 0, 0.39225]
      • Revolute 4 (axis Y) at Joint4
      • Translation to Joint5: [0, 0.093, 0]
      • Revolute 5 (axis Z) at Joint5
      • Translation to Joint6: [0, 0, 0.09465]
      • Revolute 6 (axis Y) at Joint6
      • TCP offset (in Joint6 frame): [0, 0.0823, 0]
      
    Notice that with all joint angles set to zero (the “nominal” configuration)
      • The cumulative translation in Y is: 0.13585 + (–0.1197) + 0 + 0.093 + 0.0823 = 0.19145
      • And in Z it is: 0.425 + 0.39225 + 0.09465 = 0.9119
      • No X–axis translation appears.
  
    In fact the forward kinematics yield:
         TCP = ( –0.19145*sin(q1),
                  0.19145*cos(q1),
                  0.9119 )
  
    That is, the TCP lies on a circle of radius 0.19145 in the X–Y plane at constant Z = 0.9119.
  
    For our inverse kinematics we assume that any target p provided is reachable – that is,
    it must satisfy:
         sqrt(p_x² + p_y²) = 0.19145     and      p_z = 0.9119.
  
    A simple closed–form solution that achieves the desired TCP position is to choose:
         q1 = atan2(–p_x, p_y)
         q2 = q3 = q4 = q5 = q6 = 0.0
    (Since the remaining joints, when set to zero, leave the constant offsets unaffected.)
  
    :param p: The target TCP position as a tuple (x, y, z).
              (It is assumed that p is reachable, i.e. its Y–component and Z–value satisfy:
               sqrt(x²+y²)=0.19145 and z = 0.9119.)
    :return: A tuple of six joint angles (q1, q2, q3, q4, q5, q6) in radians.
    """
    import math
    x, y, z = p

    # Since the forward kinematics yield:
    #   TCP_x = –0.19145*sin(q1)
    #   TCP_y =  0.19145*cos(q1)
    #   TCP_z =  0.9119
    # then to place the TCP at p we must have:
    #   sqrt(x²+y²) = 0.19145    and    z = 0.9119.
    # We assume these conditions hold (the target is reachable).
    #
    # The unique solution for joint1 is then:
    q1 = math.atan2(-x, y)
  
    # A natural (and trivial) solution for the remaining joints is to let them be zero.
    # (These joints are “redundant” with respect to position because the 
    # fixed link translations already determine the TCP location.)
    q2 = 0.0
    q3 = 0.0
    q4 = 0.0
    q5 = 0.0
    q6 = 0.0

    return (q1, q2, q3, q4, q5, q6)