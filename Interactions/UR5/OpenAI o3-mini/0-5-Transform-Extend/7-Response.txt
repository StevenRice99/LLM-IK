```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Computes a closed–form analytical inverse kinematics solution for the 6-DOF robot.

    The robot is defined by:
      • Joint 1: revolute about Z at [0, 0, 0].
      • Joint 2: fixed translation [0, 0.13585, 0] then revolute about Y.
      • Joint 3: fixed translation [0, -0.1197, 0.425] then revolute about Y.
      • Joint 4: fixed translation [0, 0, 0.39225] then revolute about Y.
      • Joint 5: fixed translation [0, 0.093, 0] then revolute about Z.
      • Joint 6: fixed translation [0, 0, 0.09465] then revolute about Y.
      • TCP: fixed translation [0, 0.0823, 0] with an extra rotation Rz(1.570796325).

    In many 6-DOF designs a decoupling is possible by “removing” the wrist offset.
    Here the nominal (all–zero) forward kinematics give:
         • Joint4 (end of “arm”): [0, 0.01615, 0.81725]
         • TCP: [0, 0.19145, 0.9119]
    Hence, the fixed wrist offset is:
         p_wrist_offset = [0, 0.1753, 0.09465]
    and a constant combining some fixed Y translations is:
         y_const = 0.13585 – 0.1197 + 0.093 = 0.10915.
    
    We first use the position and (decoupled) orientation to solve a 5-DOF subchain.
    (The 5-DOF analysis yields an “arm” solution with
         R_arm = Rz(q1) · [Ry(q2+q3+q4) · Rz(q5)]
         p_TCP  = Rz(q1) · { planar_target + L_tcp_offset }
    where L_tcp = 0.09465.)
    
    Then we “close the loop” to solve for the wrist joint (q6).
    Writing the full kinematics as:
         R_total = R_arm · [Rz(q5)·Ry(q6)] · R_tcp_offset
    we can define:
         A = R_armᵀ · R_des · (R_tcp_offset)ᵀ = Rz(q5) · Ry(q6)
    from which we extract:
         q6 = atan2( A[0,2], A[0,0] )
         q5 = atan2( A[1,0], A[1,1] ).
    
    Note:
      • When computing q1, we use the original TCP position p and enforce
            (Rz(–q1)*p)[1] = y_const,
        which has two solutions; we choose the branch that “decouples” the desired orientation.
      • The geometry of the planar (2R) problem is solved to obtain q2 & q3 and then q4 is obtained by q4 = phi – (q2+q3),
        with phi = q2+q3+q4 deduced from the decoupled orientation.
      • Finally, the wrist (joints 5–6) is isolated via the residual rotation.
    
    :param p: Desired TCP position [x, y, z].
    :param r: Desired TCP orientation (roll, pitch, yaw) in radians.
    :return: Joint angles (q1, q2, q3, q4, q5, q6) in radians.
    """
    # ----- Robot constants extracted from the URDF -----
    L1 = 0.425
    L2 = 0.39225
    L_tcp = 0.09465  # translation associated with joint 6
    # The constant y-offset that appears when following the chain (from joints 2,3,5) is:
    y_const = 0.13585 - 0.1197 + 0.093  # = 0.10915

    # Fixed rotation due to the TCP element (Rz(1.570796325))
    angle_tcp = 1.570796325
    R_tcp_offset = np.array([[math.cos(angle_tcp), -math.sin(angle_tcp), 0],
                             [math.sin(angle_tcp),  math.cos(angle_tcp), 0],
                             [0,                    0,                   1]])

    # ----- Step 0. Compute desired orientation from roll, pitch, yaw -----
    # URDF convention: R_des = Rz(yaw) * Ry(pitch) * Rx(roll)
    roll, pitch, yaw = r
    R_x = np.array([[1, 0, 0],
                    [0, math.cos(roll), -math.sin(roll)],
                    [0, math.sin(roll), math.cos(roll)]])
    R_y = np.array([[math.cos(pitch), 0, math.sin(pitch)],
                    [0, 1, 0],
                    [-math.sin(pitch), 0, math.cos(pitch)]])
    R_z = np.array([[math.cos(yaw), -math.sin(yaw), 0],
                    [math.sin(yaw),  math.cos(yaw), 0],
                    [0,             0,              1]])
    R_des = R_z.dot(R_y).dot(R_x)

    # ----- Step 1. Solve for q1 -----
    p_x, p_y, p_z = p
    r_xy = math.sqrt(p_x**2 + p_y**2)
    # Compute the polar angle of the TCP projection
    theta = math.atan2(p_y, p_x) if r_xy >= 1e-6 else 0.0
    ratio = y_const / r_xy if r_xy >= 1e-6 else 0.0
    ratio = max(-1.0, min(1.0, ratio))
    a_angle = math.asin(ratio)
    # Two candidate solutions:
    q1_cand1 = theta - a_angle
    q1_cand2 = theta - (math.pi - a_angle)
    # Normalize candidates to (–pi, pi]
    def wrap_angle(angle):
        return (angle + math.pi) % (2 * math.pi) - math.pi
    q1_cand1 = wrap_angle(q1_cand1)
    q1_cand2 = wrap_angle(q1_cand2)
    # Use a decoupling measure based on the orientation residual.
    def error_metric(q1_val):
        cos_q1 = math.cos(q1_val)
        sin_q1 = math.sin(q1_val)
        Rz_neg = np.array([[cos_q1, sin_q1, 0],
                           [-sin_q1, cos_q1, 0],
                           [0, 0, 1]])
        M_val = Rz_neg.dot(R_des)
        return abs(M_val[1, 2])
    err1 = error_metric(q1_cand1)
    err2 = error_metric(q1_cand2)
    # Select the candidate whose decoupled orientation is “closer”
    q1 = q1_cand1 if err1 <= err2 else q1_cand2

    # ----- Step 2. Solve the 5-DOF (arm) subproblem for q2, q3, q4, q5 -----
    cos_q1 = math.cos(q1)
    sin_q1 = math.sin(q1)
    Rz_neg_q1 = np.array([[cos_q1, sin_q1, 0],
                          [-sin_q1, cos_q1, 0],
                          [0, 0, 1]])
    # Determine the decoupled TCP position in the rotated (q1-eliminated) frame.
    p_bar = Rz_neg_q1.dot(np.array(p))
    p_bar_x, p_bar_y, p_bar_z = p_bar
    # The decoupled orientation residual:
    M = Rz_neg_q1.dot(R_des)
    # Define φ = q2 + q3 + q4; it can be determined from the (0,2) and (2,2) elements.
    phi = math.atan2(M[0, 2], M[2, 2])
    # Remove the effect of the wrist translation along the direction φ.
    P_x = p_bar_x - L_tcp * math.sin(phi)
    P_z = p_bar_z - L_tcp * math.cos(phi)
    # Solve the effective 2R geometry (planar) for joints q2 and q3.
    r2 = math.sqrt(P_x**2 + P_z**2)
    cos_q3 = (r2**2 - L1**2 - L2**2) / (2 * L1 * L2)
    cos_q3 = max(-1.0, min(1.0, cos_q3))
    q3_candidate_A = math.acos(cos_q3)
    q3_candidate_B = -q3_candidate_A
    def planar_solution(q3_val):
        q2_val = math.atan2(P_x, P_z) - math.atan2(L2 * math.sin(q3_val),
                                                     L1 + L2 * math.cos(q3_val))
        q4_val = phi - (q2_val + q3_val)
        # Reconstruct to check error in the planar position.
        calc_P_x = L1 * math.sin(q2_val) + L2 * math.sin(q2_val + q3_val)
        calc_P_z = L1 * math.cos(q2_val) + L2 * math.cos(q2_val + q3_val)
        err_val = math.sqrt((calc_P_x - P_x)**2 + (calc_P_z - P_z)**2)
        return (q2_val, q4_val, err_val)
    q2_A, q4_A, err_A = planar_solution(q3_candidate_A)
    q2_B, q4_B, err_B = planar_solution(q3_candidate_B)
    if err_A <= err_B:
        q3 = q3_candidate_A
        q2 = q2_A
        q4 = q4_A
    else:
        q3 = q3_candidate_B
        q2 = q2_B
        q4 = q4_B

    # ----- Step 3. Solve for the wrist joint q6 -----
    # For the 6-DOF chain the complete forward rotation is:
    #   R_total = Rz(q1) · [Ry(q2+q3+q4) · Rz(q5) · Ry(q6)] · R_tcp_offset.
    # Our 5-DOF solution so far yields:
    #   R_arm = Rz(q1) · Ry(q2+q3+q4)
    # To “close” the loop we write:
    #   R_des = R_arm · [Rz(q5) · Ry(q6)] · R_tcp_offset
    # and so
    #   A = R_armᵀ · R_des · (R_tcp_offset)ᵀ = Rz(q5) · Ry(q6).
    #
    # Compute R_arm:
    phi_arm = q2 + q3 + q4
    Rz_q1 = np.array([[math.cos(q1), -math.sin(q1), 0],
                      [math.sin(q1),  math.cos(q1), 0],
                      [0, 0, 1]])
    Ry_phi = np.array([[math.cos(phi_arm), 0, math.sin(phi_arm)],
                       [0, 1, 0],
                       [-math.sin(phi_arm), 0, math.cos(phi_arm)]])
    R_arm = Rz_q1.dot(Ry_phi)
    # Compute the residual wrist rotation.
    A = R_arm.T.dot(R_des).dot(R_tcp_offset.T)
    # Factor A into Rz(q5) · Ry(q6):
    q6 = math.atan2(A[0, 2], A[0, 0])
    q5 = math.atan2(A[1, 0], A[1, 1])
    
    return (q1, q2, q3, q4, q5, q6)
```