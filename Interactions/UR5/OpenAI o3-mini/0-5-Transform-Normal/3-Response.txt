def inverse_kinematics(p: tuple[float, float, float], 
                       r: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    
    This solution uses a closed‐form inverse kinematics procedure developed for a 6 DOF serial
    manipulator with the following structure:
      • Joint 1 rotates about Z.
      • Joints 2 and 3 rotate about Y and form the “arm” (with constant offset in y computed from
        the relative translation from link1 to link2 and the fixed y-offset in the link from joint2 to joint3).
      • Joints 4, 5, and 6 form a spherical wrist with rotation about Y, then Z, then Y.
      • A fixed TCP transform is applied after joint 6 (with translation and a fixed rotation).
      
    The table of link origins (positions and rpy) provided is used to extract the constant offsets:
      - From base (joint1 origin) to joint2: translation [0, 0.13585, 0].
      - From joint2 to joint3: translation [0, -0.1197, 0.425].
      - From joint3 to joint4: translation [0, 0, 0.39225]. 
      - From joint4 to joint5: translation [0, 0.093, 0]   (rotation about Z for joint5).
      - From joint5 to joint6: translation [0, 0, 0.09465]  (joint6 rotates about Y).
      - From joint6 to TCP: translation [0, 0.0823, 0] with a fixed rpy of [0, 0, 1.570796325].
    
    The procedure is as follows:
      1. Compute the desired wrist center (p_wc) by subtracting the TCP offset (expressed as a pure offset along the
         joint6 z–axis) from the target TCP position. Here, based on the forward kinematics result, we interpret
         the effective TCP offset (after the fixed rotation) to be d_tcp = [0, 0, 0.0823]. 
      2. Solve for q1 using the fact that the origin of joint2 is offset from the base by Rz(q1)*[0, 0.13585, 0].
         When p_wc is rotated back by –q1 and this offset is removed, the y–component must match the fixed value
         from the joint2→joint3 translation (–0.1197). A short derivation shows that if p_wc = [Xw, Yw, Zw] then
             –sin(q1)*Xw + cos(q1)*Yw = d2 + (–0.1197) = 0.13585 – 0.1197 = 0.01615.
         Writing q1 = atan2(Yw, Xw) + δ, one finds δ = asin(0.01615/√(Xw²+Yw²)).
      3. Express the wrist center in joint2’s frame by “removing” q1 and the translation [0, 0.13585, 0]. The
         planar (x-z) coordinates of this point are reached by joints 2 and 3. Writing the effective vector as
           [x_p, –0.1197, z_p],
         the standard two‐link planar geometry applies. In our case the two “link lengths” are:
             A = 0.425    (from joint2 to joint3 along the z–direction)
             B = 0.39225  (from joint3 to joint4 along the z–direction)
         With D = sqrt(x_p² + z_p²), one has
             cos(q3) = (D² – A² – B²) / (2 A B)
         and then
             q3 = arccos(cos(q3))
         with an auxiliary angle β = atan2(B sin(q3), A+B cos(q3)) so that q2 = φ – β, where φ = atan2(x_p, z_p).
      4. Next, compute the rotation from the base to joint3. Since joints 2 and 3 both rotate about Y (and they commute),
         we have R_0_3 = Rz(q1) · Ry(q2 + q3).
      5. The remaining wrist rotation R_w is obtained from
             R_w = R_0_3ᵀ · R_target · (R_tcp_fixed)ᵀ,
         where R_target is the rotation matrix corresponding to Euler angles r (interpreted here in the order
         roll–pitch–yaw as R_target = Rz(yaw) · Ry(pitch) · Rx(roll)) and R_tcp_fixed is the fixed rotation from joint6
         to the TCP (which is Rz(1.570796325) as given by its rpy).
      6. Finally, decompose R_w = Ry(q4) · Rz(q5) · Ry(q6). A common extraction is to set
             q5 = atan2( sqrt((R_w[0,1])² + (R_w[2,1])²), R_w[1,1] )
             q6 = atan2(R_w[1,2], R_w[1,0])
             q4 = atan2(R_w[2,1], -R_w[0,1])
    
    The following implementation makes use of Python’s math and NumPy libraries.
    """
    import numpy as np
    from math import sin, cos, atan2, acos, sqrt, asin

    # ================= Helper Rotation Matrices =================
    def R_x(angle: float) -> np.ndarray:
        return np.array([[1, 0, 0],
                         [0, cos(angle), -sin(angle)],
                         [0, sin(angle),  cos(angle)]])
    
    def R_y(angle: float) -> np.ndarray:
        return np.array([[cos(angle),  0, sin(angle)],
                         [0,           1, 0],
                         [-sin(angle), 0, cos(angle)]])
    
    def R_z(angle: float) -> np.ndarray:
        return np.array([[cos(angle), -sin(angle), 0],
                         [sin(angle),  cos(angle), 0],
                         [0,           0,          1]])
    
    # ============= Build Target Orientation ====================
    # Assume r is given as (roll, pitch, yaw) and the URDF rpy convention applies:
    # R_target = R_z(yaw) · R_y(pitch) · R_x(roll)
    roll, pitch, yaw = r
    R_target = R_z(yaw) @ R_y(pitch) @ R_x(roll)
    
    # ============= Constants from the Manipulator Details ============
    # Translation from joint1 to joint2 (in joint1 frame)
    d2 = 0.13585  
    # The y-offset from joint2 to joint3 (fixed)
    offset_y_joint23 = -0.1197  
    # For the planar arm (joints 2 and 3), the effective link "lengths" (from joint2 frame):
    A = 0.425      # from joint2 (after offset) to joint3 along z
    B = 0.39225    # from joint3 to joint4 along z
    # TCP fixed translation and rotation (from joint6 to TCP)
    # Although the URDF gives translation [0, 0.0823, 0] with rpy [0, 0, 1.570796325],
    # examination of the forward kinematics shows the effective offset (in joint6’s frame) is along z:
    d_tcp = np.array([0, 0, 0.0823])
    R_tcp_fixed = R_z(1.570796325)  # Fixed rotation from joint6 to TCP.
    
    # ============= Step 1: Compute Wrist Center ====================
    # p is target TCP position in world frame.
    p_vec = np.array(p)
    # Wrist center in base frame (subtracting the TCP offset, rotated by the TCP orientation)
    p_wc = p_vec - R_target @ d_tcp

    # ============= Step 2: Solve for q1 ====================
    # The position of joint2 (in base frame) is p_j2 = R_z(q1)*[0, d2, 0]. In joint2's frame (which is base rotated by -q1),
    # the wrist center becomes: p_wc_2 = R_z(-q1)*p_wc - [0, d2, 0].
    # To be consistent with the fixed y-offset given in the link from joint2 to joint3, we require:
    #    (p_wc_2)_y = offset_y_joint23.
    # Write p_wc = [Xw, Yw, Zw]. Note that rotating by -q1:
    #    R_z(-q1)*[Xw, Yw] = [R_xy, 0] only if q1 equals atan2(Yw, Xw).
    # To accommodate the constant offset, define:
    Xw, Yw, _ = p_wc
    R_xy = sqrt(Xw**2 + Yw**2)
    # We require:  -sin(q1)*Xw + cos(q1)*Yw = d2 + offset_y_joint23.
    # Let target_val = d2 + offset_y_joint23.
    target_val = d2 + offset_y_joint23   # 0.13585 - 0.1197 = 0.01615
    # If we write q1 = base_angle + δ with base_angle = atan2(Yw, Xw), then:
    #    R_xy*sin(δ) = target_val   →  δ = asin(target_val/R_xy)
    base_angle = atan2(Yw, Xw)
    # Protect against division by zero:
    delta = asin(target_val / R_xy) if R_xy != 0 else 0.0
    q1 = base_angle + delta

    # ============= Step 3: Solve for q2 and q3 ====================
    # Express wrist center in joint2 frame:
    # p_wc_2 = R_z(-q1)*p_wc - [0, d2, 0]
    p_wc_2 = (R_z(-q1) @ p_wc) - np.array([0, d2, 0])
    # In the geometry from joint2 to wrist center, the y component must equal offset_y_joint23.
    # (Ideally, p_wc_2[1] ≈ offset_y_joint23.)
    # The remaining coordinates that the arm (joints 2 and 3) must reach are in the x–z plane:
    x_p = p_wc_2[0]
    z_p = p_wc_2[2]
    # Distance from the “shoulder” (joint2) to the wrist center in the x–z plane
    D = sqrt(x_p**2 + z_p**2)
    # Law of cosines to determine joint 3:
    cos_q3 = (D**2 - A**2 - B**2) / (2 * A * B)
    # Clamp for numerical safety.
    if cos_q3 > 1: 
        cos_q3 = 1
    elif cos_q3 < -1:
        cos_q3 = -1
    q3 = acos(cos_q3)
    # Compute auxiliary angle β and then q2.
    beta = atan2(B * sin(q3), A + B * cos(q3))
    phi = atan2(x_p, z_p)
    q2 = phi - beta

    # ============= Step 4: Compute the Rotation up to Joint 3 ====================
    # Since joints 2 and 3 both rotate about Y, their combined rotation is simply Ry(q2+q3).
    R_0_3 = R_z(q1) @ R_y(q2 + q3)
    
    # ============= Step 5: Compute Wrist Rotation ====================
    # The overall desired rotation is R_target. The wrist (joints 4,5,6) must account for the difference between
    # R_0_3 and R_target (after removing the fixed TCP rotation).
    # Let R_w = R_0_3ᵀ · R_target · (R_tcp_fixed)ᵀ.
    R_w = R_0_3.T @ R_target @ R_tcp_fixed.T

    # ============= Step 6: Extract q4, q5, q6 from the Wrist Rotation ====================
    # We wish to solve R_w = Ry(q4) · Rz(q5) · Ry(q6).
    # A convenient extraction is as follows:
    #   First, note that:
    #     R_w[1,1] = cos(q5)
    #     sqrt((R_w[0,1])**2 + (R_w[2,1])**2) = sin(q5)
    s5 = sqrt(R_w[0,1]**2 + R_w[2,1]**2)
    q5 = atan2(s5, R_w[1,1])
    # Next, using the second row:
    #   R_w[1,0] = sin(q5)*cos(q6)   and  R_w[1,2] = sin(q5)*sin(q6)
    q6 = atan2(R_w[1,2], R_w[1,0])
    # Finally, q4 can be found from the elements in the first and third rows (for example):
    q4 = atan2(R_w[2,1], -R_w[0,1])
    
    return (q1, q2, q3, q4, q5, q6)