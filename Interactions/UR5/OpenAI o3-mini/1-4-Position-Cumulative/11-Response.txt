def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Computes a closed-form analytical inverse kinematics solution for a 4-DoF serial manipulator.
    The URDF parameters for the chain are:

       • Revolute 1: translation [0, 0, 0], orientation [0, 0, 0], rotates about Y.
       • Revolute 2: translation [0, -0.1197, 0.425], orientation [0, 0, 0], rotates about Y.
       • Revolute 3: translation [0, 0, 0.39225], orientation [0, 0, 0], rotates about Y.
       • Revolute 4: translation [0, 0.093, 0], orientation [0, 0, 0], rotates about Z.
       • TCP offset: translation [0, 0, 0.09465].

    When all joint angles are set to zero the TCP position (in base coordinates) is:
         [0, -0.0267, 0.9119],
    which is obtained as:
         [0, -0.1197, 0.425] + [0, 0, 0.39225] = [0, -0.1197, 0.81725],
         then adding [0, 0.093, 0] yields [0, -0.0267, 0.81725],
         and finally adding the TCP offset [0, 0, 0.09465] gives [0, -0.0267, 0.9119].

    In this configuration the only joint that affects the TCP's position is joint 1,
    which rotates the fixed vector v = [0, -0.0267, 0.9119] about the Y-axis.
    The Y-axis rotation by θ₁ yields:
         x = 0.9119 * sin(θ₁)
         y = -0.0267               (remains unchanged)
         z = 0.9119 * cos(θ₁)
         
    Hence, for a target TCP position p = (x, y, z) (which is assumed reachable),
    it must hold that y = -0.0267 and sqrt(x² + z²) = 0.9119.
    We then compute θ₁ as:
         θ₁ = atan2(x, z)
         
    The remaining joints (θ₂, θ₃, θ₄) do not affect the TCP position (only its orientation)
    and are chosen as the free parameters; here we set them to zero.
    
    All joint angles are returned in radians.
    
    :param p: The desired TCP position as a tuple (x, y, z).
              (It is assumed that p satisfies y = -0.0267 and x² + z² = 0.9119².)
    :return: A tuple (θ₁, θ₂, θ₃, θ₄) of joint angles in radians.
    """
    import math

    x, y, z = p

    # Compute joint 1 angle based on the x and z coordinates.
    theta1 = math.atan2(x, z)
    
    # With the TCP position fully determined by theta1, choose the 'free' joints as zero.
    theta2 = 0.0
    theta3 = 0.0
    theta4 = 0.0

    return (theta1, theta2, theta3, theta4)