def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Computes a closed-form analytical solution (in radians) for the inverse kinematics 
    of a 4-DoF serial manipulator given the TCP position p = (x, y, z).

    The kinematic chain is defined by the following link parameters:
      - Revolute 1: origin [0, 0, 0], orientation [0, 0, 0], axis Y.
      - Revolute 2: origin [0, -0.1197, 0.425], orientation [0, 0, 0], axis Y.
      - Revolute 3: origin [0, 0, 0.39225], orientation [0, 0, 0], axis Y.
      - Revolute 4: origin [0, 0.093, 0], orientation [0, 0, 0], axis Z.
      - TCP:        offset [0, 0, 0.09465] after the last joint.

    When all joints are set to zero the forward kinematics yields:
       TCP = [0, -0.0267, 0.9119]  (note: -0.0267 = -0.1197 + 0.093, and 
       0.9119 = (0.425 + 0.39225) + 0.09465).

    In the default (zero-angle) configuration the chain lies along the Z-axis
    (with an offset in Y) so that the horizontal distance (in the x–z plane) between
    the base and the TCP is 0.81725 (i.e. 0.425 + 0.39225). Moreover, the TCP’s 
    position can be written as:
    
         x = 0.81725 * sin(θ₁)
         y = -0.0267                  (constant)
         z = 0.81725 * cos(θ₁) + 0.09465.

    Thus, for an input TCP position (x, y, z) to be reachable by this closed-form
    solution, it must satisfy:
         y = -0.0267   and   x² + (z - 0.09465)² = (0.81725)².

    In that case the unique solution setting the "free" joints to zero is:
         θ₁ = atan2(x, z - 0.09465)
         θ₂ = 0,  θ₃ = 0,  θ₄ = 0.
        
    All angles are returned in radians.
    
    :param p: The desired TCP position as a tuple (x, y, z).
    :return: A 4-tuple (θ₁, θ₂, θ₃, θ₄) representing the joint angles.
    """
    import math
    x, y, z = p

    # Compute theta1 from the x and z components.
    # From the forward kinematics, we have:
    #    x = 0.81725 * sin(theta1)
    #    z = 0.81725 * cos(theta1) + 0.09465
    # Therefore, tan(theta1) = x / (z - 0.09465)
    theta1 = math.atan2(x, z - 0.09465)

    # With the above choice of theta1 the TCP position is matched.
    # The remaining joints affect only the end-effector orientation.
    # Here we choose the free angles to be zero.
    theta2 = 0.0
    theta3 = 0.0
    theta4 = 0.0

    return (theta1, theta2, theta3, theta4)