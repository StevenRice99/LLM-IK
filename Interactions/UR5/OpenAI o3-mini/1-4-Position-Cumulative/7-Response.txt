def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Computes the inverse kinematics for a 4-DoF serial manipulator to reach a given TCP position.
    
    The robot’s kinematic chain is defined by:
      • Revolute 1: Position [0, 0, 0], orientation [0, 0, 0], rotation about Y.
      • Revolute 2: Position [0, -0.1197, 0.425], orientation [0, 0, 0], rotation about Y.
      • Revolute 3: Position [0, 0, 0.39225], orientation [0, 0, 0], rotation about Y.
      • Revolute 4: Position [0, 0.093, 0], orientation [0, 0, 0], rotation about Z.
      • TCP offset: [0, 0, 0.09465] from the last joint.
      
    When all joint angles are zero, the forward kinematics yields:
         TCP = [0, -0.0267, 0.9119]
    where the y–offset comes from: –0.1197 (from Revolute 2) + 0.093 (from Revolute 4) = –0.0267.
    
    With zero angles for joints 2, 3, and 4 the only joint affecting the TCP position is joint 1.
    In that case the TCP position can be expressed as:
         x = 0.81725 * sin(theta1)
         y = -0.0267
         z = 0.81725 * cos(theta1) + 0.09465
    where 0.81725 = 0.425 + 0.39225.
    
    Solving for theta1:
         tan(theta1) = x / (z - 0.09465)
         theta1 = atan2(x, z - 0.09465)
    
    Since the remaining joints affect only the TCP’s orientation (and set here as free),
    we choose theta2, theta3, and theta4 to be zero.
    
    Note:
      • It is assumed that the desired position p = (x, y, z) satisfies:
            y = -0.0267   and   x² + (z - 0.09465)² = 0.81725²,
        so that p is reachable by this closed–form solution.
      • All angles are returned in radians.
    
    :param p: The target TCP position as a tuple (x, y, z).
    :return: A 4-tuple of joint angles (theta1, theta2, theta3, theta4) in radians.
    """
    import math
    
    x, y, z = p

    # Compute theta1 so that:
    #   x = 0.81725 * sin(theta1)
    #   z = 0.81725 * cos(theta1) + 0.09465
    # => theta1 = atan2(x, z - 0.09465)
    theta1 = math.atan2(x, z - 0.09465)
    
    # The remaining joints are not needed for positioning the TCP
    # (they affect orientation and are set to their free value 0).
    theta2 = 0.0
    theta3 = 0.0
    theta4 = 0.0

    return (theta1, theta2, theta3, theta4)