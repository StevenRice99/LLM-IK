def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Computes a closed‐form analytical inverse kinematics solution for a 4-DoF
    serial manipulator whose TCP position p = (x, y, z) is defined via the
    following chain (using the URDF link data):

      • Revolute 1: origin [0, 0, 0], no translation, rotates about Y.
      • Revolute 2: translation [0, -0.1197, 0.425], rotates about Y.
      • Revolute 3: translation [0, 0, 0.39225], rotates about Y.
      • Revolute 4: translation [0, 0.093, 0], rotates about Z.
      • TCP offset: translation [0, 0, 0.09465].

    With all joints at 0 the TCP’s position in the base frame is
         [0, -0.0267, 0.9119],
    because:
         - The y–coordinate comes from adding -0.1197 (from link 2) and 0.093 (from link 4);
         - The z–coordinate is the sum 0.425 + 0.39225 + 0.09465 = 0.9119.
    
    Notice that when joints 2, 3, and 4 are zero, the only joint angle affecting
    the TCP’s position is that of joint 1, which rotates the constant vector
         p_local = [0, -0.0267, 0.9119]
    about the Y–axis. Under a rotation R_y(θ₁), this vector becomes:
         [0.9119*sin(θ₁), -0.0267, 0.9119*cos(θ₁)].
    
    Therefore, a TCP position p = (x, y, z) reachable by this closed-form solution
    must satisfy:
         y = -0.0267    and    x² + z² = 0.9119².
    
    In that case the unique solution (with the “free” joints set to zero) is:
         θ₁ = atan2(x, z)
         θ₂ = 0,    θ₃ = 0,    θ₄ = 0.
    
    All angles are expressed in radians.
    
    :param p: A tuple (x, y, z) representing the desired TCP position.
              (It is assumed that y == -0.0267 and sqrt(x² + z²) == 0.9119.)
    :return: A 4-tuple of joint angles (θ₁, θ₂, θ₃, θ₄) in radians.
    """
    import math

    x, y, z = p

    # Compute theta1 so that:
    #    0.9119 * sin(theta1) = x   and   0.9119 * cos(theta1) = z.
    # Thus, theta1 = atan2(x, z) (since the radius 0.9119 cancels).
    theta1 = math.atan2(x, z)

    # The remaining joints affect only TCP orientation. In this solution, they are chosen as:
    theta2 = 0.0
    theta3 = 0.0
    theta4 = 0.0

    return (theta1, theta2, theta3, theta4)