Below is one acceptable closed‐form solution. In our derivation we “cancel” the redundant joint by choosing q₄ = 0 and pick q₁ so that when we “undo” the base rotation the remaining hand (tip) position lies along the z–axis. In our chain the fixed (link‑frame) offsets are

  d₁ = [0, –0.1197, 0.425]  
  d₂ = [0, 0, 0.39225]  
  d₃ = [0, 0.093, 0]  
  d₄ = [0, 0, 0.09465].

A forward analysis shows that the TCP position (p) is given by

  p = R_y(q₁) · { d₁ + R_y(q₂) · [ d₂ + R_y(q₃) · (d₃ + R_z(q₄)·d₄) ] }.

Because all rotations about y leave the y–component unchanged, one finds that p_y always equals –0.0267 (since –0.1197 + 0.093 = –0.0267). In addition the extra joint (q₄) is “redundant” for reaching a desired position; here we choose q₄ = 0. (Any choice would work.) One then “undoes” the base rotation by choosing q₁ so that the rotated TCP lies along the z–axis. That is, set

  q₁ = arctan2(pₓ, p_z).

Then letting r = √(pₓ² + p_z²) one notes that when the base is “undone” the remaining (planar) 2R chain (with its effective offset in z due to d₁) must satisfy

  r = 0.425 + R  
  with R² = a² + b² + 2 a b cos(q₃),

where a = 0.09465 (the length from joint3 to TCP along the common direction) and b = 0.39225 (the link from joint2 to joint3). Inverting the cosine law gives

  q₃ = arccos( [(r – 0.425)² – (a² + b²)] / (2 a b) ).

A final rotation is required to “close” the planar chain. In fact, writing the contributions from joints 2 and 3 in the plane shows that one may write (after some algebra)

  q₂ = – arctan2(a sin(q₃), b + a cos(q₃)).

One acceptable complete solution is therefore:

  q₁ = arctan2(pₓ, p_z)  
  q₂ = – arctan2(a sin(q₃), b + a cos(q₃))  
  q₃ = arccos( ((r – 0.425)² – (a² + b²)) / (2 a b) )  
  q₄ = 0.

Below is the complete Python function (using math for elementary functions). (Note: no extraneous testing code is provided.) 

--------------------------------------------------

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Gets the joint values needed to reach position "p". The joints correspond to:
       Revolute 1 (rotation about Y),
       Revolute 2 (rotation about Y),
       Revolute 3 (rotation about Y),
       Revolute 4 (rotation about Z).
    
    The robot’s link frames have the following constant offsets:
       d1 = [0, -0.1197, 0.425]
       d2 = [0,  0,     0.39225]
       d3 = [0,  0.093, 0]
       d4 = [0,  0,     0.09465]
       
    Since rotations about Y do not affect the y–component the TCP y–coordinate is fixed to -0.0267.
    We choose q₄ = 0 as it is redundant for positioning. Also, we choose the base angle q₁ such that the
    TCP (when rotated back) lies in the x=0 plane. This leads to q₁ = arctan2(pₓ, p_z).
    
    The planar 2R chain then satisfies:
       r = sqrt(pₓ² + p_z²) = 0.425 + R,
    with
       R² = a² + b² + 2 a b cos(q₃)
    where a = 0.09465 and b = 0.39225.
    
    Solving gives:
       q₃ = arccos( ((r - 0.425)² - (a² + b²)) / (2 * a * b) )
       and
       q₂ = - arctan2(a*sin(q₃), b + a*cos(q₃)).
    
    :param p: The TCP position [x, y, z]. (Assume p[1] == -0.0267.)
    :return: A tuple (q1, q2, q3, q4) giving the joint angles in radians.
    """
    import math
    x, y, z = p
    
    # Choose base rotation to “align” the arm (undo base yaw)
    q1 = math.atan2(x, z)
    
    # Compute the magnitude in the x-z plane.
    r = math.sqrt(x**2 + z**2)
    
    # Robot constant parameters (from the URDF link offsets):
    d1_z = 0.425       # from Revolute 1 to Revolute 2 (z offset)
    a = 0.09465        # offset from Revolute 3 to TCP (from d4)
    b = 0.39225        # offset from Revolute 2 to Revolute 3 (from d2)
    
    # Effective distance for the planar 2R chain.
    R_arm = r - d1_z   # the length "made up" by joints 2 and 3
    
    # Using the cosine law on the planar chain:
    #   R_arm^2 = a^2 + b^2 + 2 a b cos(q3)
    cos_q3 = (R_arm**2 - (a**2 + b**2)) / (2 * a * b)
    # (Assume the target is reachable so cos_q3 is in [-1, 1].)
    q3 = math.acos(cos_q3)
    
    # The contribution of joints 2 and 3 in the plane can be combined into a single angle.
    # Write the contributions as:
    #   X = a*sin(q3) and Y = b + a*cos(q3).
    # With the chosen q1 the planar solution must have zero x–component. This forces:
    #   q2 + φ = 0, with φ = arctan2(a sin(q3), b + a*cos(q3)).
    phi = math.atan2(a * math.sin(q3), b + a * math.cos(q3))
    q2 = -phi
    
    # Set the redundant joint to zero.
    q4 = 0.0
    
    return (q1, q2, q3, q4)

--------------------------------------------------

Explanation:

• q1 is chosen as arctan2(pₓ, p_z) so that when we “rotate back” the base, the arm lies along the z–axis.
• The planar distance r = √(pₓ² + p_z²) includes the offset d₁ (0.425). Thus the remaining “arm length” is r – 0.425.
• Applying the cosine law to the two links (with effective lengths given by the fixed offsets 0.09465 and 0.39225) yields q₃.
• Then q₂ is determined so that the cumulative planar rotation is zero.
• Finally, we choose q₄ = 0.

Any valid set of joint angles that satisfies the TCP position is acceptable. This solution returns joint angles (in radians) that, when passed to the provided forward kinematics function, yield the desired position.