```python
def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Gets the joint values needed to reach TCP position "p".
    
    The robot has four joints with the following structure (with link offsets derived from the URDF):
      - Revolute 1: rotation about Y (base)
      - Revolute 2: rotation about Y (offset d1 = [0, -0.1197, 0.425])
      - Revolute 3: rotation about Y (offset d2 = [0, 0, 0.39225])
      - Revolute 4: rotation about Z (offset d3 = [0, 0.093, 0] and d4 = [0, 0, 0.09465] to TCP)
      
    Observations:
      - Since rotations about Y leave the Y-coordinate unchanged, note that y-coordinate of the TCP is fixed to:
            -0.1197 + 0.093 = -0.0267.
      - The fourth joint is redundant for reaching a position, so we choose q4 = 0.
      
    Strategy:
      1. Choose the base rotation (q1) such that when “undoing” the base rotation the TCP lies in the x=0 plane.
         Hence, q1 = arctan2(x, z).
      2. The magnitude in the x–z plane is: r = sqrt(x² + z²).
         This r includes the fixed offset along z (0.425) from Revolute 1 to Revolute 2.
         So, the effective distance for the planar 2R chain is:
            R_arm = r - 0.425.
      3. For the 2R (planar) chain formed by joints 2 and 3, let:
            a = 0.09465   (length from Revolute 4 (TCP offset) d4)
            b = 0.39225   (length from Revolute 2 to Revolute 3, d2)
         and the cosine law gives:
            cos(q3) = ((R_arm)^2 - (a² + b²)) / (2 * a * b),
         so we solve:
            q3 = arccos(cos(q3)).
      4. The contributions of joints 2 and 3 in the plane can be combined. Define:
            phi = arctan2(a*sin(q3), b + a*cos(q3)).
         To “cancel” any extra rotation, we set:
            q2 = -phi.
      5. q4 is taken as 0.
         
    :param p: The TCP position given as (x, y, z). (p[1] is expected to be -0.0267.)
    :return: A tuple (q1, q2, q3, q4) representing the joint angles in radians.
    """
    import math

    # Extract the target coordinates.
    x, y, z = p

    # Step 1: Compute the base rotation q1.
    q1 = math.atan2(x, z)

    # Step 2: Compute the distance in the x-z plane.
    r = math.sqrt(x ** 2 + z ** 2)

    # Robot constants (from URDF offsets):
    d1_z = 0.425  # z-offset from Revolute 1 to Revolute 2.
    
    # For the planar 2R chain (joints 2 and 3):
    a = 0.09465   # effective link length from Revolute 4 to TCP (d4)
    b = 0.39225   # effective link length from Revolute 2 to Revolute 3 (d2)

    # Effective arm length for the planar chain.
    R_arm = r - d1_z

    # Step 3: Solve for q3 using the cosine law.
    cos_q3 = (R_arm ** 2 - (a ** 2 + b ** 2)) / (2 * a * b)
    # Assuming the target is reachable so cos_q3 is within [-1, 1]:
    q3 = math.acos(cos_q3)

    # Step 4: Compute q2 so that planar rotations cancel out.
    phi = math.atan2(a * math.sin(q3), b + a * math.cos(q3))
    q2 = -phi

    # Step 5: Redundant joint; set to zero.
    q4 = 0.0

    return (q1, q2, q3, q4)
```