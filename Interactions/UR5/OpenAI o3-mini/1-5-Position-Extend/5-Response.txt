```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Analytical closed–form inverse kinematics for a 5-DOF serial manipulator.
    
    The robot chain (all lengths in meters) is defined as follows:
      • Revolute 1: at the base, with axis Y. Position: [0, 0, 0], Orientation: [0, 0, 0].
      • Fixed translation to Revolute 2: [0, -0.1197, 0.425].
      • Revolute 2: about Y.
      • Fixed translation to Revolute 3: [0, 0, 0.39225].
      • Revolute 3: about Y.
      • Fixed translation to Revolute 4: [0, 0.093, 0].
      • Revolute 4: about Z.
      • Fixed translation to Revolute 5: [0, 0, 0.09465].
      • Revolute 5: about Y.
      • Fixed translation to TCP: [0, 0.0823, 0].
    
    Only the horizontal (x–z plane) placement is affected by joints 1–3.
    For these joints the effective position is given by:
         x = 0.425*sin(θ1) + 0.39225*sin(θ1+θ2) + 0.09465*sin(θ1+θ2+θ3)
         z = 0.425*cos(θ1) + 0.39225*cos(θ1+θ2) + 0.09465*cos(θ1+θ2+θ3)
    and the fixed vertical offset is:
         y = -0.1197 + 0.093 + 0.0823 = 0.0556.
    
    For a target position p = (x, y, z) (with y = 0.0556 for reachability), joints 1–3 are determined 
    by a 2R solution (augmented by a candidate selection process) and we choose to resolve redundancy by setting
    joints 4 and 5 to 0.
    
    :param p: The target TCP position as a tuple (x, y, z).
    :return: A tuple (θ1, θ2, θ3, θ4, θ5) in radians.
    """
    # Unpack the target position.
    x_target, y_target, z_target = p

    # Define the effective horizontal link lengths.
    L1 = 0.425     # from the translation [0, -0.1197, 0.425]
    L2 = 0.39225   # from the translation [0, 0, 0.39225]
    L3 = 0.09465   # from the translation [0, 0, 0.09465] (joint 5 to TCP)

    # Fixed vertical offset computed as: -0.1197 (joint2) + 0.093 (joint4 translation) + 0.0823 (TCP)
    y_fixed = -0.1197 + 0.093 + 0.0823  # equals 0.0556
    # In a correctly specified target p, y_target should equal y_fixed.

    def fk_planar(theta1, theta2, theta3):
        """Compute the horizontal (x, z) position given joints 1-3 angles."""
        x_fk = L1 * math.sin(theta1) + L2 * math.sin(theta1 + theta2) + L3 * math.sin(theta1 + theta2 + theta3)
        z_fk = L1 * math.cos(theta1) + L2 * math.cos(theta1 + theta2) + L3 * math.cos(theta1 + theta2 + theta3)
        return x_fk, z_fk

    # Determine candidate overall orientation T = θ1 + θ2 + θ3.
    # The natural target orientation comes from the TCP horizontal direction.
    psi = math.atan2(x_target, z_target)
    T_options = [psi, psi + math.pi]  # Two natural choices.

    candidates = []
    
    for T in T_options:
        # Compute wrist center location (target for joints 1-3) by subtracting the contribution of the last link.
        x_wrist = x_target - L3 * math.sin(T)
        z_wrist = z_target - L3 * math.cos(T)
        r_wrist = math.sqrt(x_wrist**2 + z_wrist**2)
        
        # Use the 2R planar solution for the wrist center.
        cos_beta = (r_wrist**2 - L1**2 - L2**2) / (2 * L1 * L2)
        # Clamp for numerical precision.
        cos_beta = max(-1.0, min(1.0, cos_beta))
        
        for sign in (1, -1):
            beta = sign * math.acos(cos_beta)
            phi = math.atan2(x_wrist, z_wrist)
            delta = math.atan2(L2 * math.sin(beta), L1 + L2 * math.cos(beta))
            theta1_candidate = phi - delta
            theta2_candidate = beta
            theta3_candidate = T - (theta1_candidate + theta2_candidate)
            
            # Check horizontal error.
            x_fk, z_fk = fk_planar(theta1_candidate, theta2_candidate, theta3_candidate)
            err = math.hypot(x_fk - x_target, z_fk - z_target)
            candidates.append((err, theta1_candidate, theta2_candidate, theta3_candidate))
    
    # Select the candidate solution with the smallest horizontal error.
    best = min(candidates, key=lambda tup: tup[0])
    theta1, theta2, theta3 = best[1], best[2], best[3]

    # Redundancy resolution: set joints that do not affect TCP position to zero.
    theta4 = 0.0
    theta5 = 0.0

    # Normalize angles to the range (-π, π).
    def normalize(angle):
        while angle > math.pi:
            angle -= 2.0 * math.pi
        while angle < -math.pi:
            angle += 2.0 * math.pi
        return angle

    theta1 = normalize(theta1)
    theta2 = normalize(theta2)
    theta3 = normalize(theta3)
    theta4 = normalize(theta4)
    theta5 = normalize(theta5)
    
    return (theta1, theta2, theta3, theta4, theta5)
```