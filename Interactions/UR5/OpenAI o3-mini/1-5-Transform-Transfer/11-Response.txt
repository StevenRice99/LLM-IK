```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Analytical closed-form inverse kinematics for a 5-DOF serial manipulator.
    
    Robot chain summary (lengths in meters):
      Joint1: Revolute about Y at [0, 0, 0]
      Joint2: After [0, -0.1197, 0.425], revolute about Y
      Joint3: After [0, 0, 0.39225], revolute about Y
      Joint4: After [0, 0.093, 0], revolute about Z
      Joint5: After [0, 0, 0.09465], revolute about Y
      TCP: After [0, 0.0823, 0] with fixed orientation offset [0, 0, π/2]
    
    The forward kinematics for the TCP position are derived as:
       S = q1 + q2 + q3
       d = tcp_y_offset * sin(q4)      with tcp_y_offset = 0.0823
       x = L1*sin(q1) + L2*sin(q1+q2) + L3*sin(S) - d*cos(S)
       z = L1*cos(q1) + L2*cos(q1+q2) + L3*cos(S) + d*sin(S)
       y = y_offset + tcp_y_offset*cos(q4)   with y_offset = -0.1197+0.093 = -0.0267
       (L1 = 0.425, L2 = 0.39225, L3 = 0.09465)
    
    The full TCP orientation is:
       R_tcp = R_y(S) @ R_z(q4) @ R_y(q5) @ R_z(π/2)
    and the target rotation is defined from the given Euler angles r = [roll, pitch, yaw] by:
       R_target = R_z(yaw) @ R_y(pitch) @ R_x(roll)
    
    Approach:
      1. Solve the vertical equation y = y_offset + tcp_y_offset*cos(q4) for q4 (two branches).
      2. For each q4 branch, define:
            d   = tcp_y_offset * sin(q4)
            L_eff = sqrt(L3^2 + d^2)
            φ   = atan2(d, L3)
         and set candidate parameter T from the horizontal target direction:
            psi = atan2(x_target, z_target)
         then either T = psi or T = psi + π.
      3. With S = T + φ, the wrist center in the x-z plane is:
            W_x = x_target - L_eff*sin(T)
            W_z = z_target - L_eff*cos(T)
         Solve the resulting 2R IK for joints q1 and q2 via:
            cos(q2) = (W_x^2+W_z^2 - L1^2 - L2^2)/(2*L1*L2)
         and then obtain q1 from:
            q1 = atan2(W_x, W_z) - atan2(L2*sin(q2), L1+L2*cos(q2))
         finally, q3 = S - (q1+q2).
      4. For each candidate, compute q5 that achieves the desired orientation.
         Since
            R_tcp = R_y(S) @ R_z(q4) @ R_y(q5) @ R_z(π/2)
         we can isolate R_y(q5) via:
            R_y(q5) = (R_y(S) @ R_z(q4))⁻¹ @ R_target @ R_z(–π/2)
         where (R_y(S) @ R_z(q4))⁻¹ = R_z(–q4) @ R_y(–S). Then take:
            q5 = atan2(M[0,2], M[0,0]),  M = R_z(–q4) @ R_y(–S) @ R_target @ R_z(–π/2)
      5. Evaluate each candidate by computing both the position error (using Euclidean norm)
         and an orientation error. Here we use the Frobenius norm difference between the
         FK-derived rotation and the target rotation. A weighting factor is applied to the
         orientation error to bias selection toward the branch that best meets the desired
         orientation.
      6. Return the candidate with the smallest total error and normalize the angles into [-π, π].
    
    :param p: Target TCP position [x, y, z] (meters)
    :param r: Target TCP orientation [roll, pitch, yaw] (radians)
    :return: Tuple of joint angles (q1, q2, q3, q4, q5) in radians.
    """
    # Robot dimensions and offsets:
    L1 = 0.425
    L2 = 0.39225
    L3 = 0.09465
    y_offset = -0.0267  # -0.1197 + 0.093
    tcp_y_offset = 0.0823

    x_target, y_target, z_target = p

    def normalize(angle):
        while angle > math.pi:
            angle -= 2.0 * math.pi
        while angle < -math.pi:
            angle += 2.0 * math.pi
        return angle

    # Rotation matrices.
    def R_x(theta):
        return np.array([[1, 0, 0],
                         [0, math.cos(theta), -math.sin(theta)],
                         [0, math.sin(theta),  math.cos(theta)]])
    def R_y(theta):
        return np.array([[math.cos(theta), 0, math.sin(theta)],
                         [0, 1, 0],
                         [-math.sin(theta), 0, math.cos(theta)]])
    def R_z(theta):
        return np.array([[math.cos(theta), -math.sin(theta), 0],
                         [math.sin(theta),  math.cos(theta), 0],
                         [0, 0, 1]])
    
    # Build target rotation matrix using the convention: R_target = R_z(yaw) @ R_y(pitch) @ R_x(roll)
    R_target = R_z(r[2]) @ R_y(r[1]) @ R_x(r[0])
    
    # Forward kinematics for position.
    def fk_position(q1, q2, q3, q4):
        S = q1 + q2 + q3
        d = tcp_y_offset * math.sin(q4)
        x_fk = L1 * math.sin(q1) + L2 * math.sin(q1 + q2) + L3 * math.sin(S) - d * math.cos(S)
        z_fk = L1 * math.cos(q1) + L2 * math.cos(q1 + q2) + L3 * math.cos(S) + d * math.sin(S)
        y_fk = y_offset + tcp_y_offset * math.cos(q4)
        return np.array([x_fk, y_fk, z_fk])
    
    # Forward kinematics for full orientation.
    def fk_orientation(q1, q2, q3, q4, q5):
        S = q1 + q2 + q3
        return R_y(S) @ R_z(q4) @ R_y(q5) @ R_z(math.pi/2)
    
    # Set a weight for orientation error in candidate selection.
    orientation_weight = 10.0

    # Solve vertical equation for q4.
    # y = y_offset + tcp_y_offset*cos(q4)  ==> cos(q4) = (y_target - y_offset) / tcp_y_offset
    C = (y_target - y_offset) / tcp_y_offset
    C = max(min(C, 1.0), -1.0)
    q4_candidates = [math.acos(C), -math.acos(C)]
    
    # Horizontal target angle.
    psi = math.atan2(x_target, z_target)
    
    best_error = float("inf")
    best_solution = None
    
    # Loop over candidate q4 values.
    for q4_candidate in q4_candidates:
        d = tcp_y_offset * math.sin(q4_candidate)
        L_eff = math.sqrt(L3**2 + d**2)
        phi = math.atan2(d, L3)
        # Two candidates for T: psi and psi+pi.
        for T_candidate in [psi, psi + math.pi]:
            S = T_candidate + phi  # S = q1 + q2 + q3.
            # Compute wrist center in x-z plane.
            W_x = x_target - L_eff * math.sin(T_candidate)
            W_z = z_target - L_eff * math.cos(T_candidate)
            r_w = math.hypot(W_x, W_z)
            # Check reachability for 2R subproblem.
            if r_w > (L1 + L2) or r_w < abs(L1 - L2):
                continue
            # Solve for q2 via cosine law.
            cos_q2 = (r_w**2 - L1**2 - L2**2) / (2.0 * L1 * L2)
            cos_q2 = max(min(cos_q2, 1.0), -1.0)
            # Two candidate branches for q2.
            for sign in [1, -1]:
                q2_candidate = sign * math.acos(cos_q2)
                # Compute auxiliary angle delta.
                delta = math.atan2(L2 * math.sin(q2_candidate), L1 + L2 * math.cos(q2_candidate))
                theta_w = math.atan2(W_x, W_z)
                q1_candidate = theta_w - delta
                q3_candidate = S - (q1_candidate + q2_candidate)
                
                # Compute q5 from the orientation constraint.
                S_candidate = q1_candidate + q2_candidate + q3_candidate
                # Inverse: (R_y(S_candidate)*R_z(q4_candidate))⁻¹ = R_z(-q4_candidate) @ R_y(-S_candidate)
                A_inv = R_z(-q4_candidate) @ R_y(-S_candidate)
                M = A_inv @ R_target @ R_z(-math.pi/2)
                q5_candidate = math.atan2(M[0, 2], M[0, 0])
                
                # Evaluate errors.
                fk_pos = fk_position(q1_candidate, q2_candidate, q3_candidate, q4_candidate)
                pos_error = np.linalg.norm(fk_pos - np.array(p))
                
                R_fk = fk_orientation(q1_candidate, q2_candidate, q3_candidate, q4_candidate, q5_candidate)
                # Orientation error as Frobenius norm difference.
                orient_error = np.linalg.norm(R_fk - R_target, ord='fro')
                
                total_error = pos_error + orientation_weight * orient_error
                
                if total_error < best_error:
                    best_error = total_error
                    best_solution = (q1_candidate, q2_candidate, q3_candidate, q4_candidate, q5_candidate)
    
    if best_solution is None:
        raise ValueError("No valid IK solution found for the given target.")
    
    q1, q2, q3, q4, q5 = (normalize(angle) for angle in best_solution)
    return (q1, q2, q3, q4, q5)
```