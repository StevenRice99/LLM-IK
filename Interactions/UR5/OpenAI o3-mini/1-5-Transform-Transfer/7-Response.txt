```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float, float]:
    """
    Analytical closed–form inverse kinematics for a 5-DOF serial manipulator that
    accounts for both TCP position and orientation.
    
    Robot chain (lengths in meters, from URDF):
      • Joint1: revolute about Y at [0,0,0]
      • Joint2: after translation [0, -0.1197, 0.425], revolute about Y
      • Joint3: after translation [0, 0, 0.39225], revolute about Y
      • Joint4: after translation [0, 0.093, 0], revolute about Z
      • Joint5: after translation [0, 0, 0.09465], revolute about Y
      • TCP: after translation [0, 0.0823, 0] with fixed rpy [0, 0, π/2]
    
    The TCP position (as derived) is:
      Let S = q1 + q2 + q3 and d = 0.0823*sin(q4), then:
        x = L1*sin(q1) + L2*sin(q1+q2) + L3*sin(S) - d*cos(S)
        z = L1*cos(q1) + L2*cos(q1+q2) + L3*cos(S) + d*sin(S)
        y = (-0.1197+0.093) + 0.0823*cos(q4)   = -0.0267 + 0.0823*cos(q4)
      with L1 = 0.425, L2 = 0.39225, L3 = 0.09465.
      
    The TCP orientation is given by:
         R_tcp = R_y(S) @ R_z(q4) @ R_y(q5) @ R_z(π/2)
    The target rotation is constructed from Euler angles with the
         convention R_target = R_z(yaw) @ R_y(pitch) @ R_x(roll)
    
    The solution strategy is as follows:
      1. Use the y–coordinate (vertical) equation to solve for q4 (two branches).
      2. For each q4 branch, note that one may rewrite the (x,z) equations as:
             x = P + L_eff * sin(T)
             z = Q + L_eff * cos(T)
         where d = 0.0823*sin(q4), L_eff = sqrt(L3^2 + d^2), φ = atan2(d, L3) and T = S – φ.
      3. Instead of restricting T to just {ψ, ψ+π} (with ψ = atan2(x_target,z_target)),
         we search over T in a fine grid over a 2π range.
      4. For each candidate T, the "wrist center" is computed:
             W = [x_target - L_eff*sin(T), z_target - L_eff*cos(T)]
         and then the 2R IK subproblem (for joints 1 and 2) is solved:
             q2 = ±acos((|W|^2 - L1^2 - L2^2)/(2*L1*L2))    and
             q1 = atan2(W_x, W_z) - atan2(L2*sin(q2), L1+L2*cos(q2)).
      5. With S = T + φ, joint 3 is determined by q3 = S - (q1+q2).
      6. Finally, q5 is resolved from the orientation constraint:
             R_y(q5) = [R_y(S) @ R_z(q4)]⁻¹ @ R_target @ R_z(–π/2)
         so that q5 = atan2(M[0,2], M[0,0]) with M = R_z(–q4) @ R_y(–S) @ R_target @ R_z(–π/2).
      7. For each candidate solution, the forward kinematics (position and orientation)
         are computed and a total error (sum of position error and orientation error) is
         used to select the best candidate.
    
    :param p: The target TCP position [x, y, z] in meters.
    :param r: The target TCP orientation in radians [roll, pitch, yaw].
    :return: A 5–tuple (q1, q2, q3, q4, q5) of joint angles in radians.
    """
    # Robot parameters
    L1 = 0.425
    L2 = 0.39225
    L3 = 0.09465
    y_offset = -0.1197 + 0.093  # equals -0.0267
    tcp_y_offset = 0.0823

    x_target, y_target, z_target = p

    def normalize(angle):
        # Normalize an angle into [-pi, pi]
        while angle > math.pi:
            angle -= 2.0 * math.pi
        while angle < -math.pi:
            angle += 2.0 * math.pi
        return angle

    # Rotation matrices about x, y, and z
    def R_x(theta):
        return np.array([[1, 0, 0],
                         [0, math.cos(theta), -math.sin(theta)],
                         [0, math.sin(theta), math.cos(theta)]])
    def R_y(theta):
        return np.array([[math.cos(theta), 0, math.sin(theta)],
                         [0, 1, 0],
                         [-math.sin(theta), 0, math.cos(theta)]])
    def R_z(theta):
        return np.array([[math.cos(theta), -math.sin(theta), 0],
                         [math.sin(theta),  math.cos(theta), 0],
                         [0, 0, 1]])

    # Build target rotation matrix (using convention: R_target = R_z(yaw) @ R_y(pitch) @ R_x(roll))
    R_target = R_z(r[2]) @ R_y(r[1]) @ R_x(r[0])
    
    # Forward kinematics for position (as derived above)
    def fk_position(q1, q2, q3, q4):
        S = q1 + q2 + q3
        d = tcp_y_offset * math.sin(q4)
        x_fk = L1 * math.sin(q1) + L2 * math.sin(q1 + q2) + L3 * math.sin(S) - d * math.cos(S)
        z_fk = L1 * math.cos(q1) + L2 * math.cos(q1 + q2) + L3 * math.cos(S) + d * math.sin(S)
        y_fk = y_offset + tcp_y_offset * math.cos(q4)
        return np.array([x_fk, y_fk, z_fk])
    
    # Forward kinematics for full orientation:
    # R_tcp = R_y(S) @ R_z(q4) @ R_y(q5) @ R_z(pi/2)
    def fk_orientation(q1, q2, q3, q4, q5):
        S = q1 + q2 + q3
        return R_y(S) @ R_z(q4) @ R_y(q5) @ R_z(math.pi/2)
    
    # Determine q4 from vertical (y) coordinate:
    # y = y_offset + tcp_y_offset*cos(q4)  =>  cos(q4) = (y_target - y_offset) / tcp_y_offset
    C = (y_target - y_offset) / tcp_y_offset
    C = max(min(C, 1.0), -1.0)
    q4_candidates = [math.acos(C), -math.acos(C)]

    # Use the horizontal target direction as a starting point. Note: psi = atan2(x,z)
    psi = math.atan2(x_target, z_target)

    best_error = float("inf")
    best_solution = None

    # We search over a fine grid of T candidates.
    # T relates to the sum S = q1+q2+q3 via T = S - φ, where φ = atan2(d, L3) and d = tcp_y_offset*sin(q4).
    num_T = 81  # use 81 points for finer resolution (step ~0.0785 rad)
    
    for q4_candidate in q4_candidates:
        d = tcp_y_offset * math.sin(q4_candidate)
        L_eff = math.sqrt(L3**2 + d**2)
        phi = math.atan2(d, L3)  # offset between S and T: S = T + phi
        
        # Generate candidate T values over a full 2π span centered at psi
        T_candidates = np.linspace(psi - math.pi, psi + math.pi, num_T)
        for T_candidate in T_candidates:
            S = T_candidate + phi  # S = q1+q2+q3
            # Compute the wrist center in the x-z plane:
            W_x = x_target - L_eff * math.sin(T_candidate)
            W_z = z_target - L_eff * math.cos(T_candidate)
            r_w = math.hypot(W_x, W_z)
            # Check 2R arm feasibility (wrist center reachable by links L1 and L2)
            if r_w > (L1 + L2) or r_w < abs(L1 - L2):
                continue

            # Solve the 2R IK (for joints q1 and q2) from the wrist center
            # There are two solutions corresponding to the ± of the acos.
            cos_q2 = (r_w**2 - L1**2 - L2**2) / (2.0 * L1 * L2)
            cos_q2 = max(min(cos_q2, 1.0), -1.0)
            for sign in [1, -1]:
                q2_candidate = sign * math.acos(cos_q2)
                # delta = atan2(L2*sin(q2), L1+L2*cos(q2))
                delta = math.atan2(L2 * math.sin(q2_candidate), L1 + L2 * math.cos(q2_candidate))
                theta_w = math.atan2(W_x, W_z)
                q1_candidate = theta_w - delta
                q3_candidate = S - (q1_candidate + q2_candidate)

                # Determine q5 from the orientation constraint.
                # We have R_tcp = R_y(S) @ R_z(q4_candidate) @ R_y(q5) @ R_z(pi/2)
                # => R_y(q5) = [R_y(S) @ R_z(q4_candidate)]⁻¹ @ R_target @ R_z(-pi/2)
                A_inv = R_z(-q4_candidate) @ R_y(-S)
                M = A_inv @ R_target @ R_z(-math.pi/2)
                q5_candidate = math.atan2(M[0, 2], M[0, 0])
                
                # Use forward kinematics to compute position and orientation errors
                fk_pos = fk_position(q1_candidate, q2_candidate, q3_candidate, q4_candidate)
                pos_error = np.linalg.norm(fk_pos - np.array(p))
                
                R_fk = fk_orientation(q1_candidate, q2_candidate, q3_candidate, q4_candidate, q5_candidate)
                R_err = R_fk.T @ R_target
                trace_val = np.trace(R_err)
                # Clamp the argument for acos to [-1, 1]
                cos_angle = (trace_val - 1.0) / 2.0
                cos_angle = max(min(cos_angle, 1.0), -1.0)
                orient_error = abs(math.acos(cos_angle))
                
                total_error = pos_error + orient_error

                if total_error < best_error:
                    best_error = total_error
                    best_solution = (q1_candidate, q2_candidate, q3_candidate, q4_candidate, q5_candidate)

    if best_solution is None:
        raise ValueError("No valid IK solution found for the input target position and orientation.")
    
    # Normalize joint angles to [-pi, pi]
    q1, q2, q3, q4, q5 = (normalize(j) for j in best_solution)
    return (q1, q2, q3, q4, q5)
```