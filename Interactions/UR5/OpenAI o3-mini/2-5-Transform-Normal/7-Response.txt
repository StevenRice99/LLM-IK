```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float], r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Computes the joint angles for the 4-DOF manipulator to reach the target TCP position and orientation.
    
    The manipulator has:
      • Revolute 1: rotation about Y, with no offset.
      • Revolute 2: rotation about Y, with a translation [0, 0, 0.39225].
      • Revolute 3: rotation about Z, with a translation [0, 0.093, 0] (i.e. along Y).
      • Revolute 4: rotation about Y, with a translation [0, 0, 0.09465].
      • TCP: translation [0, 0.0823, 0] along Y and a fixed orientation offset about Z of 1.570796325.
    
    In our derivation we use:
      d2    = 0.39225   (translation from joint1 to joint2 along z)
      d3    = 0.093     (translation from joint2 to joint3 along y)
      d4    = 0.09465   (translation from joint3 to joint4 along z)
      d_tcp = 0.0823    (translation from joint4 to TCP along y)
    
    The forward kinematics (position part only) can be expressed as:
      p_x = d2*sin(theta1) + d4*sin(theta1+theta2) - d_tcp*sin(theta3)*cos(theta1+theta2)
      p_y = d3 + d_tcp*cos(theta3)
      p_z = d2*cos(theta1) + d4*cos(theta1+theta2) + d_tcp*sin(theta3)*sin(theta1+theta2)
    
    We first solve for theta3 from the p_y equation:
      theta3 = arccos((p_y - d3)/d_tcp)
      
    Then, by treating the x-z projection (p_x, p_z) as a planar two‐link problem, we define:
      R_effective = sqrt(d4² + (d_tcp*sin(theta3))²)
      φ = arctan2(d_tcp*sin(theta3), d4)
    
    With polar coordinates for [p_x, p_z] given by:
      r_target = sqrt(p_x² + p_z²)
      δ = arctan2(p_x, p_z)
    
    The law of cosines gives:
      r_target * cos(theta1 - δ) = (r_target² + d2² - R_effective²) / (2*d2)
    so that:
      theta1 = δ ± arccos( ((r_target² + d2² - R_effective²)/(2*d2)) / r_target )
    (Here we pick the positive branch, but the other branch also gives an alternative solution.)
    
    Once theta1 is determined, define:
      V = [p_x - d2*sin(theta1), p_z - d2*cos(theta1)]
      δ2 = arctan2(V_x, V_z)
    Then:
      theta1 + theta2 = δ2 + φ
    so that:
      theta2 = (δ2 + φ) - theta1
      
    Finally, for the orientation, the forward kinematics rotation is:
      R_total = Ry(theta1+theta2) · Rz(theta3) · Ry(theta4) · Rz(1.570796325)
    Given a target orientation R_target (from the provided roll-pitch-yaw angles r), we can extract theta4 by:
      R_y(theta4) = (Ry(theta1+theta2)·Rz(theta3))ᵀ · R_target · Rz(–1.570796325)
    and noting that:
      R_y(theta4) = [[ cos(theta4), 0, sin(theta4)],
                       [      0,     1,      0    ],
                       [ -sin(theta4),0, cos(theta4)]]
    we set:
      theta4 = arctan2(R_y(theta4)[0,2], R_y(theta4)[0,0])
    
    We assume the roll-pitch-yaw (rpy) angles provided in r correspond to a rotation:
      R_target = Rz(yaw) · Ry(pitch) · Rx(roll)
    
    :param p: Target TCP position [x, y, z].
    :param r: Target TCP orientation in rpy [roll, pitch, yaw] (radians).
    :return: Tuple (theta1, theta2, theta3, theta4) joint angles in radians.
    """
    # Unpack position components.
    p = np.array(p)
    p_x, p_y, p_z = p

    # Given link offsets.
    d2    = 0.39225   # from Revolute 1 to Revolute 2 (translation along z)
    d3    = 0.093     # from Revolute 2 to Revolute 3 (translation along y)
    d4    = 0.09465   # from Revolute 3 to Revolute 4 (translation along z)
    d_tcp = 0.0823    # from Revolute 4 to TCP (translation along y)

    # ---- Step 1. Solve for theta3 from the p_y equation.
    # p_y = d3 + d_tcp*cos(theta3)
    cos_theta3 = (p_y - d3) / d_tcp
    cos_theta3 = np.clip(cos_theta3, -1.0, 1.0)
    theta3 = np.arccos(cos_theta3)
    sin_theta3 = np.sin(theta3)

    # ---- Step 2. Solve for theta1 and theta2 using the x-z projection.
    # Define effective length and offset for link 4 and TCP contribution:
    R_eff = np.sqrt(d4**2 + (d_tcp * sin_theta3)**2)
    phi = np.arctan2(d_tcp * sin_theta3, d4)
    
    # Represent [p_x, p_z] in polar coordinates.
    r_target = np.sqrt(p_x**2 + p_z**2)
    delta = np.arctan2(p_x, p_z)  # because p_x corresponds to the sin component.
    
    # Law of cosines: r_target * cos(theta1 - delta) = (r_target^2 + d2^2 - R_eff^2) / (2*d2)
    K = (r_target**2 + d2**2 - R_eff**2) / (2 * d2)
    cos_term = K / r_target
    cos_term = np.clip(cos_term, -1.0, 1.0)
    angle_offset = np.arccos(cos_term)
    
    # Choose the positive branch for theta1.
    theta1 = delta + angle_offset
    
    # Compute the effective direction for the second “joint”:
    Vx = p_x - d2 * np.sin(theta1)
    Vz = p_z - d2 * np.cos(theta1)
    delta2 = np.arctan2(Vx, Vz)  # direction after subtracting the first link's contribution.
    
    # Then theta1 + theta2 = delta2 + φ, so solve for theta2.
    theta12 = delta2 + phi
    theta2 = theta12 - theta1

    # ---- Step 3. Solve for theta4 from the orientation.
    # Define basic rotation matrices.
    def rot_x(a):
        return np.array([[1, 0, 0],
                         [0, np.cos(a), -np.sin(a)],
                         [0, np.sin(a),  np.cos(a)]])
    def rot_y(a):
        return np.array([[np.cos(a), 0, np.sin(a)],
                         [0, 1, 0],
                         [-np.sin(a), 0, np.cos(a)]])
    def rot_z(a):
        return np.array([[np.cos(a), -np.sin(a), 0],
                         [np.sin(a),  np.cos(a), 0],
                         [0, 0, 1]])
    
    # Convert the supplied rpy angles (roll, pitch, yaw) to the target rotation matrix.
    roll, pitch, yaw = r
    # Assumed convention: R_target = Rz(yaw) * Ry(pitch) * Rx(roll)
    R_target = rot_z(yaw) @ rot_y(pitch) @ rot_x(roll)
    
    # The rotation achieved by joints 1, 2, and 3 is:
    R_pre = rot_y(theta1 + theta2) @ rot_z(theta3)
    # The forward kinematics gives the orientation:
    #    R_total = R_pre * Ry(theta4) * Rz(1.570796325)
    # Re-arrange to solve for R_y(theta4):
    R_y_theta4 = R_pre.T @ R_target @ rot_z(-1.570796325)
    
    # Since R_y(theta4) should be:
    #    [[ cos(theta4), 0, sin(theta4)],
    #     [     0,       1,     0      ],
    #     [ -sin(theta4),0, cos(theta4)]]
    # we extract theta4 from its (0,0) and (0,2) components.
    theta4 = np.arctan2(R_y_theta4[0,2], R_y_theta4[0,0])
    
    return (theta1, theta2, theta3, theta4)
```