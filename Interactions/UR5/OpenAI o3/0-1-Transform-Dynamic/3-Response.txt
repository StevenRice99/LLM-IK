```python
import math
from typing import Tuple


def _wrap(angle: float) -> float:
    """
    Wrap an angle to the interval [-π, π].
    """
    return math.atan2(math.sin(angle), math.cos(angle))


def inverse_kinematics(
        p: Tuple[float, float, float],
        r: Tuple[float, float, float]
) -> Tuple[float, float]:
    """
    Closed‑form inverse kinematics for the 2‑DoF serial chain described in the
    DETAILS section.

    Forward kinematics (derived from the URDF data)

        R  = Rz(θ1) · Ry(θ2)
        p  = Rz(θ1) · [0, 0.13585, 0]ᵀ + Rz(θ1) · Ry(θ2) · [0, -0.1197, 0.425]ᵀ

    Converting this orientation matrix to URDF‑style extrinsic RPY (roll‑pitch‑yaw)
    reveals the deterministic relations

        roll  ≡ ±π                    (fixed by the mechanism / Euler choice)
        pitch =  π − θ2               (wrapped to [-π, π])
        yaw   =  θ1 + π               (wrapped to [-π, π])

    Therefore the inverse mapping is simply

        θ1 = yaw − π
        θ2 = π − pitch

    The angles are finally wrapped to the conventional interval [-π, π],
    guaranteeing they lie inside the specified joint limits (±2π).

    Parameters
    ----------
    p : (x, y, z) – TCP position (not needed for the analytical solution but
        kept to comply with the required signature).

    r : (roll, pitch, yaw) – Desired TCP orientation in URDF RPY convention.

    Returns
    -------
    (θ1, θ2) : Joint angles in radians.
    """

    roll, pitch, yaw = r

    # Inverse mapping obtained from analytical derivation
    theta1 = _wrap(yaw   - math.pi)
    theta2 = _wrap(math.pi - pitch)

    return theta1, theta2
```