Here is a closed‑form analytical solution for the two–DoF arm described in the DETAILS section.  
The derivation uses the geometry

p = Rz(q1) · ( d1 + Ry(q2) · d2 ) ,   R = Rz(q1) · Ry(q2)

with  
d1 = (0 , 0.13585 , 0)  
d2 = (0 , –0.1197 , 0.425)

which yields the constant value  
d1y + d2y = 0.01615 m that appears in the kinematic equations.

The code below determines the two joint angles purely analytically and
returns them wrapped to the range (–π, π] which is well inside the
per‑joint limits (±2 π).

```python
import math
from typing import Tuple

# constant geometry terms (metres)
_D1_Y = 0.13585
_D2_Y = -0.1197
_D2_Z = 0.425
_CONST_Y = _D1_Y + _D2_Y        # 0.01615

def _wrap(angle: float) -> float:
    """Wrap angle to the interval (−π, π]."""
    return (angle + math.pi) % (2.0 * math.pi) - math.pi


def inverse_kinematics(
    p: Tuple[float, float, float], 
    r: Tuple[float, float, float]
) -> Tuple[float, float]:
    """
    Analytical inverse kinematics for the 2‑DoF manipulator.

    Parameters
    ----------
    p : tuple(float, float, float)
        Desired TCP position in the base frame [x, y, z] (metres).
    r : tuple(float, float, float)
        Desired TCP orientation as roll‑pitch‑yaw [rx, ry, rz] (radians).
        Only yaw (rz) and pitch (ry) are physically realisable; roll is ignored.

    Returns
    -------
    (q1, q2) : tuple(float, float)
        Joint angles (radians) for Revolute‑1 (about Z) and Revolute‑2
        (about Y) respectively.
    """
    px, py, pz = p

    # ------------------------------------------------------------------
    # 1.  Joint‑1 (rotation about Z) from the position equations
    #
    #     With  Rz(‑q1) · p = [ 0.425 sin q2 ,
    #                           0.01615      ,
    #                           0.425 cos q2 ]
    #
    #     the Y component after the rotation is the constant 0.01615 m,
    #     which gives one scalar equation containing only q1.
    # ------------------------------------------------------------------
    A = px
    B = py
    L = math.hypot(A, B)               # √(A² + B²)

    # Reachability is guaranteed by the exercise statement
    cos_arg = _CONST_Y / L
    # Numerical safety in case of tiny round‑off
    cos_arg = max(-1.0, min(1.0, cos_arg))

    phi   = math.atan2(A, B)           # sin φ = A/L , cos φ = B/L
    gamma = math.acos(cos_arg)         # γ = arccos( … )

    # Two possible solutions exist; choose the one inside (−π, π]
    q1_candidate_1 = -phi + gamma
    q1_candidate_2 = -phi - gamma
    q1 = _wrap(q1_candidate_1)

    # ------------------------------------------------------------------
    # 2.  Joint‑2 (rotation about Y)
    # ------------------------------------------------------------------
    cos_q1 = math.cos(q1)
    sin_q1 = math.sin(q1)

    # Position expressed in frame after removing q1 rotation
    x1 =  cos_q1 * px + sin_q1 * py          # first row of Rz(−q1)
    z1 =  pz                                 # Z is not affected by Rz
    # x1 = 0.425 sin q2   ;   z1 = 0.425 cos q2
    q2 = math.atan2(x1, z1)                  # atan2(sin, cos)

    q1 = _wrap(q1)
    q2 = _wrap(q2)
    return (q1, q2)
```