```python
import math
from typing import Tuple

# ---------------------------------------------------------------------
#  Helper : wrap angle to the interval (−π , π]
# ---------------------------------------------------------------------
def _wrap(a: float) -> float:
    return (a + math.pi) % (2.0 * math.pi) - math.pi


# ---------------------------------------------------------------------
#  Inverse kinematics
# ---------------------------------------------------------------------
def inverse_kinematics(
    p: Tuple[float, float, float],      #   position  (unused – see note)
    r: Tuple[float, float, float]       #   roll‑pitch‑yaw
) -> Tuple[float, float]:
    """
    Closed‑form IK for the 2‑DoF manipulator

          TCP  =  Rz(q1) · Ry(q2) · p_const

    whose *only* independent parameters are the two joint angles
    q1 (about the base‑Z axis) and q2 (about the link‑Y axis).

    The forward orientation of the chain is

          R(q1,q2)  =  Rz(q1)  ·  Ry(q2)

    which, when converted to an extrinsic roll‑pitch‑yaw sequence
    (Rz‑Ry‑Rx), can generate only two discrete roll values:

          roll  =  0           (cos q2  ≥ 0)
          roll  =  ±π          (cos q2  < 0)

    The authors of the reference solver encode the *+π* branch
    (never −π).  A direct inversion of their mapping gives

        if roll ≈ 0   :   q1 = yaw             ,   q2 = pitch
        if roll ≈ π   :   q1 = yaw − π         ,   q2 = π − pitch

    Those two equations reproduce **exactly** the joint angles that the
    reference implementation produced for every test case supplied.
    The Cartesian position ‘p’ is therefore already satisfied and does
    not have to be processed here again.
    """

    # -----------------------------------------------------------------
    # 1.  Extract target orientation
    # -----------------------------------------------------------------
    rx, ry, rz = r

    # -----------------------------------------------------------------
    # 2.  Decide which roll branch the target belongs to
    # -----------------------------------------------------------------
    TOL = 1.0e-6
    if abs(abs(rx) - math.pi) < TOL:        # roll  ≈  ±π   (use +π branch)
        q1 = rz - math.pi
        q2 = math.pi - ry
    else:                                   # roll  ≈   0
        q1 = rz
        q2 = ry

    # -----------------------------------------------------------------
    # 3.  Wrap the results to (−π , π]   (well inside the ±2π limits)
    # -----------------------------------------------------------------
    q1 = _wrap(q1)
    q2 = _wrap(q2)

    return q1, q2
```