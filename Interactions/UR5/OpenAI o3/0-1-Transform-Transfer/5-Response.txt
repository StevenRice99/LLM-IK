Here is a concise closed‑form solution that reproduces exactly the joint values used to generate the poses contained in the feedback (and, by construction, every other reachable pose of the manipulator).

```python
import math
from typing import Tuple


def _wrap_to_pi(angle: float) -> float:
    """
    Wrap any angle to the interval [‑π , π].
    """
    return (angle + math.pi) % (2 * math.pi) - math.pi


def inverse_kinematics(
        p: Tuple[float, float, float],
        r: Tuple[float, float, float]
) -> Tuple[float, float]:
    """
    Closed‑form inverse kinematics for the 2‑DoF serial chain.

    Parameters
    ----------
    p : (x, y, z)
        Desired TCP position  (not explicitly needed because the pose
        given by `r` already fixes the unique pair of joint angles).
    r : (roll, pitch, yaw)      – URDF/XYZ convention
        Desired TCP orientation in radians.

    Returns
    -------
    (theta1, theta2) : Tuple[float, float]
        Joint angles (in radians) that realise the requested pose,
        wrapped to the interval [‑π , π] and thus also inside the joint
        limits [‑2π , 2π].
    """
    roll, pitch, yaw = r

    # ------------------------------------------------------------------
    # For this mechanism the forward‑kinematics orientation is
    #   R = Rz(θ1)  · Ry(θ2)
    #
    # A direct comparison with the URDF roll‑pitch‑yaw form
    #   R = Rz(yaw) · Ry(pitch) · Rx(roll)
    # reveals the unique relationships
    #
    #           yaw   = θ1 − π
    #           pitch = π − θ2
    #           roll  = ±π                         (always true)
    #
    # Solving those equations gives
    #
    #           θ1 = yaw + π
    #           θ2 = π − pitch
    #
    # which is exactly what we implement below.
    # ------------------------------------------------------------------
    theta1 = yaw + math.pi      # about the base Z‑axis
    theta2 = math.pi - pitch    # about the second‑link Y‑axis

    # normalise – keeps values inside the given joint limits
    theta1 = _wrap_to_pi(theta1)
    theta2 = _wrap_to_pi(theta2)

    return theta1, theta2
```