```python
import math
from typing import Tuple


# ──────────────────────────────────────────────────────────────
# constants taken from the URDF
# ──────────────────────────────────────────────────────────────
L = 0.425          #   length along +Z after the second joint       (m)
B = 0.01615        #   constant offset along +Y in link‑2 frame     (m)


# ──────────────────────────────────────────────────────────────
# helpers
# ──────────────────────────────────────────────────────────────
def _wrap(angle: float) -> float:
    """wrap any angle to the interval [−π , π]."""
    return (angle + math.pi) % (2.0 * math.pi) - math.pi


def _ang_diff(a: float, b: float) -> float:
    """shortest signed difference a−b (mod 2π)."""
    return _wrap(a - b)


# ──────────────────────────────────────────────────────────────
# main inverse‑kinematics routine
# ──────────────────────────────────────────────────────────────
def inverse_kinematics(
        p: Tuple[float, float, float],
        r: Tuple[float, float, float]
) -> Tuple[float, float]:
    """
    Closed‑form IK for the 2‑DoF serial manipulator.

    Parameters
    ----------
    p : (x, y, z)
        Desired TCP position (metres) in the base frame.
    r : (roll, pitch, yaw)
        Desired TCP orientation in URDF XYZ‑RPY convention (radians).

    Returns
    -------
    (θ1, θ2) : Tuple[float, float]
        Joint angles in radians that realise the requested pose.
    """
    x_d, y_d, z_d = p
    roll_d, pitch_d, yaw_d = r

    # ------------------------------------------------------------------
    # 1.  Solve the position part –  two possible signs for sin θ2
    # ------------------------------------------------------------------
    cos_t2 = max(-1.0, min(1.0, z_d / L))          #  clamp for safety
    abs_t2 = math.acos(cos_t2)                      #  |θ2|

    candidates = []                                 #  (θ1 , θ2 , roll̂, pitcĥ, yaŵ)

    for theta2 in (abs_t2, -abs_t2):                #  try both signs
        sin_t2 = math.sin(theta2)
        A = L * sin_t2
        denom = A * A + B * B                       #  never zero

        #  θ1 from XY–projection
        C = (A * x_d + B * y_d) / denom
        S = (-B * x_d + A * y_d) / denom
        theta1 = math.atan2(S, C)

        # ------------------------------------------------------------------
        # 2.  Corresponding orientation that the mechanism can generate
        # ------------------------------------------------------------------
        if cos_t2 >= 0.0:                           #  c2  ≥ 0  →  roll = 0
            roll_p   = 0.0
            pitch_p  = theta2
            yaw_p    = _wrap(theta1)
        else:                                       #  c2  < 0  →  roll = π
            roll_p   = math.pi
            pitch_p  = _wrap(math.pi - theta2)
            yaw_p    = _wrap(theta1 + math.pi)

        candidates.append((theta1, theta2, roll_p, pitch_p, yaw_p))

    # ------------------------------------------------------------------
    # 3.  Pick the candidate whose generated orientation is closest
    #     (the position is exact for both).
    # ------------------------------------------------------------------
    best, best_err = None, float('inf')

    for th1, th2, r_p, p_p, y_p in candidates:
        err = (abs(_ang_diff(r_p, roll_d)) +
               abs(_ang_diff(p_p, pitch_d)) +
               abs(_ang_diff(y_p, yaw_d)))
        if err < best_err:
            best_err = err
            best = (th1, th2)

    # wrap to [‑π , π]  (inside the joint limits ±2π given in the task)
    theta1_final = _wrap(best[0])
    theta2_final = _wrap(best[1])

    return theta1_final, theta2_final
```