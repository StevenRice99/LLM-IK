```python
import numpy as np

# ------------------------------------------------------------------------
# Helper rotation matrices ------------------------------------------------
# ------------------------------------------------------------------------
def _rotx(a: float) -> np.ndarray:
    ca, sa = np.cos(a), np.sin(a)
    return np.array([[1, 0, 0],
                     [0, ca, -sa],
                     [0, sa,  ca]])

def _roty(a: float) -> np.ndarray:
    ca, sa = np.cos(a), np.sin(a)
    return np.array([[ ca, 0,  sa],
                     [  0, 1,   0],
                     [-sa, 0,  ca]])

def _rotz(a: float) -> np.ndarray:
    ca, sa = np.cos(a), np.sin(a)
    return np.array([[ca, -sa, 0],
                     [sa,  ca, 0],
                     [ 0,   0, 1]])
# ------------------------------------------------------------------------


def inverse_kinematics(
        p: tuple[float, float, float],
        r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Closed–form inverse kinematics for the 3‑DOF arm defined in the DETAILS
    section of the prompt.

    Parameters
    ----------
    p : (x, y, z)
        Desired TCP position expressed in the base frame [metres].
    r : (roll, pitch, yaw)
        Desired TCP orientation given as intrinsic R‑P‑Y Euler angles
        (rotations about X, then Y, then Z) [radians].

    Returns
    -------
    (θ1, θ2, θ3) :
        Joint values (radians) for Revolute‑1, Revolute‑2 and Revolute‑3.
    """

    # --------------------------------------------------------------------
    # CONSTANT GEOMETRY (metres) -----------------------------------------
    # --------------------------------------------------------------------
    d1 = np.array([0.0,  0.13585, 0.0])     # translation to joint‑2
    d2 = np.array([0.0, -0.11970, 0.42500]) # to joint‑3   (Y then Z)
    d3 = np.array([0.0,  0.0,     0.39225]) # to TCP along Z of link‑3
    #
    # For conciseness in formulas that follow
    a = d3[2]       # 0.39225 (length of last link measured along Z)
    b = d2[2]       # 0.425   (distance joint‑2 → joint‑3 along Z)
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # Desired rotation matrix --------------------------------------------
    # --------------------------------------------------------------------
    roll, pitch, yaw = r
    R_d = _rotz(yaw) @ _roty(pitch) @ _rotx(roll)
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # STEP 1 – θ1 and (θ2+θ3) from orientation ---------------------------
    #         The overall orientation is R = Rz(θ1) Ry(θ2+θ3)
    # --------------------------------------------------------------------
    # θ1 (rotation about base Z)
    theta1 = np.arctan2(-R_d[0, 1], R_d[1, 1])  # uses column‑1, independent of pitch
    # Total pitch about Y after the first joint
    theta23 = np.arctan2(-R_d[2, 0], R_d[2, 2])
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # STEP 2 – reduce the position problem to the joint‑2 frame ----------
    # --------------------------------------------------------------------
    p = np.asarray(p, dtype=float)
    # Bring the desired position into the frame of joint‑2’s origin
    p1 = _rotz(-theta1) @ (p - d1)            # (x1, y1, z1)

    # y–component must equal the fixed offset of d2 (−0.1197) for a
    # reachable target.  Numerical noise is ignored.
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # STEP 3 – solve for θ3 from the law of cosines in the XZ‑plane -------
    # --------------------------------------------------------------------
    # Required projection length in XZ plane
    L2 = p1[0] ** 2 + p1[2] ** 2

    # Law of cosines:  L² = a² + b² + 2ab cos θ3  →  cos θ3 = (...)
    c2 = (L2 - (a * a + b * b)) / (2.0 * a * b)
    c2 = np.clip(c2, -1.0, 1.0)               # numerical safety
    # Two possible elbow configurations
    theta3_candidates = np.array([np.arccos(c2), -np.arccos(c2)])
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # STEP 4 – pick the candidate that satisfies the full position -------
    # --------------------------------------------------------------------
    def _test_solution(th3: float) -> tuple[float, float]:
        # w vector in joint‑2 frame
        w_x = a * np.sin(th3)
        w_y = d2[1]                           # constant −0.1197
        w_z = b + a * np.cos(th3)

        # θ2 = θ23 − θ3
        th2 = theta23 - th3

        # Rotate w by θ2 about Y to get predicted position
        px =  np.cos(th2) * w_x + np.sin(th2) * w_z
        py =  w_y
        pz = -np.sin(th2) * w_x + np.cos(th2) * w_z

        err = np.linalg.norm(np.array([px, py, pz]) - p1)
        return err, th2

    # Evaluate both possibilities and keep the better one
    errs_t2 = [_test_solution(t3) for t3 in theta3_candidates]
    best_idx  = int(np.argmin([e[0] for e in errs_t2]))
    theta3    = theta3_candidates[best_idx]
    theta2    = errs_t2[best_idx][1]
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # Normalise angles to within [−π, π] just for neatness ---------------
    # --------------------------------------------------------------------
    def _wrap(a: float) -> float:
        return (a + np.pi) % (2.0 * np.pi) - np.pi

    theta1 = _wrap(theta1)
    theta2 = _wrap(theta2)
    theta3 = _wrap(theta3)
    # --------------------------------------------------------------------
    return float(theta1), float(theta2), float(theta3)
```