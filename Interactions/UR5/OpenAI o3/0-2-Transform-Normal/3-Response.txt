The position‐error arose because the translation that separates the first and the second joint ( d1 ) must be subtracted **after** the target point has been rotated back into the frame of joint‑2.  
A single line therefore has to change:

```python
# OLD (translation was removed before the rotation – wrong)
p1 = _rotz(-theta1) @ (p - d1)

# NEW (first rotate the target, then remove the *un‑rotated* offset)
p1 = _rotz(-theta1) @ p - d1
```

Putting that fix into the original routine yields the correct inverse‑kinematics:

```python
import numpy as np

# ------------------------------------------------------------------------
# Helper rotation matrices ------------------------------------------------
# ------------------------------------------------------------------------
def _rotx(a: float) -> np.ndarray:
    ca, sa = np.cos(a), np.sin(a)
    return np.array([[1, 0, 0],
                     [0, ca, -sa],
                     [0, sa,  ca]])

def _roty(a: float) -> np.ndarray:
    ca, sa = np.cos(a), np.sin(a)
    return np.array([[ ca, 0,  sa],
                     [  0, 1,   0],
                     [-sa, 0,  ca]])

def _rotz(a: float) -> np.ndarray:
    ca, sa = np.cos(a), np.sin(a)
    return np.array([[ca, -sa, 0],
                     [sa,  ca, 0],
                     [ 0,   0, 1]])
# ------------------------------------------------------------------------


def inverse_kinematics(
        p: tuple[float, float, float],
        r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Closed–form inverse kinematics for the 3‑DOF arm defined in the DETAILS
    section of the prompt.

    Parameters
    ----------
    p : (x, y, z)
        Desired TCP position expressed in the base frame [metres].
    r : (roll, pitch, yaw)
        Desired TCP orientation given as intrinsic R‑P‑Y Euler angles
        (rotations about X, then Y, then Z) [radians].

    Returns
    -------
    (θ1, θ2, θ3) :
        Joint values (radians) for Revolute‑1, Revolute‑2 and Revolute‑3.
    """

    # --------------------------------------------------------------------
    # CONSTANT GEOMETRY (metres) -----------------------------------------
    # --------------------------------------------------------------------
    d1 = np.array([0.0,  0.13585, 0.0])     # translation to joint‑2
    d2 = np.array([0.0, -0.11970, 0.42500]) # to joint‑3
    d3 = 0.39225                            # TCP offset along Z of link‑3
    #
    a = d3          # = 0.39225
    b = d2[2]       # = 0.425
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # Desired rotation matrix --------------------------------------------
    # --------------------------------------------------------------------
    roll, pitch, yaw = r
    R_d = _rotz(yaw) @ _roty(pitch) @ _rotx(roll)
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # STEP 1 – θ1 and (θ2+θ3) from orientation ---------------------------
    # --------------------------------------------------------------------
    theta1  = np.arctan2(-R_d[0, 1], R_d[1, 1])          # R[0,1]=−sinθ1
    theta23 = np.arctan2(-R_d[2, 0], R_d[2, 2])          # R[2,0]=−sin(θ2+θ3)
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # STEP 2 – target in joint‑2 frame (fixed bug here) ------------------
    # --------------------------------------------------------------------
    p      = np.asarray(p, dtype=float)
    p1     = _rotz(-theta1) @ p - d1                      # <── FIX
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # STEP 3 – θ3 from the law of cosines -------------------------------
    # --------------------------------------------------------------------
    L2 = p1[0] ** 2 + p1[2] ** 2
    c2 = (L2 - (a * a + b * b)) / (2.0 * a * b)
    c2 = np.clip(c2, -1.0, 1.0)
    theta3_candidates = np.array([np.arccos(c2), -np.arccos(c2)])
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # STEP 4 – evaluate both elbow solutions -----------------------------
    # --------------------------------------------------------------------
    def _test(th3: float) -> tuple[float, float]:
        w_x = a * np.sin(th3)
        w_y = d2[1]                    # −0.1197
        w_z = b + a * np.cos(th3)

        th2 = theta23 - th3            # θ2 = θ23 − θ3

        # predicted position in joint‑2 frame
        px =  np.cos(th2) * w_x + np.sin(th2) * w_z
        py =  w_y
        pz = -np.sin(th2) * w_x + np.cos(th2) * w_z

        err = np.linalg.norm(np.array([px, py, pz]) - p1)
        return err, th2

    errs_t2 = [_test(t3) for t3 in theta3_candidates]
    best    = int(np.argmin([e[0] for e in errs_t2]))
    theta3  = float(theta3_candidates[best])
    theta2  = float(errs_t2[best][1])
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # Wrap angles to (−π, π] --------------------------------------------
    # --------------------------------------------------------------------
    wrap = lambda a: (a + np.pi) % (2.0 * np.pi) - np.pi
    return wrap(theta1), wrap(theta2), wrap(theta3)
```