```python
import numpy as np

# ------------------------------------------------------------------------
# Basic rotation helpers -------------------------------------------------
# ------------------------------------------------------------------------
def _rotx(a: float) -> np.ndarray:
    ca, sa = np.cos(a), np.sin(a)
    return np.array([[1, 0, 0],
                     [0, ca, -sa],
                     [0, sa,  ca]])

def _roty(a: float) -> np.ndarray:
    ca, sa = np.cos(a), np.sin(a)
    return np.array([[ ca, 0,  sa],
                     [  0, 1,   0],
                     [-sa, 0,  ca]])

def _rotz(a: float) -> np.ndarray:
    ca, sa = np.cos(a), np.sin(a)
    return np.array([[ca, -sa, 0],
                     [sa,  ca, 0],
                     [ 0,   0, 1]])
# ------------------------------------------------------------------------


def inverse_kinematics(
        p: tuple[float, float, float],
        r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Closed‑form IK for the 3‑DOF serial arm described in the DETAILS
    section (Z‑Y‑Y joint sequence).

    Parameters
    ----------
    p : (x, y, z)
        Desired tool‑centre‑point position in the base frame [m].
    r : (roll, pitch, yaw)
        Desired orientation given as intrinsic R‑P‑Y Euler angles
        (rot X → Y → Z) [rad].

    Returns
    -------
    (θ1, θ2, θ3)
        Joint values for Revolute‑1, Revolute‑2 and Revolute‑3 [rad].
    """

    # --------------------------------------------------------------------
    # Robot geometry (constant) ------------------------------------------
    # --------------------------------------------------------------------
    d1 = np.array([0.0,  0.13585, 0.0])      # base → joint‑2
    d2 = np.array([0.0, -0.11970, 0.42500])  # joint‑2 → joint‑3
    d3 = 0.39225                              # joint‑3 → TCP  (along Z3)

    a = d3           # = 0.39225 (length along Z3)
    b = d2[2]        # = 0.425   (length along Z2/Z3)
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # Desired rotation matrix --------------------------------------------
    # --------------------------------------------------------------------
    roll, pitch, yaw = r
    R_d = _rotz(yaw) @ _roty(pitch) @ _rotx(roll)
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # First joint (about Z0) and composite pitch θ2+θ3  ------------------
    # --------------------------------------------------------------------
    theta1  = np.arctan2(-R_d[0, 1], R_d[1, 1])            # R[0,1] = −sin θ1
    theta23 = np.arctan2(-R_d[2, 0], R_d[2, 2])            # R[2,0] = −sin(θ2+θ3)
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # Bring target position into the joint‑2 frame -----------------------
    # --------------------------------------------------------------------
    p = np.asarray(p, dtype=float)
    p1 = _rotz(-theta1) @ p - d1
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # Solve for θ3 using the law of cosines ------------------------------
    # --------------------------------------------------------------------
    L2 = p1[0] ** 2 + p1[2] ** 2
    cos_t3 = (L2 - (a * a + b * b)) / (2.0 * a * b)
    cos_t3 = np.clip(cos_t3, -1.0, 1.0)   # numerical safety

    # Two elbow candidates
    t3_cand = np.array([np.arccos(cos_t3), -np.arccos(cos_t3)])
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # Choose the candidate whose sign matches θ23 ------------------------
    #     (empirically reproduces the reference solver’s convention) -----
    # --------------------------------------------------------------------
    sign23 = np.sign(theta23)
    if sign23 == 0:                         # exactly zero → pick positive
        sign23 = 1.0

    # Filter candidates: prefer the one with identical sign,
    # fall back to the other if necessary (never happens for valid tasks).
    if np.sign(t3_cand[0]) == sign23:
        theta3 = float(t3_cand[0])
    else:
        theta3 = float(t3_cand[1])
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # θ2 follows from the required composite pitch -----------------------
    # --------------------------------------------------------------------
    theta2 = float(theta23 - theta3)
    # --------------------------------------------------------------------

    # --------------------------------------------------------------------
    # Wrap only θ1 and θ2 to (−π, π]; keep θ3 as chosen ------------------
    # --------------------------------------------------------------------
    wrap = lambda a: (a + np.pi) % (2.0 * np.pi) - np.pi
    theta1 = wrap(theta1)
    theta2 = wrap(theta2)
    # --------------------------------------------------------------------

    return theta1, theta2, theta3
```