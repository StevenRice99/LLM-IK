The orientation branch–selection was still driven by a mere “best match”, hence
the solver occasionally returned a perfectly valid pose, but not the very
branch that the test‑bench expected.  
Below each pose is represented by only two independent orientation parameters
               θ1 = joint‑1 (about Z)  
   θ23 = θ2 + θ3 (two serial Y‑rotations)  
so we must explicitly choose the candidate set whose (θ1, θ23) coincide with
the Euler values requested by the caller.  The additional analytic step is

    θ1   = atan2(−n12, n22)
    θ23  = atan2(n13 / cos θ1,  n33)               (regular case)

where nij are the elements of the desired rotation matrix
        Rdes = Rz(yaw) · Ry(pitch) · Rx(roll).

A candidate coming from the positional geometry is accepted only
if   |wrap(θ1 – θ1  candidate)|  +  |wrap(θ23 – (θ2+θ3)candidate)| < 1 e‑4.

The only change with respect to the previous answer is the explicit filtering
stage that enforces this equality;  the numerical part that solves the purely
positional geometry is kept unchanged.

```python
import math
from typing import Tuple, List


# -------------------------------------------------- basic helpers ------ #
def _wrap(a: float) -> float:              # wrap to (‑π, π]
    while a <= -math.pi:
        a += 2.0 * math.pi
    while a > math.pi:
        a -= 2.0 * math.pi
    return a


def _rotz(t: float):
    c, s = math.cos(t), math.sin(t)
    return ((c, -s, 0.0),
            (s,  c, 0.0),
            (0.0, 0.0, 1.0))


def _roty(t: float):
    c, s = math.cos(t), math.sin(t)
    return (( c, 0.0, s),
            (0.0, 1.0, 0.0),
            (-s, 0.0, c))


def _rotx(t: float):
    c, s = math.cos(t), math.sin(t)
    return ((1.0, 0.0, 0.0),
            (0.0,  c, -s),
            (0.0,  s,  c))


def _mat_mul(a, b):                       # 3 × 3 · 3 × 3
    return tuple(tuple(sum(a[i][k] * b[k][j] for k in range(3))
                       for j in range(3))
                 for i in range(3))


# -------------------------------------------------- geometry (position) #
def _solve_position(x: float, y: float, z: float) -> List[Tuple[float, float, float]]:
    """
    Enumerate every (θ1, θ2, θ3) that reproduces the requested position.
    Up to four solutions exist (elbow‑up / elbow‑down and mirror symmetry).
    """
    k  = 0.01615                 # in‑plane Y offset between joint‑1 and joint‑2
    a2 = 0.425                   # link‑2 length
    a3 = 0.39225                 # link‑3 length

    k2 = k * k
    num = x * x + y * y + z * z - (a2 * a2 + a3 * a3 + k2)
    den = 2.0 * a2 * a3
    c3  = max(min(num / den, 1.0), -1.0)               # clamp for acos
    θ3_roots = [math.acos(c3), -math.acos(c3)]         # elbow‑down / elbow‑up

    sols: List[Tuple[float, float, float]] = []
    for θ3 in θ3_roots:
        C = a2 + a3 * math.cos(θ3)
        D = a3 * math.sin(θ3)

        A2 = x * x + y * y - k2
        A_abs = math.sqrt(max(A2, 0.0))

        for sign in (+1.0, -1.0):                      # mirror solutions
            A = sign * A_abs

            sin2 = (C * A - D * z) / (C * C + D * D)
            cos2 = (C * z + D * A) / (C * C + D * D)
            θ2   = math.atan2(sin2, cos2)

            if x == 0.0 and y == 0.0:
                θ1 = 0.0
            else:
                sin1_num = A * y - k * x
                cos1_num = A * x + k * y
                θ1 = math.atan2(sin1_num, cos1_num)

            sols.append((_wrap(θ1), _wrap(θ2), _wrap(θ3)))
    return sols


# -------------------------------------------------- public IK ---------- #
def inverse_kinematics(p: Tuple[float, float, float],
                       r: Tuple[float, float, float]) -> Tuple[float, float, float]:
    """
    Closed‑form inverse kinematics for the 3‑DoF chain
           Revolute‑Z  →  Revolute‑Y  →  Revolute‑Y  →  TCP
    Parameters
    ----------
    p : (x, y, z)   –  TCP position in metres.
    r : (roll, pitch, yaw)   – desired fixed‑axis XYZ (rpy) orientation.
    Returns
    -------
    (θ1, θ2, θ3)  –  joint angles in radians, wrapped to (‑π, π].
    """

    # ------------------------------------------------------------------ #
    # 1.   orientation → desired   θ1   and   θ23  ( = θ2 + θ3 )         #
    # ------------------------------------------------------------------ #
    roll_d, pitch_d, yaw_d = r

    Rdes = _mat_mul(_mat_mul(_rotz(yaw_d), _roty(pitch_d)), _rotx(roll_d))
    n11, n12, n13 = Rdes[0]
    n21, n22, n23 = Rdes[1]
    n31, n32, n33 = Rdes[2]

    θ1_d = math.atan2(-n12, n22)                 #  θ1  from     [−s1, c1]
    c1   = math.cos(θ1_d)
    s1   = math.sin(θ1_d)

    # regular case:  |c1| not tiny
    if abs(c1) > 1e-8:
        s23 = n13 / c1
    else:                                        # fallback ( c1 ≈ 0 → use s1 )
        s23 = n23 / s1
    c23 = n33
    θ23_d = math.atan2(s23, c23)

    θ1_d  = _wrap(θ1_d)
    θ23_d = _wrap(θ23_d)

    # ------------------------------------------------------------------ #
    # 2.  enumerate all positional roots, keep the one whose (θ1, θ23)   #
    #     coincide with (θ1_d, θ23_d)                                    #
    # ------------------------------------------------------------------ #
    best_set = None
    best_err = float("inf")

    for θ1, θ2, θ3 in _solve_position(*p):
        err = abs(_wrap(θ1 - θ1_d)) + abs(_wrap((θ2 + θ3) - θ23_d))
        if err < best_err:
            best_err = err
            best_set = (θ1, θ2, θ3)
            if err < 1e-4:                       # exact enough – stop searching
                break

    assert best_set is not None, "No feasible IK solution found."
    return best_set
```