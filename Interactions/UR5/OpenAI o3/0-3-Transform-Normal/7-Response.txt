```python
import math
import numpy as np


# --------------------------------------------------------------------------- #
#                             kinematic constants                             
# --------------------------------------------------------------------------- #
# (all dimensions in metres – copied unaltered from the DETAILS section)
A1 = 0.13585          # between joint‑1  and joint‑2   ( +Y )
A2 = -0.11970         # between joint‑2  and joint‑3   ( –Y )
A4 = 0.093            # between joint‑4  and TCP       ( +Y )

CONST_Y = A1 + A2 + A4           # total *fixed* offset along the common Y‑axis
L1      = 0.425                  # link length   joint‑2  → joint‑3   ( +Z )
L2      = 0.39225                # link length   joint‑3  → joint‑4   ( +Z )

TOL = 1.0e-6                     # numerical tolerance


# --------------------------------------------------------------------------- #
# small helpers                                                               #
# --------------------------------------------------------------------------- #
def _rpy_to_matrix(roll: float, pitch: float, yaw: float) -> np.ndarray:
    """Convert URDF/ROS fixed‑axis RPY (XYZ order) to a 3 × 3 rotation matrix."""
    sr, cr = math.sin(roll),  math.cos(roll)
    sp, cp = math.sin(pitch), math.cos(pitch)
    sy, cy = math.sin(yaw),   math.cos(yaw)
    return np.array([[ cy*cp,  cy*sp*sr - sy*cr,  cy*sp*cr + sy*sr],
                     [ sy*cp,  sy*sp*sr + cy*cr,  sy*sp*cr - cy*sr],
                     [   -sp,               cp*sr,               cp*cr]])


def _wrap(angle: float) -> float:
    """wrap angle to  ( –π , π ]"""
    return (angle + math.pi) % (2.0 * math.pi) - math.pi


# --------------------------------------------------------------------------- #
#                            inverse kinematics                               #
# --------------------------------------------------------------------------- #
def inverse_kinematics(
        p: tuple[float, float, float],
        r: tuple[float, float, float]) -> tuple[float, float, float, float]:
    """
    Closed‑form IK for the 4‑DoF manipulator described in the task.

    Parameters
    ----------
    p : (x, y, z)
        Target TCP position in the base frame  [m].
    r : (roll, pitch, yaw)
        Target TCP orientation given as URDF/ROS RPY angles  [rad].

    Returns
    -------
    (θ₁, θ₂, θ₃, θ₄)  : tuple[float, float, float, float]
        Joint values (radians) that realise the requested pose.
    """

    # ------------------------------------------------------------------- 1 ---
    # extract the two orientation parameters that our arm *can* realise
    #  (R = Rz(θ₁) · Ry(φ)   – roll about X cannot be produced)
    R_des = _rpy_to_matrix(*r)

    # pitch  φ  and *one* possible yaw θ₁ (see derivation in analysis)
    phi     = math.atan2(-R_des[2, 0], R_des[2, 2])
    theta1  = math.atan2(-R_des[0, 1], R_des[1, 1])   # uses column‑1 – immune to roll

    # two ambiguous solutions arising from the roll that we cannot reproduce:
    #    (θ₁,      φ)             produces  Rz(θ₁) · Ry(φ)
    #    (θ₁+π,  π–φ)  produces  Rz(θ₁) · Ry(φ) · Rx(π)   (roll of 180°)
    cand_orientations = [
        (_wrap(theta1),          _wrap(phi)),
        (_wrap(theta1 + math.pi), _wrap(math.pi - phi))
    ]

    # we will collect every valid (θ₁, θ₂, θ₃, θ₄) here together with an error
    best_solution = None
    best_error    = float('inf')

    # coordinates of target position
    x, y, z = p

    # loop over both yaw/pitch candidates
    for th1, phi_cand in cand_orientations:
        c1, s1 = math.cos(th1), math.sin(th1)

        # position expressed in the frame that follows joint‑1 (rotate by –θ₁)
        x_p =  c1 * x + s1 * y
        y_p = -s1 * x + c1 * y
        z_p =  z

        # this Y component must be (almost) the constant offset
        y_err = abs(y_p - CONST_Y)
        if y_err > best_error + 1e-4:          # heuristic prune
            continue

        # ---------------------------------------------------------------- 1.1
        # planar 2‑link IK in the XZ‑plane (link lengths L1, L2)
        x_c, z_c = x_p, z_p
        D_sq     = x_c * x_c + z_c * z_c
        D        = math.sqrt(D_sq)

        # numerical safety clamp for the cosine
        cos_t3 = (D_sq - L1 * L1 - L2 * L2) / (2.0 * L1 * L2)
        if not -1.0 <= cos_t3 <= 1.0:          # unreachable with this (θ₁,φ) pair
            continue
        cos_t3 = max(-1.0, min(1.0, cos_t3))
        sin_t3_abs = math.sqrt(1.0 - cos_t3 * cos_t3)

        # elbow‑up *and* elbow‑down
        for sin_sign in (+1, -1):
            sin_t3 = sin_sign * sin_t3_abs
            t3     = math.atan2(sin_t3, cos_t3)

            k1 = L1 + L2 * cos_t3
            k2 = L2 * sin_t3

            gamma = math.atan2(x_c, z_c)           # direction to wrist
            delta = math.atan2(k2, k1)

            t2 = gamma - delta                     # geometric solution
            t4 = phi_cand - t2 - t3                # close the orientation chain

            # wrap all angles
            t2 = _wrap(t2)
            t3 = _wrap(t3)
            t4 = _wrap(t4)

            # ------------------------------------------------------------ 1.2
            # evaluate how well this quadruple satisfies the position
            # (only the *Y* error is not forced to zero by the analytical steps)
            total_err = y_err                      # current metric

            if total_err < best_error - TOL:
                best_error   = total_err
                best_solution = ( _wrap(th1), t2, t3, t4 )

    # specification guarantees reachability → best_solution must exist
    if best_solution is None:
        raise RuntimeError("Target declared reachable but no IK solution found.")

    return best_solution
```