```python
import math

def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians in the form [roll, pitch, yaw].
              (For this 2‑DOF chain the end‑effector roll is always zero;
               pitch corresponds to joint 2, yaw to joint 1.)
    :return: (q1, q2) the angles for revolute joint 1 (about Z) and joint 2 (about Y).
    """
    x, y, z = p

    # Joint 1 (about Z) is simply the yaw of the end‑effector:
    _, _, yaw = r
    q1 = yaw

    # Rotate the world‑frame target into the joint2 frame by −q1:
    # this “undoes” the z‑rotation so that the remaining elevation
    # is from joint 2 about Y.
    c1 = math.cos(q1)
    s1 = math.sin(q1)
    x_local =  c1 * x + s1 * y
    z_local = z

    # Joint 2 (about Y) must satisfy:
    #   [ x_local ]   [  0.425*sin(q2) ]
    #   [ z_local ] = [  0.425*cos(q2) ]
    # so tan(q2) = x_local / z_local
    q2 = math.atan2(x_local, z_local)

    return q1, q2
```