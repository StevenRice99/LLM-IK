```python
import math

def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]) -> tuple[float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r".
    :param p: The position to reach in the form [x, y, z].
    :param r: The orientation to reach in radians as [roll, pitch, yaw].
    :return: (q1, q2) angles for the two revolute joints (about Z then Y).
    """
    # unpack orientation
    roll, pitch, yaw = r

    # We know that any Rz(q1)·Ry(q2) can be represented in RPY either
    # with roll ≃ 0 (q1=yaw, q2=pitch) or with roll ≃ ±π
    # (q1=yaw ∓ π, q2=±π − pitch).  The URDF parser gives us one of those
    # two RPY sets; we pick the matching branch.
    #
    # Criterion: is |roll| closer to 0 or to π?
    if abs(roll) < abs(abs(roll) - math.pi):
        # roll is “near” 0 → no extra flip
        q1 = yaw
        q2 = pitch
    else:
        # roll is “near” ±π → compensate by subtracting/adding π
        s = math.copysign(math.pi, roll)
        q1 = yaw - s
        q2 = s - pitch

    return q1, q2
```