```python
import math
from typing import Tuple

def inverse_kinematics(p: Tuple[float, float, float],
                       r: Tuple[float, float, float]) -> Tuple[float, float]:
    """
    Analytic IK for the 2‑DOF serial arm:
      Joint 1: revolute about Z at base
      Link 1:  translate (0, 0.13585, 0)
      Joint 2: revolute about Y
      Link 2:  translate (0, –0.1197, 0.425) → TCP

    :param p: target TCP position [x, y, z]   (unused: orientation fully fixes q₁,q₂ when reachable)
    :param r: target TCP orientation RPY [roll, pitch, yaw]  (in radians)
    :return: (q1, q2) in radians, each wrapped into [–π, π]
    """
    # Unpack and normalize the input RPY into [–π, π]
    r_x, r_y, r_z = r
    roll  = math.atan2(math.sin(r_x), math.cos(r_x))
    pitch = math.atan2(math.sin(r_y), math.cos(r_y))
    yaw   = math.atan2(math.sin(r_z), math.cos(r_z))

    eps = 1e-8
    # The only achievable end‑effector "roll" in Rz(q1)*Ry(q2) is 0 or ±π.
    # Use the sign of `roll` to pick the correct branch for q2 and adjust q1 by ±π.
    if abs(roll) < eps:
        # roll ≃ 0  ⇒ q2 = pitch,        q1 = yaw
        q2 = pitch
        q1 = yaw
    else:
        # roll ≃ ±π ⇒ π – q2 = pitch  ⇒ q2 = π – pitch
        q2 = math.pi - pitch
        # yaw_end = q1 + π = desired yaw  ⇒ adjust q1 by ∓π
        if roll > 0:
            q1 = yaw - math.pi
        else:
            q1 = yaw + math.pi

    # Wrap both joints into [–π, π]
    q1 = math.atan2(math.sin(q1), math.cos(q1))
    q2 = math.atan2(math.sin(q2), math.cos(q2))

    return q1, q2
```