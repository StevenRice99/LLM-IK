```python
import math
from typing import Tuple

def inverse_kinematics(p: Tuple[float, float, float],
                       r: Tuple[float, float, float]) -> Tuple[float, float]:
    """
    Analytic IK for the 2‐DOF arm:
      Joint1: Revolute about Z at base
      Link1:  translate (0, 0.13585, 0)
      Joint2: Revolute about Y
      Link2:  translate (0, –0.1197, 0.425) → TCP

    :param p: Desired TCP position (x,y,z)
    :param r: Desired TCP orientation RPY (roll, pitch, yaw)
    :return: (q1, q2) in radians
    """
    # Unpack
    x, y, z         = p
    roll, pitch, yaw = r

    # We know R_end = Rz(q1)·Ry(q2).  Its extrinsic‐RPY must satisfy:
    #  • If cos(q2) ≥ 0 → roll_end = 0,  pitch_end = q2,         yaw_end = q1
    #  • If cos(q2) <  0 → roll_end = π, pitch_end = π – q2,  yaw_end = q1 + π
    #
    # The user‐supplied roll will always be ≃0 or ≃±π; that fixes q2 and q1 unambiguously.

    eps = 1e-8
    # Branch on roll
    if abs(roll) < eps:
        # roll≈0 ⇒ pitch_end = q2 = given pitch;  yaw_end = q1 = given yaw
        q2 = pitch
        q1 = yaw
    elif abs(abs(roll) - math.pi) < eps:
        # roll≈±π ⇒ π – q2 = pitch  ⇒  q2 = π – pitch
        q2 = math.pi - pitch
        # yaw_end = q1 + π = given yaw
        #   if roll≈ +π, then yaw = q1+π  ⇒ q1 = yaw – π
        #   if roll≈ –π, then yaw = q1+π  ⇒ q1 = yaw – π (but yaw is in [–π,π], so effect is the same)
        # in practice: use sign(roll) only to stay consistent with sign conventions
        if roll > 0:
            q1 = yaw - math.pi
        else:
            q1 = yaw + math.pi
    else:
        # This should never happen if inputs are valid Rz–Ry poses.
        # Fallback to the “zero‐roll” branch.
        q2 = pitch
        q1 = yaw

    # Wrap q1 into [–π, +π] (keeps yaw in a canonical window).
    q1 = math.atan2(math.sin(q1), math.cos(q1))

    # q2 may lie outside [–π, +π] when roll≈π; that’s fine because sin/cos(q2) repeats.
    return q1, q2
```