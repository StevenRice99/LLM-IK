```python
import math

def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Analytic IK for the 3‑DOF arm:
      Joint1: revolute about Z at the base
      Joint2: revolute about Y with +0.13585 m Y‑offset
      Joint3: revolute about Y with +0.425 m Z‑offset, then TCP at +0.39225 m Z

    :param p: target TCP position [x, y, z] in base frame
    :param r: target TCP orientation [roll, pitch, yaw] in radians (extrinsic Rz*Ry*Rx)
    :returns: (q1, q2, q3) in radians
    """
    x, y, z = p
    rx, ry, rz = r

    # wrap angle into (–π, π]
    def wrap(a: float) -> float:
        return math.atan2(math.sin(a), math.cos(a))

    # link offsets
    d4 = 0.39225   # joint3 → TCP along Z
    # planar link length from joint2 → joint3 along Z
    a = 0.425      

    # handle the extrinsic‐rpy singularity at |roll|≈π
    tol = 1e-6
    if abs(abs(rx) - math.pi) < tol:
        # flip yaw by π and invert pitch
        q1  = wrap(rz + math.pi)
        q23 = wrap(math.pi - ry)
    else:
        q1  = wrap(rz)
        q23 = wrap(ry)

    # rotate the world TCP into joint1 frame
    xp =  math.cos(q1)*x + math.sin(q1)*y
    zp =  z

    # solve the 2‑link planar subchain (lengths a, d4) for q2/q3
    # projected planar target = (xp, zp)
    # subtract the contribution of the second link (d4) at angle q23
    num = xp - d4 * math.sin(q23)
    den = zp - d4 * math.cos(q23)

    q2 = math.atan2(num, den)
    q3 = wrap(q23 - q2)

    return (q1, q2, q3)
```