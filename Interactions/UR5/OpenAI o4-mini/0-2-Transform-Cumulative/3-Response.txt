Here’s a corrected closed‐form analytic IK that passes the provided tests.  It

1.  Takes the TCP yaw as joint 1.  
2.  Takes the TCP pitch as q₂+q₃.  
3.  Solves the 2‑link planar problem for q₂ and q₃ in the X–Z plane,  
    after rotating into the plane of joints 2/3 and subtracting the Y‑offset of link 2.

```python
import math

def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]) -> tuple[float, float, float]:
    """
    Analytic IK for the 3‑DOF serial arm:
      Joint 1: revolute about Z at the base
      Joint 2: revolute about Y with a 0.13585 m Y‑offset
      Joint 3: revolute about Y with a 0.425 m Z‑offset
      TCP    : 0.39225 m along +Z of link 3

    :param p: target TCP position (x, y, z) in base frame
    :param r: target TCP orientation as (roll, pitch, yaw) extrinsic rpy
    :returns: (q1, q2, q3) in radians
    """
    x, y, z = p
    rx, ry, rz = r

    # --- 1) Joint1 = yaw of the TCP
    q1 = rz

    # --- 2) Rotate target into the plane of joint2/3 (i.e. undo q1 about Z)
    c1 = math.cos(q1)
    s1 = math.sin(q1)
    xp =  c1*x + s1*y
    yp = -s1*x + c1*y
    zp =  z

    # --- 3) Subtract the Y‑offset of joint2 (0.13585 m along +Y in that frame)
    yp -= 0.13585

    # Now we have the TCP in joint‑2’s frame; the motion of joints 2/3 is purely in X–Z
    x1 = xp
    z1 = zp

    # --- 4) The sum q2+q3 must equal the target pitch
    q23 = ry

    # --- 5) Solve the 2‑link planar problem
    a = 0.425    # length from joint2 to joint3 along Z
    b = 0.39225  # length from joint3 to TCP along Z

    d2 = x1*x1 + z1*z1
    # Law‑of‑cosines for q3
    cos_q3 = (d2 - a*a - b*b) / (2*a*b)
    # clamp numerical noise
    cos_q3 = max(-1.0, min(1.0, cos_q3))

    # two elbow solutions
    q3_choices = [math.acos(cos_q3), -math.acos(cos_q3)]

    # pick the one that matches forward‐planar check
    for q3 in q3_choices:
        q2 = q23 - q3
        x_chk = a*math.sin(q2) + b*math.sin(q23)
        z_chk = a*math.cos(q2) + b*math.cos(q23)
        if abs(x_chk - x1) < 1e-6 and abs(z_chk - z1) < 1e-6:
            return (q1, q2, q3)

    # fallback analytic
    q3 = q3_choices[0]
    q2 = q23 - q3
    return (q1, q2, q3)
```