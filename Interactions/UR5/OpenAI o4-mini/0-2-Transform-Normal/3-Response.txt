Here’s a purely analytical closed‐form IK for the Z–Y–Y arm including the small Y–offsets.  It first “zeroes out” any roll in the given RPY (since the chain cannot produce X‐roll), then extracts the effective yaw and pitch, and finally solves the 2R planar subproblem (link lengths 0.425 and 0.39225 m) with a two‐branch check to pick the correct elbow up/down solution.

```python
import math

def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]
                       ) -> tuple[float, float, float]:
    """
    Gets the joint values needed to reach position "p" and orientation "r" (rpy).
    :param p: The TCP target position [x, y, z].
    :param r: The TCP target orientation in radians [roll, pitch, yaw].
    :return: (q1, q2, q3) in radians.
    """
    x, y, z = p
    roll, pitch, yaw = r

    # --- 1) Eliminate any roll by switching to an equivalent no‐roll RPY branch ---
    eps = 1e-8
    if abs(roll) < eps:
        pitch2 = pitch
        yaw2   = yaw
    elif abs(abs(roll) - math.pi) < eps:
        # roll ≈ ±π: replace (±π, p, y) → (0, π−p, y±π)
        pitch2 = math.pi - pitch
        yaw2   = yaw + math.copysign(math.pi, roll)
    else:
        # out of workspace (not reachable by a pure Z–Y–Y chain)
        raise ValueError(f"Unsupported roll = {roll:.6g}")

    # normalize to (–π, π]
    def wrap(a):
        return (a + math.pi) % (2*math.pi) - math.pi
    pitch2 = wrap(pitch2)
    yaw2   = wrap(yaw2)

    # Joint‐1 = base yaw
    q1    = yaw2
    # Combined pitch = q2+q3
    q_sum = pitch2

    # --- 2) Solve the planar 2R subproblem in the X–Z plane ---
    # kinematic constants:
    L2 = 0.425    # link‐2 z‐offset
    L3 = 0.39225  # TCP z‐offset

    # Project the TCP into the joint‐2 frame, rotated back by q1:
    # A = cos(q1)*px + sin(q1)*py
    # Z = pz
    A = math.cos(q1)*x + math.sin(q1)*y
    Z = z

    # Law‐of‐cosines for q3
    cos_q3 = (A*A + Z*Z - L2*L2 - L3*L3) / (2.0 * L2 * L3)
    # clamp numerical noise
    cos_q3 = max(-1.0, min(1.0, cos_q3))
    q3_candidates = [math.acos(cos_q3), -math.acos(cos_q3)]

    # Choose the branch that best matches the desired q_sum = q2+q3
    best_err = float('inf')
    best_q2  = 0.0
    best_q3  = 0.0

    for q3 in q3_candidates:
        q2 = q_sum - q3
        # forward‐planar check:
        x_pred = L2*math.sin(q2) + L3*math.sin(q2 + q3)
        z_pred = L2*math.cos(q2) + L3*math.cos(q2 + q3)
        err = abs(x_pred - A) + abs(z_pred - Z)
        if err < best_err:
            best_err = err
            best_q2  = q2
            best_q3  = q3

    return (q1, best_q2, best_q3)
```

Explanation of the main steps:
1) Any nonzero “roll” in the input RPY is removed by switching to the equivalent zero‐roll representation (adding or subtracting π in yaw and flipping pitch accordingly).  
2) The resulting yaw becomes joint 1.  The resulting pitch is exactly q₂+q₃.  
3) Project the TCP position into the joint‐2 X–Z plane (no need to ever subtract the small Y–offsets here—they fall out of the A=cos(q1)x+sin(q1)y combination).  
4) Use the law of cosines to get the two possible q₃ branches.  
5) For each branch compute q₂=q_sum−q₃, do a quick forward‐planar check of (x_pred,z_pred) and pick the branch with minimal position error.