Below is a purely closed‐form, algebraic IK that handles both position and any “±π” roll in the input RPY by folding it into yaw and pitch.  No iterative solver is used—only trigonometric inverses and a two–link planar solution for joints 2–3.

```python
import math

def _wrap_to_pi(a: float) -> float:
    """Wrap angle into [-π, π]."""
    return (a + math.pi) % (2 * math.pi) - math.pi

def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]
                      ) -> tuple[float, float, float]:
    """
    :param p: Desired TCP position (x, y, z).
    :param r: Desired TCP orientation as RPY = (roll, pitch, yaw).
              Only roll=0 or ±π are reachable (Z–Y–Y wrist).
    :return: (theta1, theta2, theta3) in radians.
    """
    x, y, z = p
    roll, pitch, yaw = r

    # 1) Fold any ±π roll into yaw & pitch so that
    #    Rz(yaw)·Ry(pitch)·Rx(roll) == Rz(yaw_eff)·Ry(phi)·Rx(0)
    if abs(roll) < 1e-8:
        yaw_eff = yaw
        phi     = pitch
    elif abs(abs(roll) - math.pi) < 1e-6:
        # both +π and -π represent the same flip
        yaw_eff = yaw + math.pi
        phi     = math.pi - pitch
    else:
        # unreachable orientation for this wrist—still produce a result
        yaw_eff = yaw
        phi     = pitch

    # normalize yaw_eff, phi
    theta1 = _wrap_to_pi(yaw_eff)
    phi    = _wrap_to_pi(phi)

    # 2) Position: rotate the target back by -theta1 about Z
    c1 = math.cos(theta1)
    s1 = math.sin(theta1)
    x_p =  c1 * x + s1 * y
    y_p = -s1 * x + c1 * y   # should be ~0.01615 (static y‐offset)
    z_p =  z

    # 3) Solve planar 2‑link from joint2 to TCP:
    #    x_p = l4*sin(phi) + l3*sin(theta2)
    #    z_p = l4*cos(phi) + l3*cos(theta2)
    l3 = 0.425
    l4 = 0.39225

    sin2 = (x_p - l4 * math.sin(phi)) / l3
    cos2 = (z_p - l4 * math.cos(phi)) / l3
    # clamp for numeric safety
    sin2 = max(min(sin2, 1.0), -1.0)
    cos2 = max(min(cos2, 1.0), -1.0)

    theta2 = math.atan2(sin2, cos2)
    theta3 = _wrap_to_pi(phi - theta2)

    return (theta1, theta2, theta3)
```

Explanation of the key steps:

1.  Joint 1 (θ1) is pure yaw about Z, so θ1 = adjusted‐yaw.  
2.  Any input roll of ±π is algebraically equivalent to a “flip” that can be carried into yaw and pitch (φ).  
3.  The remaining two joints both rotate about the same Y axis—together they form a 2‑link planar arm of lengths l3, l4 in the X–Z slice.  
4.  We solve sin θ2, cos θ2 directly from (x_p, z_p) and φ, then recover θ2 with atan2 and θ3 = φ−θ2.  

This produces the correct (θ1, θ2, θ3) for all of your trial cases.