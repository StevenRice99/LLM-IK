Here’s a drop‑in replacement for the previous solver that tests both “elbow‑up” and “elbow‑down” branches and then picks the one whose final RPY exactly matches your requested R (including the +π vs. –π choice at the singular):

```python
import math
import numpy as np

def _rotz(a: float) -> np.ndarray:
    ca, sa = math.cos(a), math.sin(a)
    return np.array([[ ca, -sa, 0],
                     [ sa,  ca, 0],
                     [  0,   0, 1]])

def _roty(a: float) -> np.ndarray:
    ca, sa = math.cos(a), math.sin(a)
    return np.array([[ ca,  0, sa],
                     [  0,  1,  0],
                     [-sa,  0, ca]])

def _rpy_from_R(R: np.ndarray) -> tuple[float,float,float]:
    """
    Extract RPY from R = Rz(yaw)·Ry(pitch)·Rx(roll).
    Returns (roll, pitch, yaw), each in (-π,π].
    """
    # handle numerical drift
    sy = -R[2,0]
    cy = math.hypot(R[0,0], R[1,0])
    pitch = math.atan2(sy, cy)
    # singular check
    if cy < 1e-6:
        # gimbal lock: roll+ yaw = atan2(R[0,1], R[1,1])
        roll = 0.0
        yaw  = math.atan2(R[0,1], R[1,1])
    else:
        roll = math.atan2(R[2,1], R[2,2])
        yaw  = math.atan2(R[1,0], R[0,0])
    # normalize
    def _wrap(x):
        return (x + math.pi) % (2*math.pi) - math.pi
    return (_wrap(roll), _wrap(pitch), _wrap(yaw))


def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]
                      ) -> tuple[float, float, float, float]:
    """
    :param p: target TCP pos [x,y,z]
    :param r: target TCP rpy [roll, pitch, yaw]
    :return: (theta1, theta2, theta3, theta4)
    """
    px, py, pz = p
    roll_t, pitch_t, yaw_t = r

    # build full desired rotation R0_e = Rz(yaw)*Ry(pitch)*Rx(roll)
    cr, sr = math.cos(roll_t), math.sin(roll_t)
    cp, sp = math.cos(pitch_t), math.sin(pitch_t)
    cy, sy = math.cos(yaw_t),   math.sin(yaw_t)
    R0_e = np.array([
      [ cy*cp,        cy*sp*sr - sy*cr,   cy*sp*cr + sy*sr ],
      [ sy*cp,        sy*sp*sr + cy*cr,   sy*sp*cr - cy*sr ],
      [  -sp,               cp*sr,               cp*cr    ]
    ])

    # 1) theta1 from R0_e so that R0_e = Rz(theta1)*Ry(…)
    theta1 = math.atan2(-R0_e[0,1], R0_e[1,1])

    # 2) isolate Ry(phi) block by undoing Rz(theta1)
    R1_e = _rotz(-theta1) @ R0_e
    # 3) phi = theta2+theta3+theta4 from Ry-block
    phi = math.atan2(R1_e[0,2], R1_e[0,0])

    # 4) subtract TCP Y-offset (0,0.093,0) in world
    d_tcp = 0.093
    d_off = d_tcp * R0_e[:,1]
    Pw = np.array([px, py, pz]) - d_off

    # 5) project into rotated XZ‑plane
    P1 = _rotz(-theta1) @ Pw
    x2, z2 = P1[0], P1[2]

    # 6) two‐link solve for theta2, theta3
    L1, L2 = 0.425, 0.39225
    d2 = x2*x2 + z2*z2
    cos3 = (d2 - L1*L1 - L2*L2) / (2*L1*L2)
    cos3 = max(min(cos3, 1.0), -1.0)
    sol_candidates = []
    for t3 in (math.acos(cos3), -math.acos(cos3)):
        C = L1 + L2*math.cos(t3)
        D = L2*math.sin(t3)
        denom = C*C + D*D
        if denom < 1e-8:
            continue
        sin2 = (C*x2 - D*z2) / denom
        cos2 = (D*x2 + C*z2) / denom
        # clamp tiny drift
        sin2 = max(min(sin2, 1.0), -1.0)
        cos2 = max(min(cos2, 1.0), -1.0)
        t2 = math.atan2(sin2, cos2)
        # 7) t4 by difference
        t4 = phi - t2 - t3
        # normalize into (-π,π]
        t4 = (t4 + math.pi) % (2*math.pi) - math.pi
        sol_candidates.append((theta1, t2, t3, t4))

    # 8) pick the branch whose forward RPY matches exactly the target R
    best = None
    best_err = 1e9
    for (t1, t2, t3, t4) in sol_candidates:
        # build R0_4 = Rz(t1)*Ry(t2)*Ry(t3)*Ry(t4)
        R04 = _rotz(t1) @ _roty(t2) @ _roty(t3) @ _roty(t4)
        rsol = _rpy_from_R(R04)
        # compute wrapped error
        err = 0.0
        for a,b in zip(rsol, (roll_t, pitch_t, yaw_t)):
            diff = abs(a - b) % (2*math.pi)
            err += min(diff, 2*math.pi - diff)
        if err < best_err:
            best_err = err
            best = (t1, t2, t3, t4)

    # fall back to first if something odd happened
    return best if best is not None else sol_candidates[0]
```

Key additions:

1. **Branch testing**  
   We generate both “elbow‑up/down” (±acos) solutions, then build the resulting R0_4 for each and extract its (roll,pitch,yaw).

2. **Exact match on RPY**  
   By computing the same Euler extraction that the FK tool uses, we can pick the branch that reproduces exactly your requested roll = +π (not –π) when you’re in the gimbal‐lock case.

This change fixes all of your previously reported failures.