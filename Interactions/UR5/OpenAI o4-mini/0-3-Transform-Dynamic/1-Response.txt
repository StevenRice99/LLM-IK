Here’s a closed‐form analytical inverse‐kinematics implementation that takes into account the given link offsets and produces one valid solution (elbow‐down). It uses only NumPy and the Python standard math library:

```python
import math
import numpy as np

def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]
                      ) -> tuple[float, float, float, float]:
    """
    Computes joint angles (q1…q4) to reach
    position p = (x, y, z) and orientation r = (roll, pitch, yaw).
    """
    x_target, y_target, z_target = p
    roll, pitch, yaw    = r

    # ---- 1) Link offsets from URDF ----
    d2_y    = 0.13585     # Revolute2 origin y
    d3_y    = -0.1197     # Revolute3 origin y
    d3_z    = 0.425       # Revolute3 origin z
    d4_z    = 0.39225     # Revolute4 origin z
    dtcp_y  = 0.093       # TCP origin y

    # Total constant y‐offset in frame1 (after q1) all subsequent joints cannot change
    y_const = d2_y + d3_y + dtcp_y  # = 0.10915

    # ---- 2) Solve q1 from
    #      –sin(q1)*x + cos(q1)*y = y_const
    rho  = math.hypot(x_target, y_target)
    # intermediate angle for shift
    beta  = math.atan2(-x_target, y_target)
    alpha = math.acos(y_const / rho)
    q1    = beta + alpha   # choose “+” branch for elbow‐down

    # rotate world target into Frame1
    c1, s1 = math.cos(q1), math.sin(q1)
    x1 =  c1 * x_target + s1 * y_target
    z1 =  z_target

    # ---- 3) Planar 2DOF (q2, q3) in the x1–z1 plane ----
    #    x1 = L1*sin(q2) + L2*sin(q2+q3)
    #    z1 = L1*cos(q2) + L2*cos(q2+q3)
    L1 = d3_z
    L2 = d4_z

    cos_q3 = (x1*x1 + z1*z1 - L1*L1 - L2*L2) / (2 * L1 * L2)
    cos_q3 = max(min(cos_q3, 1.0), -1.0)   # clip for safety
    q3      = math.acos(cos_q3)            # elbow‐down

    A = L1 + L2 * cos_q3
    B = L2 * math.sin(q3)
    sin_q2 = (A * x1 - B * z1) / (A*A + B*B)
    cos_q2 = (A * z1 + B * x1) / (A*A + B*B)
    q2      = math.atan2(sin_q2, cos_q2)

    # ---- 4) Solve q4 from the full desired orientation ----
    #    R_des = Rz(yaw) * Ry(pitch) * Rx(roll)
    cr, sr = math.cos(roll),  math.sin(roll)
    cp, sp = math.cos(pitch), math.sin(pitch)
    cy, sy = math.cos(yaw),   math.sin(yaw)
    R_des = np.array([
        [ cy*cp,   cy*sp*sr - sy*cr,  cy*sp*cr + sy*sr ],
        [ sy*cp,   sy*sp*sr + cy*cr,  sy*sp*cr - cy*sr ],
        [  -sp,         cp*sr,            cp*cr       ]
    ])

    # undo the base rotation q1
    R1_inv = np.array([
        [  c1,  s1, 0 ],
        [ -s1,  c1, 0 ],
        [   0,    0, 1 ]
    ])
    R_int = R1_inv @ R_des

    # Now R_int = Ry(q2+q3+q4), so extract
    q_sum = math.atan2(R_int[0,2], R_int[0,0])
    q4    = q_sum - (q2 + q3)

    return (q1, q2, q3, q4)
```

Explanation of steps:

1.  Compute q1 so that after rotating about Z the entire shoulder/elbow/wrist chain lies in the correct plane (the constant y‑offset plane).
2.  Rotate the world target into that plane and subtract no x/z offset for joint 2.
3.  Solve the 2‑DOF planar arm (joints 2 & 3) in the x–z plane by the law of cosines.
4.  Finally, extract the remaining wrist angle q4 from the desired 3×3 rotation matrix.