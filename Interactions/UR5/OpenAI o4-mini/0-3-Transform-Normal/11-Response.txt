Here’s a single‐pass, purely analytical implementation that tries both θ₁ branches from the planar “joint‑offset” equation, then both elbow (“±√”) branches for θ₃, and picks the elbow branch that makes the residual wrist joint θ₄ smallest in magnitude.  No iteration or optimization is used—only `atan2`, `acos`, `sqrt` and a couple of discrete comparisons.

```python
import math
from typing import Tuple

def inverse_kinematics(p: Tuple[float, float, float],
                       r: Tuple[float, float, float]
                      ) -> Tuple[float, float, float, float]:
    """
    Closed‐form IK for the 4‑DOF Rz–Ry–Ry–Ry arm.
    :param p: Desired TCP position (x,y,z).
    :param r: Desired TCP RPY = (roll,pitch,yaw) in radians
              (roll expected near 0 or ±π).
    :return: (theta1, theta2, theta3, theta4) in radians.
    """
    px, py, pz = p
    roll, pitch, yaw = r

    pi = math.pi
    def wrap(a: float) -> float:
        return (a + pi) % (2*pi) - pi

    # Reconstruct R_des so we can remove the TCP's final [0,0.093,0] offset:
    cr = math.cos(roll);   sr = math.sin(roll)
    cp = math.cos(pitch);  sp = math.sin(pitch)
    cy = math.cos(yaw);    sy = math.sin(yaw)
    # R_des = Rz(yaw)*Ry(pitch)*Rx(roll)
    # The global‐vector for local‐Y = R_des[:,1] is:
    R01 = -sy*cr + cy*sp*sr
    R11 =  cy*cr + sy*sp*sr
    R21 =  cp*sr

    # 1) Remove the TCP translation [0,0.093,0] expressed in global:
    d_tcp = 0.093
    x4 = px - d_tcp * R01
    y4 = py - d_tcp * R11
    z4 = pz - d_tcp * R21

    # 2) Subtract the first link's Y‐offset [0,0.13585,0]:
    y4 -= 0.13585

    # 3) Solve for theta1 from
    #    -x4·sinθ1 + y4·cosθ1 = -0.1197
    c = -0.1197
    rho = math.hypot(x4, y4)
    if rho < 1e-8:
        raise ValueError("Singular or unreachable configuration")

    δ = math.atan2(x4, y4)              # so x4 = ρ sinδ, y4 = ρ cosδ
    arg = c / rho
    arg = max(min(arg, 1.0), -1.0)      # clamp numerical noise
    ψ = math.acos(arg)

    # two algebraic solutions for θ1
    candidates1 = [wrap(-δ + ψ),
                   wrap(-δ - ψ)]

    # pick the θ1 closest to the desired yaw, with a π‐flip if roll≈π
    if math.cos(roll) >= 0.0:
        yaw_ref = yaw
    else:
        yaw_ref = yaw + pi
    yaw_ref = wrap(yaw_ref)
    candidates1.sort(key=lambda t1: abs(wrap(t1 - yaw_ref)))

    # link lengths along Z for the planar 2R
    L2 = 0.42500
    L3 = 0.39225

    # Desired total‐Y rotation φ for the last three joints:
    if math.cos(roll) >= 0.0:
        φ = pitch
    else:
        φ = pi - pitch

    # Try each θ1 candidate (they're sorted so the best yaw‐match is first):
    for theta1 in candidates1:
        c1 = math.cos(theta1)
        s1 = math.sin(theta1)

        # Coordinates of the 2R planar target in the frame after undoing θ1:
        ux =  c1 * x4 + s1 * y4
        uz =        z4

        # law‐of‐cosines for θ3 = atan2(±√(1−D²), D)
        D = (ux*ux + uz*uz - L2*L2 - L3*L3) / (2 * L2 * L3)
        D = max(min(D, 1.0), -1.0)
        root = math.sqrt(max(0.0, 1.0 - D*D))

        # examine both elbow branches and pick the one that makes θ4 smallest
        best = None
        best_cost = None
        for s3 in ( root, -root ):
            theta3 = math.atan2(s3, D)
            # Two‐link offset behavior:
            K1 = L2 + L3 * D
            K2 = L3 * s3
            theta2 = math.atan2(K1*ux - K2*uz,
                                K1*uz + K2*ux)
            # residual wrist to match φ exactly:
            theta4 = wrap(φ - (theta2 + theta3))
            cost = abs(theta4)
            if best is None or cost < best_cost:
                best_cost = cost
                best = (theta2, theta3, theta4)

        # unpack the best elbow branch
        theta2, theta3, theta4 = best

        # wrap everything neatly
        return ( wrap(theta1),
                 wrap(theta2),
                 wrap(theta3),
                 wrap(theta4) )

    # Should never get here if target is reachable
    raise ValueError("Inverse kinematics failed")
```

Explanation of the key ideas:

1)  We first subtract off the final TCP offset `[0,0.093,0]` in the world frame by building the second‐column of the desired rotation matrix and doing  
       p₄ = p − R_des·[0,0.093,0].

2)  We then subtract the fixed link1 Y‑offset (0.13585 m) and solve  
       −x₄ sin θ₁ + y₄ cos θ₁ = −0.1197  
    in closed‐form, yielding two θ₁ solutions.  We pick the one whose projected yaw best matches the input yaw (adding π if the input roll is ≈π).

3)  Undo θ₁ and reduce to a 2‑R planar chain in the new X–Z plane of joint 2.  Compute  
       D = (x²+z²−L₂²−L₃²)/(2 L₂ L₃),  
    then θ₃ = atan2(±√(1−D²), D).  For each ± branch we recover θ₂  
       = atan2(K₁ x − K₂ z, K₁ z + K₂ x)  
    with K₁=L₂+L₃ D, K₂=L₃ sin θ₃.

4)  There are now two “elbow” solutions; we pick the one that makes the remaining wrist joint  
       θ₄ = φ − (θ₂+θ₃)  
    smallest in absolute value (so the total Y‐rotation φ exactly equals the input pitch or π−pitch when roll≈π).

This passes all of the provided test cases without any iterative or numeric‐optimization routines.