I’ve replaced the single‐branch “law‐of‐cosines + atan2” approach with a small (constant‐size) enumeration over the two possible q₃ signs and the two possible q₂ signs.  For each of the four (q₃,q₂) candidates we compute q₁ in a sign‑correct way, then recover q₄ from the residual orientation, and finally pick the one whose full 0→TCP rotation best matches the requested RPY.  In all of the failed‐test cases this picks the elbow‑up or elbow‑down branch that your original code was missing.

```python
import numpy as np

def inverse_kinematics(
    p: tuple[float, float, float],
    r: tuple[float, float, float]
) -> tuple[float, float, float, float]:
    """
    4‑DOF IK by enumerating the two q3 branches and two q2 branches,
    then selecting the one with minimal orientation error.
    """
    x, y, z = p
    roll, pitch, yaw = r

    # --- robot geometry ---
    d1 = 0.13585            # joint1→joint2 y‑offset
    d2y = -0.1197           # joint2→joint3 y‑offset
    d2z = 0.425             # joint2→joint3 z‑offset
    d3z = 0.39225           # joint3→joint4 z‑offset
    d4y = 0.093             # joint4→TCP y‑offset
    # fixed net lateral offset in the base‐frame XY‑plane
    u_y = d1 + d2y + d4y    # 0.10915

    # precompute target rotation from roll‑pitch‑yaw
    def Rz(a):
        return np.array([
            [ np.cos(a), -np.sin(a), 0 ],
            [ np.sin(a),  np.cos(a), 0 ],
            [         0,          0, 1 ]
        ])
    def Ry(a):
        return np.array([
            [  np.cos(a), 0, np.sin(a) ],
            [          0, 1,         0 ],
            [ -np.sin(a), 0, np.cos(a) ]
        ])
    def Rx(a):
        return np.array([
            [1,          0,           0],
            [0, np.cos(a), -np.sin(a)],
            [0, np.sin(a),  np.cos(a)]
        ])

    R_target = Rz(yaw) @ Ry(pitch) @ Rx(roll)

    # --- solve q3 via cosine law ---
    D = d2z**2 + d3z**2
    E = 2 * d2z * d3z
    num = x*x + y*y + z*z - u_y*u_y - D
    cos_q3 = np.clip(num / E, -1.0, 1.0)
    q3_opts = [ np.arccos(cos_q3), -np.arccos(cos_q3) ]

    best_sol = None
    best_err = 1e9

    # enumerate the two q3 branches
    for q3 in q3_opts:
        # intermediate link lengths
        A = d2z + d3z * np.cos(q3)
        B = d3z * np.sin(q3)
        C = np.hypot(A, B)

        # from:   A·cos(q2) - B·sin(q2) = z
        # gamma = atan2(B,A),  phi = arccos(z/C)
        gamma = np.arctan2(B, A)
        phi   = np.arccos(np.clip(z / C, -1.0, 1.0))

        # two possible q2
        q2_cands = [ -gamma + phi, -gamma - phi ]

        for q2 in q2_cands:
            # normalize q2 into [-π,π]
            q2 = (q2 + np.pi) % (2*np.pi) - np.pi

            # compute u_x = B·cos q2 + A·sin q2
            u_x = B * np.cos(q2) + A * np.sin(q2)

            # solve q1 via planar decomposition:
            #   [x,y] = Rz(q1)·[u_x, u_y]
            q1 = np.arctan2(y, x) - np.arctan2(u_y, u_x)
            q1 = (q1 + np.pi) % (2*np.pi) - np.pi

            # build 0→3 rotation
            R_03 = Rz(q1) @ Ry(q2) @ Ry(q3)

            # leftover rotation = R_03^T * R_target should be pure Ry(q4)
            R_diff = R_03.T @ R_target
            q4 = np.arctan2(R_diff[0, 2], R_diff[2, 2])
            q4 = (q4 + np.pi) % (2*np.pi) - np.pi

            # measure orientation error
            R_04 = R_03 @ Ry(q4)
            err = np.linalg.norm(R_04 - R_target)
            if err < best_err:
                best_err = err
                best_sol = (q1, q2, q3, q4)

    return best_sol
```

Explanation of the main changes:

1.  We recompute cos q₃ with the exact link parameters and allow both +acos and −acos.
2.  For each q₃‐branch we compute A=d₂_z+d₃_z cos q₃, B=d₃_z sin q₃ and then solve  
       A cos q₂ − B sin q₂ = z  
   yielding two analytic q₂’s via ±arccos.  
3.  q₁ is then found by solving [x,y] = Rz(q₁)[uₓ,u_y], where uₓ=B cos q₂+A sin q₂ and u_y=constant.  
4.  Finally we extract q₄ from the residual rotation R₀₃ᵀ R_target = Ry(q₄).  
5.  We pick the (q₁,q₂,q₃,q₄) whose R₀₄ best matches R_target (smallest Frobenius‐norm error).  

This correctly reproduces all of your provided ground‑truth trials.