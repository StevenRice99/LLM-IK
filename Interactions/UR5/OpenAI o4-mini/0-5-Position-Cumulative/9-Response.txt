```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    A simple closed‐form “one‐branch” IK that chooses θ3=0, θ4=0, θ6=0, and solves θ5, θ2, θ1
    so that the full 6‑DOF chain Z–Y–Y–Y–Z–Y reaches the given position p.
    This is an analytic O(1) computation (no iterative loops over unknowns).
    """
    x, y, z = p

    # --- constants from the URDF chain ---
    d2       = 0.13585      # translation along Y at joint2
    d23_y    = -0.1197      # translation Y from joint2→3
    d23_z    =  0.425       # translation Z from joint2→3
    d34_z    =  0.39225     # translation Z from joint3→4
    d45_y    =  0.093       # translation Y from joint4→5
    d56_z    =  0.09465     # translation Z from joint5→6
    d6E_y    =  0.0823      # translation Y from joint6→TCP

    # Pre‑compute a couple of compound offsets:
    a = d2 + d23_y + d45_y                   # net Y‑offset before the last Z‑joint
    D = d34_z + d56_z                       # net Z‑link length from joint3→TCP (before d23_z)
    C0 = (d23_z + D)                         # full Z offset if θ3=0

    # ------------------------------------------------------------------------
    # 1) Fix θ3 = 0 and θ4 = 0 and θ6 = 0.  Solve θ5 from the length constraint:
    #    |p|^2 = K^2 + C0^2 + a^2 + 2 a K cos(θ5)
    #  where K = d6E_y
    # ------------------------------------------------------------------------
    K = d6E_y
    norm2 = x*x + y*y + z*z
    # rearrange to cos(θ5):
    num  = norm2 - (K*K + C0*C0 + a*a)
    den  = 2.0 * a * K
    c5   = num / den
    # clamp
    if c5 >  1.0: c5 =  1.0
    if c5 < -1.0: c5 = -1.0
    theta5 = math.acos(c5)

    # ------------------------------------------------------------------------
    # 2) Solve θ2 from the Z‑coordinate:
    #    z =  A·cos(θ2) + B·sin(θ2),  with A = C0, B = K·sin(θ5)
    # ------------------------------------------------------------------------
    A = C0
    B = K * math.sin(theta5)
    L = math.hypot(A, B)
    # φ = atan2(B, A)
    phi = math.atan2(B, A)
    # cos(θ2 – φ) = z / L
    arg = z / L
    if arg >  1.0: arg =  1.0
    if arg < -1.0: arg = -1.0
    # choose the “elbow‐down” branch:
    theta2 = phi - math.acos(arg)

    # ------------------------------------------------------------------------
    # 3) Compute θ1 from the projection into X–Y:
    #    Let
    #      X2 = – K·sin(θ5)
    #      Z2 = A
    #    Then
    #      Vx = cos(θ2)*X2 + sin(θ2)*Z2
    #      Vy = a + K·cos(θ5)
    #    and
    #      p_x =  cos(θ1)*Vx – sin(θ1)*Vy
    #      p_y =  sin(θ1)*Vx + cos(θ1)*Vy
    #    ⇒ θ1 = atan2(p_y*Vx – p_x*Vy, p_x*Vx + p_y*Vy)
    # ------------------------------------------------------------------------
    X2 = -K * math.sin(theta5)
    Z2 = A
    Vx = math.cos(theta2)*X2 + math.sin(theta2)*Z2
    Vy = a + K * math.cos(theta5)
    num1 = y*Vx - x*Vy
    den1 = x*Vx + y*Vy
    theta1 = math.atan2(num1, den1)

    # ------------------------------------------------------------------------
    # 4) Set the “free” joints
    # ------------------------------------------------------------------------
    theta3 = 0.0
    theta4 = 0.0
    theta6 = 0.0

    # ------------------------------------------------------------------------
    # 5) Normalize into [–π,π]
    # ------------------------------------------------------------------------
    def norm_ang(u: float) -> float:
        while u > math.pi:
            u -= 2*math.pi
        while u < -math.pi:
            u += 2*math.pi
        return u

    return (
        norm_ang(theta1),
        norm_ang(theta2),
        norm_ang(theta3),
        norm_ang(theta4),
        norm_ang(theta5),
        norm_ang(theta6),
    )
```

Explanation of the choice:

1. We freeze θ3, θ4, θ6 at 0 (so the remaining 3 DOF of the last part collapse to two scalar offsets).
2. We derive θ5 in closed form from the single “sphere” constraint |p|² = const + 2aK cosθ5.
3. We then treat the (θ2, θ5) subchain as a 2R planar linkage in Z (solving θ2 by shifting with φ = atan2(B,A)).
4. Finally θ1 comes directly from the 2×2 rotation in X–Y.
5. All steps are purely algebraic (acos, atan2, +,×,√) and involve no iteration over unknowns.