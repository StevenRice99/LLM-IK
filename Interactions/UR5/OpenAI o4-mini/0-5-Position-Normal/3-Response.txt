```python
import math

def inverse_kinematics(p: tuple[float, float, float]) -> tuple[float, float, float, float, float, float]:
    """
    Gets the joint values needed to reach position "p".
    :param p: The position to reach in the form [x, y, z].
    :return: A list of the values to set the links to for reaching position "p".
    """
    x, y, z = p

    # Link offsets from the URDF
    d1 = 0.13585       # link1→link2 translation along y
    b  = 0.1197        # magnitude of link2→link3 translation along y (negative in URDF)
    d3 = 0.425         # link2→link3 translation along z
    d4 = 0.39225       # link3→link4 translation along z
    d5 = 0.093         # link4→link5 translation along y
    d6 = 0.09465       # link5→link6 translation along z
    d7 = 0.0823        # link6→TCP translation along y

    # Combined offsets
    Dy = d5 + d7       # total y‑offset after joint 3
    Dz = d4 + d6       # total z‑offset after joint 3
    v0_y = d1 - b + Dy # constant y‑component in the plane of joints 2&3

    # Planar distance from base axis to TCP projection in x–y plane
    R = math.hypot(x, y)
    # Effective horizontal reach in the joint‑2/3 plane
    r_dash = math.sqrt(max(R*R - v0_y*v0_y, 0.0))

    # Solve for q3 using the law of cosines in the 2‑link (d3,Dz) planar chain
    A = d3
    B = Dz
    C3 = (r_dash*r_dash + z*z - A*A - B*B) / (2.0 * A * B)
    C3 = max(min(C3, 1.0), -1.0)
    q3 = math.acos(C3)  # choose the “elbow‑up” solution

    # Solve for q2 from planar geometry
    k1 = A + B*math.cos(q3)
    k2 = B*math.sin(q3)
    q2 = math.atan2(r_dash*k1 - k2*z,
                    k1*z      + k2*r_dash)

    # Solve for q1 by aligning the rotated plane to the world x–y projection
    v0_x = A*math.sin(q2) + B*math.sin(q2 + q3)
    dot = x*v0_x + y*v0_y
    cross = x*v0_y - y*v0_x
    q1 = math.atan2(cross, dot)

    # For a purely positional solve, fix the wrist joints to zero
    q4 = 0.0
    q5 = 0.0
    q6 = 0.0

    return (q1, q2, q3, q4, q5, q6)
```