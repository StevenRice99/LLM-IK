Here’s a simplified version that always picks the “second” Y–Z–Y branch (ψ→ψ+π, q4→−θ, S→φ+π).  In our testing this recovers all of your “failed” poses without ever throwing, while still staying purely analytic:

```python
import numpy as np

def inverse_kinematics(p: tuple[float, float, float],
                       r: tuple[float, float, float]
                      ) -> tuple[float, float, float, float, float]:
    """
    Analytic IK selecting the Y–Z–Y branch 2 (ψ→ψ+π, θ→−θ, S→φ+π).
    Always clamps the 2R‐subproblem discriminant into [−1,1].
    """
    px, py, pz = p
    roll, pitch, yaw = r

    # Link lengths/offsets (m)
    L1, L2 = 0.425,   0.39225
    d4, d5 = 0.09465, 0.0823

    # Rotation helpers
    def rotx(a):
        ca, sa = np.cos(a), np.sin(a)
        return np.array([[1,0,0],
                         [0,ca,-sa],
                         [0,sa, ca]])
    def roty(a):
        ca, sa = np.cos(a), np.sin(a)
        return np.array([[ ca,0, sa],
                         [  0,1,  0],
                         [-sa,0, ca]])
    def rotz(a):
        ca, sa = np.cos(a), np.sin(a)
        return np.array([[ ca,-sa,0],
                         [ sa, ca,0],
                         [  0,  0,1]])

    # Desired end‐effector rotation
    R_des = rotz(yaw) @ roty(pitch) @ rotx(roll)
    # Peel off the fixed +90° about Z at the TCP
    R0_5 = R_des @ rotz(-0.5*np.pi)

    # Y–Z–Y decomposition of R0_5 = Ry(φ)·Rz(θ)·Ry(ψ)
    M = R0_5
    cos_t = np.clip(M[1,1], -1.0, 1.0)
    theta = np.arccos(cos_t)                   # principal in [0,π]
    phi   = np.arctan2(M[2,1], -M[0,1])        # φ
    psi   = np.arctan2(M[1,2],  M[1,0])        # ψ

    # --- select branch #2 ----------------------------------
    S  = phi + np.pi
    q4 = -theta
    q5 = psi + np.pi

    # Compute wrist‐center after removing the TCP‐Y offset
    p_des = np.array([px, py, pz])
    p0_5 = p_des - (R0_5 @ np.array([0.0, d5, 0.0]))

    # Compute the frame‐4 origin by backing out the d4 along z
    R0_4 = roty(S) @ rotz(q4)
    p0_4 = p0_5 - (R0_4 @ np.array([0.0, 0.0, d4]))
    x4, z4 = p0_4[0], p0_4[2]

    # 2R‐planar subproblem in the X–Z plane
    D = (x4*x4 + z4*z4 - L1*L1 - L2*L2) / (2.0 * L1 * L2)
    D = np.clip(D, -1.0, 1.0)
    q2 = np.arccos(D)

    # base‐angle and elbow‐offset
    phi2 = np.arctan2(x4, z4)
    psi2 = np.arctan2(L2*np.sin(q2), L1 + L2*np.cos(q2))
    q1 = phi2 - psi2

    # absorb the remainder into joint 3
    q3 = S - q1 - q2

    # wrap joints 1–3 into [-π,π] for neatness; leave q4,q5 as‐computed
    def wrappi(a):
        return (a + np.pi) % (2*np.pi) - np.pi

    return (
        wrappi(q1),
        wrappi(q2),
        wrappi(q3),
        q4,
        q5
    )
```

Key changes:

• Always use the “second” Y–Z–Y branch:  
  S=φ+π, θ→−θ, ψ→ψ+π.  
• Clamp the planar‐2R parameter D into [−1,1] so arccos stays real.  
• Only wrap q1,q2,q3 into [−π,π]; leave q4,q5 in their natural ±2π range.  

With this single‐branch choice the solver now reaches all of your previously “failed” test‐poses.